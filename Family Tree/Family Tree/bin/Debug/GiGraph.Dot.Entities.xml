<?xml version="1.0" encoding="utf-8"?>
<doc>
    <assembly>
        <name>GiGraph.Dot.Entities</name>
    </assembly>
    <members>
        <member name="M:GiGraph.Dot.Entities.Attributes.Collections.DotAttributeCollection.RemoveAll(System.Predicate{GiGraph.Dot.Entities.Attributes.DotAttribute})">
            <summary>
                Removes all attributes matching the specified criteria from the collection.
            </summary>
            <param name="match">
                The predicate to use for matching attributes.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.Collections.DotAttributeCollection.Add(System.String,GiGraph.Dot.Entities.Attributes.DotAttribute)">
            <summary>
                Adds an entry with the given key and value to the list. An <see cref="T:System.ArgumentException" /> is thrown if the key is already
                present in the list or when the specified key is different than the key assigned to the attribute.
            </summary>
            <param name="key">
                The key of the attribute to add.
            </param>
            <param name="attribute">
                The attribute to add.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.Collections.DotAttributeCollection.IsNullified(System.String)">
            <summary>
                Determines whether the collection contains an attribute with the specified key, whose value is null.
            </summary>
            <param name="key">
                The key of the attribute whose value to check.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.Collections.DotAttributeCollection.Get(System.String)">
            <summary>
                Gets an attribute with the specified key or null if it does not exist in the collection.
            </summary>
            <param name="key">
                The key of the attribute to get.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.Collections.DotAttributeCollection.GetAs``1(System.String)">
            <summary>
                Checks if an attribute with the specified key exists in the collection, and returns it as the specified type. If the
                attribute is found, but cannot be cast as the specified type, an exception is thrown.
            </summary>
            <typeparam name="T">
                The type to return the attribute as.
            </typeparam>
            <param name="key">
                The key of the attribute to get.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.Collections.DotAttributeCollection.TryGetAs``1(System.String,``0@)">
            <summary>
                Checks if an attribute with the specified key exists in the collection, and returns it as the specified type. If the
                attribute is found, but cannot be cast as the specified type, returns false.
            </summary>
            <typeparam name="T">
                The type to return the attribute as.
            </typeparam>
            <param name="key">
                The key of the attribute to get.
            </param>
            <param name="attribute">
                The attribute if found and valid, or null otherwise.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.Collections.DotAttributeCollection.GetValueAs``1(System.String,``0@)">
            <summary>
                Checks if an attribute with the specified key exists in the collection, and returns its value as the specified type. If the
                attribute is found, but its value cannot be cast as the specified type, an exception is thrown.
            </summary>
            <typeparam name="T">
                The type to return the attribute value as.
            </typeparam>
            <param name="key">
                The key of the attribute to get.
            </param>
            <param name="value">
                The value of the attribute if found and valid, or null if not found.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.Collections.DotAttributeCollection.TryGetValueAs``1(System.String,``0@)">
            <summary>
                Checks if an attribute with the specified key exists in the collection, and returns its value as the specified type. If the
                attribute is found, but its value cannot be cast as the specified type, returns false.
            </summary>
            <typeparam name="T">
                The type to return the attribute value as.
            </typeparam>
            <param name="key">
                The key of the attribute to get.
            </param>
            <param name="value">
                The value of the attribute if found and valid, or null otherwise.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.Collections.DotAttributeCollection.GetValueAs``1(System.String,``0@,System.Func{System.Object,System.ValueTuple{System.Boolean,``0}}[])">
            <summary>
                Checks if an attribute with the specified key exists in the collection, and returns its value as the specified type. If the
                attribute is found, but its value cannot be cast as the specified type, and converted using any of the specified converters,
                an exception is thrown.
            </summary>
            <typeparam name="T">
                The type to return the attribute value as.
            </typeparam>
            <param name="key">
                The key of the attribute to get.
            </param>
            <param name="value">
                The value of the attribute if found and valid, or null if not found.
            </param>
            <param name="converters">
                The converters to try to use when the value of the attribute is of a different type than specified by the
                <typeparamref name="T" /> parameter.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.Collections.DotAttributeCollection.GetValueAsInt(System.String)">
            <summary>
                Checks if an attribute with the specified key exists in the collection, and returns its value as <see cref="T:System.Int32" />. If the
                attribute is found, but its value cannot be cast nor converted to the specified type, an exception is thrown.
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.Collections.DotAttributeCollection.GetValueAsDouble(System.String)">
            <summary>
                Checks if an attribute with the specified key exists in the collection, and returns its value as <see cref="T:System.Double" />. If
                the attribute is found, but its value cannot be cast nor converted to the returned type, an exception is thrown.
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.Collections.DotAttributeCollection.GetValueAsBool(System.String)">
            <summary>
                Checks if an attribute with the specified key exists in the collection, and returns its value as <see cref="T:System.Boolean" />. If the
                attribute is found, but its value cannot be cast nor converted to the returned type, an exception is thrown.
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.Collections.DotAttributeCollection.GetValueAsPoint(System.String)">
            <summary>
                Checks if an attribute with the specified key exists in the collection, and returns its value as <see cref="T:GiGraph.Dot.Types.Geometry.DotPoint" />. If
                the attribute is found, but its value cannot be cast nor converted to the returned type, an exception is thrown.
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.Collections.DotAttributeCollection.GetValueAsColor(System.String)">
            <summary>
                Checks if an attribute with the specified key exists in the collection, and returns its value as <see cref="T:GiGraph.Dot.Types.Colors.DotColor" />. If
                the attribute is found, but its value cannot be cast nor converted to the returned type, an exception is thrown.
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.Collections.DotAttributeCollection.GetValueAsColorDefinition(System.String)">
            <summary>
                Checks if an attribute with the specified key exists in the collection, and returns its value as
                <see cref="T:GiGraph.Dot.Types.Colors.DotColorDefinition" />. If the attribute is found, but its value cannot be cast nor converted to the returned
                type, an exception is thrown.
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.Collections.DotAttributeCollection.GetValueAsString(System.String)">
            <summary>
                Checks if an attribute with the specified key exists in the collection, and returns its value as <see cref="T:System.String" />. If
                the attribute is found, but its value cannot be cast nor converted to the returned type, an exception is thrown.
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.Collections.DotAttributeCollection.GetValueAsEscapeString(System.String)">
            <summary>
                Checks if an attribute with the specified key exists in the collection, and returns its value as
                <see cref="T:GiGraph.Dot.Types.EscapeString.DotEscapeString" />. If the attribute is found, but its value cannot be cast nor converted to the returned type,
                an exception is thrown.
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.Collections.DotAttributeCollection.GetValueAsLabel(System.String)">
            <summary>
                Checks if an attribute with the specified key exists in the collection, and returns its value as <see cref="T:GiGraph.Dot.Entities.Labels.DotLabel" />. If
                the attribute is found, but its value cannot be cast nor converted to the returned type, an exception is thrown.
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.Collections.DotAttributeCollection.GetValueAsArrowheadDefinition(System.String)">
            <summary>
                Checks if an attribute with the specified key exists in the collection, and returns its value as
                <see cref="T:GiGraph.Dot.Types.Arrowheads.DotArrowheadDefinition" />. If the attribute is found, but its value cannot be cast nor converted to the returned
                type, an exception is thrown.
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.Collections.DotAttributeCollection.GetValueAsPackingDefinition(System.String)">
            <summary>
                Checks if an attribute with the specified key exists in the collection, and returns its value as
                <see cref="T:GiGraph.Dot.Types.Packing.DotPackingDefinition" />. If the attribute is found, but its value cannot be cast nor converted to the returned
                type, an exception is thrown.
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.Collections.DotAttributeCollection.GetValueAsPackingModeDefinition(System.String)">
            <summary>
                Checks if an attribute with the specified key exists in the collection, and returns its value as
                <see cref="T:GiGraph.Dot.Types.Packing.DotPackingModeDefinition" />. If the attribute is found, but its value cannot be cast nor converted to the
                returned type, an exception is thrown.
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.Collections.DotAttributeCollection.GetValueAsRankSeparationDefinition(System.String)">
            <summary>
                Checks if an attribute with the specified key exists in the collection, and returns its value as
                <see cref="T:GiGraph.Dot.Types.Ranks.DotRankSeparationDefinition" />. If the attribute is found, but its value cannot be cast nor converted to the
                returned type, an exception is thrown.
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.Collections.DotAttributeCollection.GetValueAsGraphScalingDefinition(System.String)">
            <summary>
                Checks if an attribute with the specified key exists in the collection, and returns its value as
                <see cref="T:GiGraph.Dot.Types.Graphs.DotGraphScalingDefinition" />. If the attribute is found, but its value cannot be cast nor converted to the
                returned type, an exception is thrown.
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.Collections.DotAttributeCollection.GetValueAsEndpointPort(System.String)">
            <summary>
                Checks if an attribute with the specified key exists in the collection, and returns its value as
                <see cref="T:GiGraph.Dot.Types.Edges.DotEndpointPort" />. If the attribute is found, but its value cannot be cast nor converted to the returned type,
                an exception is thrown.
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.Collections.DotAttributeCollection.GetValueAsId(System.String)">
            <summary>
                Checks if an attribute with the specified key exists in the collection, and returns its value as <see cref="T:GiGraph.Dot.Types.Identifiers.DotId" />. If the
                attribute is found, but its value cannot be cast nor converted to the returned type, an exception is thrown.
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.Collections.DotAttributeCollection.GetValueAsClusterId(System.String)">
            <summary>
                Checks if an attribute with the specified key exists in the collection, and returns its value as <see cref="T:GiGraph.Dot.Types.Clusters.DotClusterId" />.
                If the attribute is found, but its value cannot be cast nor converted to the returned type, an exception is thrown.
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.Collections.DotAttributeCollection.Set(GiGraph.Dot.Entities.Attributes.DotAttribute)">
            <summary>
                Adds or replaces the specified attribute in the collection.
            </summary>
            <param name="attribute">
                The attribute to include in the collection.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.Collections.DotAttributeCollection.SetRange(System.Collections.Generic.IEnumerable{GiGraph.Dot.Entities.Attributes.DotAttribute})">
            <summary>
                Adds or replaces the specified attributes in the collection.
            </summary>
            <param name="attributes">
                The attributes to include in the collection.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.Collections.DotAttributeCollection.Nullify(System.String)">
            <summary>
                Sets a null value for the specified attribute key.
            </summary>
            <param name="key">
                The key of the attribute whose value to set.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.Collections.DotAttributeCollection.Set(System.String,System.String)">
            <summary>
                Adds or replaces the specified attribute in the collection.
            </summary>
            <param name="key">
                The key of the attribute to include in the collection.
            </param>
            <param name="value">
                The value of the attribute to include in the collection.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.Collections.DotAttributeCollection.Set``1(System.String,``0)">
            <summary>
                Adds or replaces the specified escape string attribute in the collection.
            </summary>
            <param name="key">
                The key of the attribute to include in the collection.
            </param>
            <param name="value">
                The value of the attribute to include in the collection.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.Collections.DotAttributeCollection.Set(System.String,System.Int32)">
            <summary>
                Adds or replaces the specified integer value attribute in the collection.
            </summary>
            <param name="key">
                The key of the attribute to include in the collection.
            </param>
            <param name="value">
                The value of the attribute to include in the collection.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.Collections.DotAttributeCollection.Set(System.String,System.Double)">
            <summary>
                Adds or replaces the specified double value attribute in the collection.
            </summary>
            <param name="key">
                The key of the attribute to include in the collection.
            </param>
            <param name="value">
                The value of the attribute to include in the collection.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.Collections.DotAttributeCollection.Set(System.String,System.Double[])">
            <summary>
                Adds or replaces the specified double list value attribute in the collection.
            </summary>
            <param name="key">
                The key of the attribute to include in the collection.
            </param>
            <param name="value">
                The value of the attribute to include in the collection.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.Collections.DotAttributeCollection.Set(System.String,System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
                Adds or replaces the specified double list value attribute in the collection.
            </summary>
            <param name="key">
                The key of the attribute to include in the collection.
            </param>
            <param name="value">
                The value of the attribute to include in the collection.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.Collections.DotAttributeCollection.Set(System.String,System.Boolean)">
            <summary>
                Adds or replaces the specified boolean value attribute in the collection.
            </summary>
            <param name="key">
                The key of the attribute to include in the collection.
            </param>
            <param name="value">
                The value of the attribute to include in the collection.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.Collections.DotAttributeCollection.Set(System.String,System.Drawing.Color)">
            <summary>
                Adds or replaces the specified color value attribute in the collection.
            </summary>
            <param name="key">
                The key of the attribute to include in the collection.
            </param>
            <param name="value">
                The value of the attribute to include in the collection.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.Collections.DotAttributeCollection.SetEnum``1(System.String,``0)">
            <summary>
                Adds or replaces the specified enumeration value attribute in the collection.
            </summary>
            <param name="key">
                The key of the attribute to include in the collection.
            </param>
            <param name="value">
                The value of the attribute to include in the collection.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.Collections.DotAttributeCollection.SetComplex``1(System.String,``0)">
            <summary>
                Adds or replaces the specified complex type value attribute in the collection.
            </summary>
            <param name="key">
                The key of the attribute to include in the collection.
            </param>
            <param name="value">
                The value of the attribute to include in the collection.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.Collections.DotAttributeCollection.SetComplex``1(System.String,``0[])">
            <summary>
                Adds or replaces the specified complex type value array attribute in the collection.
            </summary>
            <param name="key">
                The key of the attribute to include in the collection.
            </param>
            <param name="value">
                The value of the attribute to include in the collection.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.Collections.DotAttributeCollection.SetComplex``1(System.String,System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Adds or replaces the specified complex type value array attribute in the collection.
            </summary>
            <param name="key">
                The key of the attribute to include in the collection.
            </param>
            <param name="value">
                The value of the attribute to include in the collection.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.Collections.DotAttributeCollection.SetCustom(System.String,System.String)">
            <summary>
                Adds or replaces the specified attribute in the collection. The value is rendered AS IS in the output DOT script, so the
                attribute can be used for any type of value, not only for strings. Make sure, however, that the value is escaped when
                necessary, following the DOT syntax rules ( <see href="https://graphviz.org/doc/info/lang.html" />). If, for instance, it
                contains an unescaped quotation mark, the output script will be syntactically incorrect.
            </summary>
            <param name="key">
                The key of the attribute to include in the collection.
            </param>
            <param name="value">
                The value of the attribute to include in the collection.
            </param>
        </member>
        <member name="P:GiGraph.Dot.Entities.Attributes.DotAttribute.Key">
            <summary>
                Gets the key of the attribute.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Attributes.DotAttribute.Annotation">
            <summary>
                The annotation to write in the output DOT script as a comment in the context of the element or section represented by the
                current object.
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.DotAttribute.GetValue">
            <summary>
                Gets the value of the attribute.
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.DotAttribute.GetDotEncodedValue(GiGraph.Dot.Output.Options.DotSyntaxOptions,GiGraph.Dot.Output.Options.DotSyntaxRules)">
            <summary>
                Gets the value of the attribute in a format understood by DOT graph renderer.
            </summary>
            <param name="options">
                The DOT generation options to use.
            </param>
            <param name="syntaxRules">
                The DOT syntax rules to use.
            </param>
        </member>
        <member name="P:GiGraph.Dot.Entities.Attributes.DotAttribute`1.Value">
            <summary>
                Gets the value of the attribute.
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.DotAttribute`1.GetValue">
            <summary>
                Gets the value of the attribute.
            </summary>
        </member>
        <member name="T:GiGraph.Dot.Entities.Attributes.DotBoolAttribute">
            <summary>
                A boolean value attribute.
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.DotBoolAttribute.#ctor(System.String,System.Boolean)">
            <summary>
                Creates a new instance of the attribute.
            </summary>
            <param name="key">
                The key of the attribute.
            </param>
            <param name="value">
                The value of the attribute.
            </param>
        </member>
        <member name="T:GiGraph.Dot.Entities.Attributes.DotColorAttribute">
            <summary>
                Represents a single color.
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.DotColorAttribute.#ctor(System.String,System.Drawing.Color)">
            <summary>
                Creates a new color attribute.
            </summary>
            <param name="key">
                The key of the attribute, for example "color", "bgcolor", or "fillcolor".
            </param>
            <param name="color">
                The value of the attribute as a color.
            </param>
        </member>
        <member name="T:GiGraph.Dot.Entities.Attributes.DotComplexTypeArrayAttribute`1">
            <summary>
                A DOT-encodable value array attribute.
            </summary>
            <typeparam name="TComplex">
                A complex type that implements the <see cref="T:GiGraph.Dot.Output.Qualities.IDotEncodable" /> interface.
            </typeparam>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.DotComplexTypeArrayAttribute`1.#ctor(System.String,`0[])">
            <summary>
                Creates a new instance of the attribute.
            </summary>
            <param name="key">
                The key of the attribute.
            </param>
            <param name="value">
                The value of the attribute.
            </param>
        </member>
        <member name="T:GiGraph.Dot.Entities.Attributes.DotComplexTypeAttribute`1">
            <summary>
                A DOT-encodable value attribute.
            </summary>
            <typeparam name="TComplex">
                A complex type that implements the <see cref="T:GiGraph.Dot.Output.Qualities.IDotEncodable" /> interface.
            </typeparam>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.DotComplexTypeAttribute`1.#ctor(System.String,`0)">
            <summary>
                Creates a new instance of the attribute.
            </summary>
            <param name="key">
                The key of the attribute.
            </param>
            <param name="value">
                The value of the attribute.
            </param>
        </member>
        <member name="T:GiGraph.Dot.Entities.Attributes.DotCustomAttribute">
            <summary>
                A custom attribute. The value is rendered AS IS in the output DOT script, so the attribute can be used for any type of value,
                not only for strings. Make sure, however, that the value is escaped when necessary, following the DOT syntax rules (
                <see href="https://graphviz.org/doc/info/lang.html" />). If, for instance, it contains an unescaped quotation mark, the
                output script will be syntactically incorrect.
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.DotCustomAttribute.#ctor(System.String,System.String)">
            <summary>
                Creates a new instance of a custom attribute.
            </summary>
            <param name="key">
                The key of the attribute.
            </param>
            <param name="value">
                The value of the attribute.
            </param>
        </member>
        <member name="T:GiGraph.Dot.Entities.Attributes.DotDoubleArrayAttribute">
            <summary>
                A double array attribute.
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.DotDoubleArrayAttribute.#ctor(System.String,System.Double[])">
            <summary>
                Creates a new instance of the attribute.
            </summary>
            <param name="key">
                The key of the attribute.
            </param>
            <param name="value">
                The value of the attribute.
            </param>
        </member>
        <member name="T:GiGraph.Dot.Entities.Attributes.DotDoubleAttribute">
            <summary>
                A double value attribute.
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.DotDoubleAttribute.#ctor(System.String,System.Double)">
            <summary>
                Creates a new instance of the attribute.
            </summary>
            <param name="key">
                The key of the attribute.
            </param>
            <param name="value">
                The value of the attribute.
            </param>
        </member>
        <member name="T:GiGraph.Dot.Entities.Attributes.DotEnumAttribute`1">
            <summary>
                An enumeration attribute.
            </summary>
            <typeparam name="TEnum">
                An enumeration type whose values are annotated with the <see cref="T:GiGraph.Dot.Output.Metadata.DotAttributeValueAttribute" /> attributes.
            </typeparam>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.DotEnumAttribute`1.#ctor(System.String,`0)">
            <summary>
                Creates a new instance of the attribute.
            </summary>
            <param name="key">
                The key of the attribute.
            </param>
            <param name="value">
                The value of the attribute.
            </param>
        </member>
        <member name="T:GiGraph.Dot.Entities.Attributes.DotEscapeStringAttribute">
            <summary>
                A string attribute whose value is escaped on DOT script rendering when <see cref="T:GiGraph.Dot.Types.EscapeString.DotUnescapedString" /> is used, or is
                assumed to already be escaped when <see cref="T:GiGraph.Dot.Types.EscapeString.DotEscapedString" /> is used.
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.DotEscapeStringAttribute.#ctor(System.String,GiGraph.Dot.Types.EscapeString.DotEscapeString)">
            <summary>
                Creates a new instance of a string attribute.
            </summary>
            <param name="key">
                The key of the attribute.
            </param>
            <param name="value">
                The value of the attribute.
            </param>
        </member>
        <member name="T:GiGraph.Dot.Entities.Attributes.DotIntAttribute">
            <summary>
                An integer value attribute.
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.DotIntAttribute.#ctor(System.String,System.Int32)">
            <summary>
                Creates a new instance of the attribute.
            </summary>
            <param name="key">
                The key of the attribute.
            </param>
            <param name="value">
                The value of the attribute.
            </param>
        </member>
        <member name="T:GiGraph.Dot.Entities.Attributes.DotNullAttribute">
            <summary>
                An attribute with no value.
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.DotNullAttribute.#ctor(System.String)">
            <summary>
                Creates a new instance of the attribute.
            </summary>
            <param name="key">
                The key of the attribute.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.DotNullAttribute.GetValue">
            <summary>
                Gets the value of the attribute.
            </summary>
        </member>
        <member name="T:GiGraph.Dot.Entities.Attributes.DotStringAttribute">
            <summary>
                A string attribute. The value is rendered as is in the output DOT script, so the attribute can be used for any type of value,
                not only for strings.
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.DotStringAttribute.#ctor(System.String,System.String)">
            <summary>
                Creates a new instance of a string attribute.
            </summary>
            <param name="key">
                The key of the attribute.
            </param>
            <param name="value">
                The value of the attribute.
            </param>
        </member>
        <member name="T:GiGraph.Dot.Entities.Attributes.Factories.DotAttributeFactory">
            <summary>
                Attribute factory.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Attributes.Factories.DotAttributeFactory.Instance">
            <summary>
                A static factory instance.
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.Factories.DotAttributeFactory.CreateBool(System.String,System.Boolean)">
            <summary>
                Creates a new boolean attribute.
            </summary>
            <param name="key">
                The key of the attribute.
            </param>
            <param name="value">
                The value of the attribute.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.Factories.DotAttributeFactory.CreateInt(System.String,System.Int32)">
            <summary>
                Creates a new integer attribute.
            </summary>
            <param name="key">
                The key of the attribute.
            </param>
            <param name="value">
                The value of the attribute.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.Factories.DotAttributeFactory.CreateDouble(System.String,System.Double)">
            <summary>
                Creates a new double attribute.
            </summary>
            <param name="key">
                The key of the attribute.
            </param>
            <param name="value">
                The value of the attribute.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.Factories.DotAttributeFactory.CreateDoubleArray(System.String,System.Double[])">
            <summary>
                Creates a new double array attribute.
            </summary>
            <param name="key">
                The key of the attribute.
            </param>
            <param name="value">
                The value of the attribute.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.Factories.DotAttributeFactory.CreateDoubleArray(System.String,System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
                Creates a new double array attribute.
            </summary>
            <param name="key">
                The key of the attribute.
            </param>
            <param name="value">
                The value of the attribute.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.Factories.DotAttributeFactory.CreateColor(System.String,System.Drawing.Color)">
            <summary>
                Creates a new color attribute.
            </summary>
            <param name="key">
                The key of the attribute.
            </param>
            <param name="value">
                The value of the attribute.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.Factories.DotAttributeFactory.CreateString(System.String,System.String)">
            <summary>
                Creates a new string attribute.
            </summary>
            <param name="key">
                The key of the attribute.
            </param>
            <param name="value">
                The value of the attribute.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.Factories.DotAttributeFactory.CreateEscapeString``1(System.String,``0)">
            <summary>
                Creates a new escape string attribute.
            </summary>
            <param name="key">
                The key of the attribute.
            </param>
            <param name="value">
                The value of the attribute.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.Factories.DotAttributeFactory.CreateEnum``1(System.String,``0)">
            <summary>
                Creates a new enumeration attribute.
            </summary>
            <param name="key">
                The key of the attribute.
            </param>
            <param name="value">
                The value of the attribute.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.Factories.DotAttributeFactory.CreateComplex``1(System.String,``0)">
            <summary>
                Creates a new complex type attribute.
            </summary>
            <param name="key">
                The key of the attribute.
            </param>
            <param name="value">
                The value of the attribute.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.Factories.DotAttributeFactory.CreateComplexArray``1(System.String,``0[])">
            <summary>
                Creates a new complex type array attribute.
            </summary>
            <param name="key">
                The key of the attribute.
            </param>
            <param name="value">
                The value of the attribute.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.Factories.DotAttributeFactory.CreateComplexArray``1(System.String,System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Creates a new complex type array attribute.
            </summary>
            <param name="key">
                The key of the attribute.
            </param>
            <param name="value">
                The value of the attribute.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.Factories.DotAttributeFactory.CreateCustom(System.String,System.String)">
            <summary>
                Creates a new custom value attribute.
            </summary>
            <param name="key">
                The key of the attribute.
            </param>
            <param name="value">
                The value of the attribute.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.Factories.DotAttributeFactory.CreateNull(System.String)">
            <summary>
                Creates a new null value attribute.
            </summary>
            <param name="key">
                The key of the attribute.
            </param>
        </member>
        <member name="T:GiGraph.Dot.Entities.Attributes.Properties.Accessors.DotEntityAttributesAccessor`2">
            <summary>
                Provides access to attributes through property expressions.
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.Properties.Accessors.DotEntityAttributesAccessor`2.Get``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
                Gets the specified attribute from the collection. If it is not defined, returns null.
            </summary>
            <param name="property">
                The property to get an attribute for.
            </param>
            <typeparam name="TProperty">
                The type returned by the property.
            </typeparam>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.Properties.Accessors.DotEntityAttributesAccessor`2.GetValue``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
                Gets the value of the specified attribute from the collection. If it is not defined, returns null.
            </summary>
            <param name="property">
                The property to get an attribute for.
            </param>
            <typeparam name="TProperty">
                The type returned by the property.
            </typeparam>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.Properties.Accessors.DotEntityAttributesAccessor`2.SetValue``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
                Assigns a value to the specified property and returns the actual attribute added to the collection.
            </summary>
            <param name="property">
                The property whose value to set.
            </param>
            <param name="value">
                The value to assign to the property.
            </param>
            <typeparam name="TProperty">
                The type returned by the property.
            </typeparam>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.Properties.Accessors.DotEntityAttributesAccessor`2.SetCustomValue``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
            <summary>
                Assigns a custom value to the specified property and returns the actual attribute added to the collection. The value is
                rendered AS IS in the output DOT script, so it has to escaped appropriately when necessary (see
                <see href="https://graphviz.org/doc/info/lang.html" />).
            </summary>
            <param name="property">
                The property whose value to set.
            </param>
            <param name="value">
                The value to assign to the property.
            </param>
            <typeparam name="TProperty">
                The type returned by the property.
            </typeparam>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.Properties.Accessors.DotEntityAttributesAccessor`2.Remove``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
                Removes the specified attribute from the collection.
            </summary>
            <param name="property">
                The property by which to remove an associated attribute from the collection.
            </param>
            <typeparam name="TProperty">
                The type returned by the property.
            </typeparam>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.Properties.Accessors.DotEntityAttributesAccessor`2.Contains``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
                Determines whether the collection contains the specified attribute.
            </summary>
            <param name="property">
                The property to check.
            </param>
            <typeparam name="TProperty">
                The type returned by the property.
            </typeparam>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.Properties.Accessors.DotEntityAttributesAccessor`2.IsNullified``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
                Determines whether the collection contains the specified attribute with a null value assigned.
            </summary>
            <param name="property">
                The property to check.
            </param>
            <typeparam name="TProperty">
                The type returned by the property to check.
            </typeparam>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.Properties.Accessors.DotEntityAttributesAccessor`2.Nullify``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
                Adds an attribute with a null value to the collection.
            </summary>
            <param name="property">
                The property to add a null value attribute for.
            </param>
            <typeparam name="TProperty">
                The type returned by the property.
            </typeparam>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.Properties.Accessors.DotEntityAttributesAccessor`2.GetKey``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
                Gets the DOT key of the attribute the specified property provides access to.
            </summary>
            <param name="property">
                The property to get the DOT attribute key for.
            </param>
            <typeparam name="TProperty">
                The type returned by the property.
            </typeparam>
        </member>
        <member name="P:GiGraph.Dot.Entities.Attributes.Properties.Accessors.DotEntityRootAttributesAccessor`2.Collection">
            <summary>
                Gets the underlying collection of attributes applied to the element.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Attributes.Properties.Accessors.DotEntityRootAttributesAccessor`2.Annotation">
            <summary>
                The annotation to write in the output DOT script as a comment in the context of the element or section represented by the
                current object.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Attributes.Properties.Accessors.IDotEntityAttributesAccessor.InterfaceType">
            <summary>
                Gets the interface that exposes properties representing DOT attributes.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Attributes.Properties.Accessors.IDotEntityAttributesAccessor.Implementation">
            <summary>
                Gets the implementation that exposes properties representing DOT attributes.
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.Properties.Accessors.IDotEntityAttributesAccessor.GetPropertyKey(System.Reflection.PropertyInfo)">
            <summary>
                Gets an attribute key associated with the specified property of the current object.
            </summary>
            <param name="property">
                The property to get a key for.
            </param>
        </member>
        <member name="P:GiGraph.Dot.Entities.Attributes.Properties.Common.ClusterNode.DotClusterNodeCommonStyleAttributeOptions`2.FillStyle">
            <summary>
                Gets or sets a fill style.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Attributes.Properties.Common.ClusterNode.DotClusterNodeCommonStyleAttributeOptions`2.BorderStyle">
            <summary>
                Gets or sets a border style.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Attributes.Properties.Common.ClusterNode.DotClusterNodeCommonStyleAttributeOptions`2.BorderWeight">
            <summary>
                Gets or sets a border weight.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Attributes.Properties.Common.ClusterNode.DotClusterNodeCommonStyleAttributeOptions`2.CornerStyle">
            <summary>
                Gets or sets a corner style.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Attributes.Properties.Common.ClusterNode.DotClusterNodeCommonStyleAttributeOptions`2.Invisible">
            <summary>
                When set, makes the element invisible.
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.Properties.Common.ClusterNode.DotClusterNodeCommonStyleAttributeOptions`2.Set(`1)">
            <summary>
                Applies the specified style options.
            </summary>
            <param name="options">
                The options to apply.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.Properties.Common.ClusterNode.DotClusterNodeCommonStyleAttributeOptions`2.CopyFrom(GiGraph.Dot.Entities.Attributes.Properties.Common.ClusterNode.DotClusterNodeCommonStyleAttributeOptions{`0,`1})">
            <summary>
                Copies style options from the specified instance.
            </summary>
            <param name="source">
                The instance to copy the options from.
            </param>
        </member>
        <member name="T:GiGraph.Dot.Entities.Attributes.Properties.Common.DotEntityRootCommonAttributes`2">
            <summary>
                Common attributes of the root graph, clusters, nodes, and edges.
            </summary>
            <remarks>
                When adding new properties, override them in all descendant classes to set adequate XML documentation comments.
            </remarks>
        </member>
        <member name="P:GiGraph.Dot.Entities.Attributes.Properties.Common.Font.DotFontAttributes`2.Name">
            <summary>
                <para>
                    Gets or sets the font used for text (default: "Times-Roman"). This very much depends on the output format and, for
                    non-bitmap output such as PostScript or SVG, the availability of the font when the graph is displayed or printed. As
                    such, it is best to rely on font faces that are generally available, such as Times-Roman, Helvetica or Courier.
                </para>
                <para>
                    How font names are resolved also depends on the underlying library that handles font name resolution. If Graphviz was
                    built using the fontconfig library, the latter library will be used to search for the font. See the commands fc-list,
                    fc-match and the other fontconfig commands for how names are resolved and which fonts are available. Other systems may
                    provide their own font package, such as Quartz for OS X.
                </para>
                <para>
                    Note that various font attributes, such as weight and slant, can be built into the font name. Unfortunately, the syntax
                    varies depending on which font system is dominant. Thus, using <see cref="P:GiGraph.Dot.Entities.Attributes.Properties.Common.Font.IDotFontAttributes.Name" /> = "times bold italic" will produce a
                    bold, slanted Times font using Pango, the usual main font library. Alternatively, <see cref="P:GiGraph.Dot.Entities.Attributes.Properties.Common.Font.IDotFontAttributes.Name" /> = "times:italic"
                    will produce a slanted Times font from fontconfig, while <see cref="P:GiGraph.Dot.Entities.Attributes.Properties.Common.Font.IDotFontAttributes.Name" /> = "times-bold" will resolve to a bold Times
                    using Quartz. You will need to ascertain which package is used by your Graphviz system and refer to the relevant
                    documentation.
                </para>
                <para>
                    If Graphviz is not built with a high-level font library, <see cref="P:GiGraph.Dot.Entities.Attributes.Properties.Common.Font.IDotFontAttributes.Name" /> will be considered the name of a Type 1 or
                    True Type font file. If you specify <see cref="P:GiGraph.Dot.Entities.Attributes.Properties.Common.Font.IDotFontAttributes.Name" /> = "schlbk", the tool will look for a file named schlbk.ttf or
                    schlbk.pfa or schlbk.pfb in one of the directories specified by the <see cref="P:GiGraph.Dot.Entities.Graphs.Attributes.DotGraphFontAttributes.Directories" />
                    attribute of graph <see cref="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphRootAttributes.Font" />. The lookup does support various aliases for the common
                    fonts.
                </para>
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Attributes.Properties.Common.Font.DotFontAttributes`2.Size">
            <summary>
                Gets or sets the font size used for text (in points; 72 points per inch). Default: 14.0, minimum: 1.0.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Attributes.Properties.Common.Font.DotFontAttributes`2.Color">
            <summary>
                Gets or sets the color used for text (default: <see cref="P:System.Drawing.Color.Black" />).
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.Properties.Common.Font.DotFontAttributes`2.Set(System.String,System.Nullable{System.Double},GiGraph.Dot.Types.Colors.DotColor)">
            <summary>
                Sets font attributes.
            </summary>
            <param name="name">
                Font name.
            </param>
            <param name="size">
                Font size.
            </param>
            <param name="color">
                Font color.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.Properties.Common.Font.DotFontAttributes`2.Set(GiGraph.Dot.Types.Fonts.DotFont)">
            <summary>
                Sets font attributes.
            </summary>
            <param name="attributes">
                The attributes to set.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.Properties.Common.Font.DotFontAttributes`2.Set(GiGraph.Dot.Entities.Attributes.Properties.Common.Font.IDotFontAttributes)">
            <summary>
                Copies font attributes from the specified instance.
            </summary>
            <param name="attributes">
                The instance to copy the attributes from.
            </param>
        </member>
        <member name="P:GiGraph.Dot.Entities.Attributes.Properties.Common.Font.IDotFontAttributes.Name">
            <summary>
                <para>
                    Gets or sets the font used for text (default: "Times-Roman"). This very much depends on the output format and, for
                    non-bitmap output such as PostScript or SVG, the availability of the font when the graph is displayed or printed. As
                    such, it is best to rely on font faces that are generally available, such as Times-Roman, Helvetica or Courier.
                </para>
                <para>
                    How font names are resolved also depends on the underlying library that handles font name resolution. If Graphviz was
                    built using the fontconfig library, the latter library will be used to search for the font. See the commands fc-list,
                    fc-match and the other fontconfig commands for how names are resolved and which fonts are available. Other systems may
                    provide their own font package, such as Quartz for OS X.
                </para>
                <para>
                    Note that various font attributes, such as weight and slant, can be built into the font name. Unfortunately, the syntax
                    varies depending on which font system is dominant. Thus, using <see cref="P:GiGraph.Dot.Entities.Attributes.Properties.Common.Font.IDotFontAttributes.Name" /> = "times bold italic" will produce a
                    bold, slanted Times font using Pango, the usual main font library. Alternatively, <see cref="P:GiGraph.Dot.Entities.Attributes.Properties.Common.Font.IDotFontAttributes.Name" /> = "times:italic"
                    will produce a slanted Times font from fontconfig, while <see cref="P:GiGraph.Dot.Entities.Attributes.Properties.Common.Font.IDotFontAttributes.Name" /> = "times-bold" will resolve to a bold Times
                    using Quartz. You will need to ascertain which package is used by your Graphviz system and refer to the relevant
                    documentation.
                </para>
                <para>
                    If Graphviz is not built with a high-level font library, <see cref="P:GiGraph.Dot.Entities.Attributes.Properties.Common.Font.IDotFontAttributes.Name" /> will be considered the name of a Type 1 or
                    True Type font file. If you specify <see cref="P:GiGraph.Dot.Entities.Attributes.Properties.Common.Font.IDotFontAttributes.Name" /> = "schlbk", the tool will look for a file named schlbk.ttf or
                    schlbk.pfa or schlbk.pfb in one of the directories specified by the <see cref="P:GiGraph.Dot.Entities.Graphs.Attributes.DotGraphFontAttributes.Directories" />
                    attribute of graph <see cref="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphRootAttributes.Font" />. The lookup does support various aliases for the common
                    fonts.
                </para>
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Attributes.Properties.Common.Font.IDotFontAttributes.Size">
            <summary>
                Gets or sets the font size used for text (in points; 72 points per inch). Default: 14.0, minimum: 1.0.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Attributes.Properties.Common.Font.IDotFontAttributes.Color">
            <summary>
                Gets or sets the color used for text (default: <see cref="P:System.Drawing.Color.Black" />).
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Attributes.Properties.Common.GraphCluster.IDotGraphClusterCommonAttributes.Color">
            <summary>
                <para>
                    Gets or sets the color to use for the cluster (default: <see cref="P:System.Drawing.Color.Black" />).
                </para>
                <para>
                    If <see cref="T:GiGraph.Dot.Types.Colors.DotGradientColor" /> is specified, with no weighted colors in its parameters (<see cref="T:GiGraph.Dot.Types.Colors.DotColor" /> items
                    only), and the <see cref="F:GiGraph.Dot.Types.Clusters.DotClusterFillStyle.Normal" /> fill style is used, a linear gradient fill is done.
                </para>
                <para>
                    If <see cref="T:GiGraph.Dot.Types.Colors.DotGradientColor" /> is used with weighted colors (see <see cref="T:GiGraph.Dot.Types.Colors.DotWeightedColor" />), a degenerate
                    linear gradient fill is done. This essentially does a fill using two colors, with the
                    <see cref="P:GiGraph.Dot.Types.Colors.DotWeightedColor.Weight" /> specifying how much of region is filled with each color.
                </para>
                <para>
                    If the fill style used is <see cref="F:GiGraph.Dot.Types.Clusters.DotClusterFillStyle.Radial" />, then a radial gradient fill is done. See also the
                    <see cref="P:GiGraph.Dot.Entities.Graphs.Attributes.DotGraphCanvasAttributes.GradientFillAngle" /> attribute of graph
                    <see cref="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphRootAttributes.Canvas" /> for setting a gradient angle globally, or its
                    <see cref="P:GiGraph.Dot.Entities.Clusters.Attributes.IDotClusterAttributes.GradientFillAngle" /> counterpart on individual clusters.
                </para>
                <para>
                    The fill style can also be set to do fills using more than 2 colors (set fill style to
                    <see cref="F:GiGraph.Dot.Types.Clusters.DotClusterFillStyle.Striped" />, and use <see cref="T:GiGraph.Dot.Types.Colors.DotMultiColor" /> as a color list definition).
                </para>
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Attributes.Properties.Common.GraphCluster.IDotGraphClusterCommonAttributes.FillColor">
            <summary>
                <para>
                    Gets or sets the color used to fill the background of the cluster, assuming that the
                    <see cref="F:GiGraph.Dot.Types.Clusters.DotClusterFillStyle.Normal" /> fill style is specified (default: <see cref="P:System.Drawing.Color.Black" />).
                    If <see cref="P:GiGraph.Dot.Entities.Attributes.Properties.Common.GraphCluster.IDotGraphClusterCommonAttributes.FillColor" /> is not defined, <see cref="P:GiGraph.Dot.Entities.Attributes.Properties.Common.GraphCluster.IDotGraphClusterCommonAttributes.Color" /> is used. If <see cref="P:GiGraph.Dot.Entities.Attributes.Properties.Common.GraphCluster.IDotGraphClusterCommonAttributes.Color" /> is not defined,
                    <see cref="P:GiGraph.Dot.Entities.Clusters.Attributes.IDotClusterAttributes.BackgroundColor" /> is used. If it is not defined too, the default is used, except when
                    the output format is MIF, which use black by default.
                </para>
                <para>
                    When <see cref="T:GiGraph.Dot.Types.Colors.DotGradientColor" /> is used, a gradient fill is generated. By default, this is a linear fill; setting
                    fill style to <see cref="F:GiGraph.Dot.Types.Clusters.DotClusterFillStyle.Radial" /> will cause a radial fill. If the second color is
                    <see cref="F:System.Drawing.Color.Empty" />, the default color is used for it. See also the
                    <see cref="P:GiGraph.Dot.Entities.Graphs.Attributes.DotGraphCanvasAttributes.GradientFillAngle" /> attribute on graph
                    <see cref="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphRootAttributes.Canvas" /> for setting a gradient angle globally, or its
                    <see cref="P:GiGraph.Dot.Entities.Clusters.Attributes.IDotClusterAttributes.GradientFillAngle" /> counterpart on individual clusters.
                </para>
                <para>
                    Note that a cluster inherits the root graph's attributes if defined. Thus, if the root graph has defined a
                    <see cref="P:GiGraph.Dot.Entities.Attributes.Properties.Common.GraphCluster.IDotGraphClusterCommonAttributes.FillColor" />, this will override a <see cref="P:GiGraph.Dot.Entities.Attributes.Properties.Common.GraphCluster.IDotGraphClusterCommonAttributes.Color" /> or
                    <see cref="P:GiGraph.Dot.Entities.Clusters.Attributes.IDotClusterAttributes.BackgroundColor" /> set for the cluster.
                </para>
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Attributes.Properties.Common.GraphCluster.IDotGraphClusterCommonAttributes.BorderWidth">
            <summary>
                Specifies the width of the pen, in points, used to draw the bounding box around clusters. The value is inherited by
                subclusters. It has no effect on text. Default: 1.0, minimum: 0.0.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Attributes.Properties.Common.GraphCluster.IDotGraphClusterCommonAttributes.BorderColor">
            <summary>
                A color used to draw the bounding box around the cluster (default: <see cref="P:System.Drawing.Color.Black" />). If
                <see cref="P:GiGraph.Dot.Entities.Attributes.Properties.Common.GraphCluster.IDotGraphClusterCommonAttributes.BorderColor" /> is not defined, <see cref="P:GiGraph.Dot.Entities.Attributes.Properties.Common.GraphCluster.IDotGraphClusterCommonAttributes.Color" /> is used. If this is not defined, the default is used. Note
                that a cluster inherits the root graph's attributes if defined. Thus, if <see cref="P:GiGraph.Dot.Entities.Attributes.Properties.Common.GraphCluster.IDotGraphClusterCommonAttributes.BorderColor" /> is defined globally for
                clusters, it will override a <see cref="P:GiGraph.Dot.Entities.Attributes.Properties.Common.GraphCluster.IDotGraphClusterCommonAttributes.Color" /> or <see cref="P:GiGraph.Dot.Entities.Clusters.Attributes.IDotClusterAttributes.BackgroundColor" /> attribute set for
                individual clusters.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Attributes.Properties.Common.Hyperlink.DotHyperlinkAttributes`2.Url">
            <summary>
                <para>
                    Hyperlinks incorporated into device-dependent output (svg, postscript, map only). At present, used in PS2, CMAP, I*MAP
                    and SVG formats. For all these formats, URLs can be attached to nodes, edges and clusters. URL attributes can also be
                    attached to the root graph in PS2, CMAP and I*MAP formats. This serves as the base URL for relative URLs in the former,
                    and as the default image map file in the latter.
                </para>
                <para>
                    The active area for a cluster is its bounding box.
                </para>
                <para>
                    For SVG, CMAPX and IMAP output, the active area for a node is its visible image. For example, an unfilled node with no
                    drawn boundary will only be active on its label. For other output, the active area is its bounding box.
                </para>
                <para>
                    For edges, the active areas are small circles where the edge contacts its head and tail nodes. In addition, for SVG,
                    CMAPX and IMAP, the active area includes a thin polygon approximating the edge. The circles may overlap the related node,
                    and the edge URL dominates. If the edge has a label, this will also be active. Finally, if the edge has a head or tail
                    label, this will also be active.
                </para>
                <para>
                    Note that, for edges, the <see cref="P:GiGraph.Dot.Entities.Edges.Endpoints.Attributes.DotEdgeHeadHyperlinkAttributes.Url" /> attribute of the head and the tail, the
                    <see cref="P:GiGraph.Dot.Entities.Edges.Attributes.DotEdgeLabelHyperlinkAttributes.Url" /> attribute of <see cref="P:GiGraph.Dot.Entities.Edges.Attributes.IDotEdgeRootAttributes.LabelHyperlink" />, and
                    the <see cref="P:GiGraph.Dot.Entities.Edges.Attributes.DotEdgeHyperlinkAttributes.Url" /> attribute of <see cref="P:GiGraph.Dot.Entities.Edges.Attributes.IDotEdgeRootAttributes.EdgeHyperlink" />, allow
                    control of various parts of an edge. Also note that, if active areas of two edges overlap, it is unspecified which area
                    dominates.
                </para>
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Attributes.Properties.Common.Hyperlink.DotHyperlinkAttributes`2.Href">
            <summary>
                Synonym for <see cref="P:GiGraph.Dot.Entities.Attributes.Properties.Common.Hyperlink.IDotHyperlinkAttributes.Url" /> (svg, postscript, map only).
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Attributes.Properties.Common.Hyperlink.DotHyperlinkAttributes`2.Target">
            <summary>
                If <see cref="P:GiGraph.Dot.Entities.Attributes.Properties.Common.Hyperlink.IDotHyperlinkAttributes.Url" /> is specified, this attribute determines which window of the browser is used for the URL (svg, map
                only). See
                <see href="http://www.w3.org/TR/html401/present/frames.html#adef-target">
                    W3C documentation
                </see>
                .
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.Properties.Common.Hyperlink.DotHyperlinkAttributes`2.Set(GiGraph.Dot.Types.EscapeString.DotEscapeString,GiGraph.Dot.Types.EscapeString.DotEscapeString)">
            <summary>
                Specifies hyperlink attributes.
            </summary>
            <param name="url">
                The URL of the hyperlink.
            </param>
            <param name="target">
                The target of the hyperlink. See <see cref="T:GiGraph.Dot.Types.Hyperlinks.DotHyperlinkTargets" /> for accepted values.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.Properties.Common.Hyperlink.DotHyperlinkAttributes`2.Set(GiGraph.Dot.Types.Hyperlinks.DotHyperlink)">
            <summary>
                Specifies hyperlink attributes.
            </summary>
            <param name="attributes">
                The attributes to set.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.Properties.Common.Hyperlink.DotHyperlinkAttributes`2.Set(GiGraph.Dot.Entities.Attributes.Properties.Common.Hyperlink.IDotHyperlinkAttributes)">
            <summary>
                Copies hyperlink attributes from the specified instance.
            </summary>
            <param name="attributes">
                The instance to copy the attributes from.
            </param>
        </member>
        <member name="P:GiGraph.Dot.Entities.Attributes.Properties.Common.Hyperlink.IDotHyperlinkAttributes.Url">
            <summary>
                <para>
                    Hyperlinks incorporated into device-dependent output (svg, postscript, map only). At present, used in PS2, CMAP, I*MAP
                    and SVG formats. For all these formats, URLs can be attached to nodes, edges and clusters. URL attributes can also be
                    attached to the root graph in PS2, CMAP and I*MAP formats. This serves as the base URL for relative URLs in the former,
                    and as the default image map file in the latter.
                </para>
                <para>
                    The active area for a cluster is its bounding box.
                </para>
                <para>
                    For SVG, CMAPX and IMAP output, the active area for a node is its visible image. For example, an unfilled node with no
                    drawn boundary will only be active on its label. For other output, the active area is its bounding box.
                </para>
                <para>
                    For edges, the active areas are small circles where the edge contacts its head and tail nodes. In addition, for SVG,
                    CMAPX and IMAP, the active area includes a thin polygon approximating the edge. The circles may overlap the related node,
                    and the edge URL dominates. If the edge has a label, this will also be active. Finally, if the edge has a head or tail
                    label, this will also be active.
                </para>
                <para>
                    Note that, for edges, the <see cref="P:GiGraph.Dot.Entities.Edges.Endpoints.Attributes.DotEdgeHeadHyperlinkAttributes.Url" /> attribute of the head and the tail, the
                    <see cref="P:GiGraph.Dot.Entities.Edges.Attributes.DotEdgeLabelHyperlinkAttributes.Url" /> attribute of <see cref="P:GiGraph.Dot.Entities.Edges.Attributes.IDotEdgeRootAttributes.LabelHyperlink" />, and
                    the <see cref="P:GiGraph.Dot.Entities.Edges.Attributes.DotEdgeHyperlinkAttributes.Url" /> attribute of <see cref="P:GiGraph.Dot.Entities.Edges.Attributes.IDotEdgeRootAttributes.EdgeHyperlink" />, allow
                    control of various parts of an edge. Also note that, if active areas of two edges overlap, it is unspecified which area
                    dominates.
                </para>
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Attributes.Properties.Common.Hyperlink.IDotHyperlinkAttributes.Href">
            <summary>
                Synonym for <see cref="P:GiGraph.Dot.Entities.Attributes.Properties.Common.Hyperlink.IDotHyperlinkAttributes.Url" /> (svg, postscript, map only).
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Attributes.Properties.Common.Hyperlink.IDotHyperlinkAttributes.Target">
            <summary>
                If <see cref="P:GiGraph.Dot.Entities.Attributes.Properties.Common.Hyperlink.IDotHyperlinkAttributes.Url" /> is specified, this attribute determines which window of the browser is used for the URL (svg, map
                only). See
                <see href="http://www.w3.org/TR/html401/present/frames.html#adef-target">
                    W3C documentation
                </see>
                .
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Attributes.Properties.Common.LabelAlignment.DotLabelAlignmentAttributes.Horizontal">
            <summary>
                Justification for the label. Note that clusters inherit attributes from their parent. Thus, if the root graph sets this
                attribute to <see cref="F:GiGraph.Dot.Types.Alignment.DotHorizontalAlignment.Left" />, clusters inherit this value. Default:
                <see cref="F:GiGraph.Dot.Types.Alignment.DotHorizontalAlignment.Center" />.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Attributes.Properties.Common.LabelAlignment.DotLabelAlignmentAttributes.Vertical">
            <summary>
                Vertical placement of the label (default: <see cref="F:GiGraph.Dot.Types.Alignment.DotVerticalAlignment.Top" />; only
                <see cref="F:GiGraph.Dot.Types.Alignment.DotVerticalAlignment.Top" /> and <see cref="F:GiGraph.Dot.Types.Alignment.DotVerticalAlignment.Bottom" /> are allowed). Note that clusters
                inherit attributes from their parent. Thus, if the root graph sets this attribute to
                <see cref="F:GiGraph.Dot.Types.Alignment.DotVerticalAlignment.Bottom" />, clusters inherits this value.
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.Properties.Common.LabelAlignment.DotLabelAlignmentAttributes.Set(System.Nullable{GiGraph.Dot.Types.Alignment.DotHorizontalAlignment},System.Nullable{GiGraph.Dot.Types.Alignment.DotVerticalAlignment})">
            <summary>
                Sets label alignment options.
            </summary>
            <param name="horizontal">
                The horizontal label alignment to set.
            </param>
            <param name="vertical">
                The vertical label alignment to set.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.Properties.Common.LabelAlignment.DotLabelAlignmentAttributes.Set(GiGraph.Dot.Types.Alignment.DotAlignment)">
            <summary>
                Sets label alignment.
            </summary>
            <param name="alignment">
                The alignment to set.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.Properties.Common.LabelAlignment.DotLabelAlignmentAttributes.Set(GiGraph.Dot.Types.Alignment.DotAlignmentProperties)">
            <summary>
                Sets label alignment.
            </summary>
            <param name="alignment">
                The alignment to set.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.Properties.Common.LabelAlignment.DotLabelAlignmentAttributes.Set(GiGraph.Dot.Entities.Attributes.Properties.Common.LabelAlignment.IDotLabelAlignmentAttributes)">
            <summary>
                Copies label alignment attributes from the specified instance.
            </summary>
            <param name="attributes">
                The instance to copy the attributes from.
            </param>
        </member>
        <member name="P:GiGraph.Dot.Entities.Attributes.Properties.Common.LabelAlignment.IDotLabelAlignmentAttributes.Horizontal">
            <summary>
                Justification for the label. Note that clusters inherit attributes from their parent. Thus, if the root graph sets this
                attribute to <see cref="F:GiGraph.Dot.Types.Alignment.DotHorizontalAlignment.Left" />, clusters inherit this value. Default:
                <see cref="F:GiGraph.Dot.Types.Alignment.DotHorizontalAlignment.Center" />.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Attributes.Properties.Common.LabelAlignment.IDotLabelAlignmentAttributes.Vertical">
            <summary>
                Vertical placement of the label (default: <see cref="F:GiGraph.Dot.Types.Alignment.DotVerticalAlignment.Top" />; only
                <see cref="F:GiGraph.Dot.Types.Alignment.DotVerticalAlignment.Top" /> and <see cref="F:GiGraph.Dot.Types.Alignment.DotVerticalAlignment.Bottom" /> are allowed). Note that clusters
                inherit attributes from their parent. Thus, if the root graph sets this attribute to
                <see cref="F:GiGraph.Dot.Types.Alignment.DotVerticalAlignment.Bottom" />, clusters inherits this value.
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.Properties.Common.Style.DotStyleAttributeOptions.IsSet">
            <summary>
                Determines if any style is assigned to the element.
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.Properties.Common.Style.DotStyleAttributeOptions.IsDefault">
            <summary>
                Determines if the default style is assigned to the element.
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.Properties.Common.Style.DotStyleAttributeOptions.Clear">
            <summary>
                Removes style from the element.
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.Properties.Common.Style.DotStyleAttributeOptions.SetDefault">
            <summary>
                Assigns the default style to the element. Useful when the style of elements of the current type is set globally, and needs to
                be restored to the default value for the current element.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Attributes.Properties.Common.SvgStyleSheet.DotSvgStyleSheetAttributes`2.Class">
            <summary>
                Classnames to attach to the element in SVG output. Specify a style sheet <see cref="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphSvgStyleSheetAttributes.Url" />
                on the graph for styling SVG output using CSS classnames. Multiple space-separated classes are supported.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Attributes.Properties.Common.SvgStyleSheet.IDotSvgStyleSheetAttributes.Class">
            <summary>
                Classnames to attach to the element in SVG output. Specify a style sheet <see cref="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphSvgStyleSheetAttributes.Url" />
                on the graph for styling SVG output using CSS classnames. Multiple space-separated classes are supported.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Attributes.Properties.DotEntityAttributes`2.Attributes">
            <summary>
                Provides access to individual attributes in the current context.
            </summary>
        </member>
        <member name="T:GiGraph.Dot.Entities.Attributes.Properties.DotEntityAttributesWithMetadata`2">
            <summary>
                This class only indicates that the descendants provide access to attributes that have metadata available. This is true for
                DOT attributes, but not for HTML element attributes.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Attributes.Properties.IDotEntityAttributes.Accessor">
            <summary>
                Gets an accessor that provides access to attributes through property expressions.
            </summary>
        </member>
        <member name="T:GiGraph.Dot.Entities.Attributes.Properties.KeyLookup.DotMemberAttributeKeyLookup">
            <summary>
                Provides access to attribute keys assigned to class members.
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.Properties.KeyLookup.DotMemberAttributeKeyLookup.#ctor(System.Boolean)">
            <summary>
                Creates a new lookup instance.
            </summary>
            <param name="useCommonBaseAsLookupKey">
                True to use the base definitions of property accessors as their keys in the lookup. This reduces the number of items to map
                when certain properties are overridden in descendant classes. In such case only their common ancestor property is mapped with
                the same attribute key used for all its descendants. Pass false to use the accessor as is (to map every property accessor
                separately to any attribute key).
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.Properties.KeyLookup.DotMemberAttributeKeyLookup.#ctor(GiGraph.Dot.Entities.Attributes.Properties.KeyLookup.DotMemberAttributeKeyLookup)">
            <summary>
                Creates a new lookup initialized with content copied from another instance.
            </summary>
            <param name="source">
                The source lookup to copy the content from.
            </param>
        </member>
        <member name="P:GiGraph.Dot.Entities.Attributes.Properties.KeyLookup.DotMemberAttributeKeyLookup.Count">
            <summary>
                Returns the total number of mapped member keys.
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.Properties.KeyLookup.DotMemberAttributeKeyLookup.SetPropertyKey(System.Reflection.PropertyInfo,System.String)">
            <summary>
                Adds or replaces a key for the specified property.
            </summary>
            <param name="property">
                The property whose attribute key to set.
            </param>
            <param name="key">
                The attribute key to assign to the specified property.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.Properties.KeyLookup.DotMemberAttributeKeyLookup.SetPropertyAccessorKey(System.Reflection.MethodInfo,System.String)">
            <summary>
                Adds or replaces a key for the specified property accessor.
            </summary>
            <param name="accessor">
                The property accessor whose attribute key to set.
            </param>
            <param name="key">
                The attribute key to assign to the specified property accessor.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.Properties.KeyLookup.DotMemberAttributeKeyLookup.TryGetPropertyKey(System.Reflection.PropertyInfo,System.String@)">
            <summary>
                Tries to get an attribute key for the specified property.
            </summary>
            <param name="property">
                The property whose attribute key to get.
            </param>
            <param name="key">
                The output attribute key if found.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.Properties.KeyLookup.DotMemberAttributeKeyLookup.TryGetPropertyAccessorKey(System.Reflection.MethodInfo,System.String@)">
            <summary>
                Tries to get an attribute key for the specified property accessor.
            </summary>
            <param name="accessor">
                The property accessor whose attribute key to get.
            </param>
            <param name="key">
                The output attribute key if found.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.Properties.KeyLookup.DotMemberAttributeKeyLookup.GetPropertyKey(System.Reflection.PropertyInfo)">
            <summary>
                Gets an attribute key for the specified property.
            </summary>
            <param name="property">
                The property whose attribute key to get.
            </param>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
                Thrown when the collection does not contain a key for the specified property.
            </exception>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.Properties.KeyLookup.DotMemberAttributeKeyLookup.GetPropertyAccessorKey(System.Reflection.MethodInfo)">
            <summary>
                Gets an attribute key for the specified property accessor.
            </summary>
            <param name="accessor">
                The property accessor whose attribute key to get.
            </param>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
                Thrown when the collection does not contain a key for the specified property accessor.
            </exception>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.Properties.KeyLookup.DotMemberAttributeKeyLookup.MergeFrom(GiGraph.Dot.Entities.Attributes.Properties.KeyLookup.DotMemberAttributeKeyLookup)">
            <summary>
                Adds and updates (overwrites) the content of the current instance with the content of the specified instance.
            </summary>
            <param name="source">
                The source lookup whose content to copy.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.Properties.KeyLookup.DotMemberAttributeKeyLookup.ToReadOnly">
            <summary>
                Returns a copy of the current instance as a read only lookup.
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.Properties.KeyLookup.DotMemberAttributeKeyLookup.Merge(GiGraph.Dot.Entities.Attributes.Properties.KeyLookup.DotMemberAttributeKeyLookup,GiGraph.Dot.Entities.Attributes.Properties.KeyLookup.DotMemberAttributeKeyLookup)">
            <summary>
                Merges two lookup instances.
            </summary>
            <param name="base">
                The initial instance to use as a base lookup.
            </param>
            <param name="source">
                The source lookup whose content to copy to the base instance. Overwrites all matching items of the base instance.
            </param>
        </member>
        <member name="T:GiGraph.Dot.Entities.Attributes.Properties.KeyLookup.DotMemberAttributeKeyLookupBuilder`2">
            <summary>
                Builds a lookup for properties and property accessors.
            </summary>
            <typeparam name="TEntityAttributes">
                The entity attributes type.
            </typeparam>
            <typeparam name="TIEntityAttributeProperties">
                The interface that exposes entity-specific attributes of the <typeparamref name="TEntityAttributes" /> type.
            </typeparam>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.Properties.KeyLookup.DotMemberAttributeKeyLookupBuilder`2.BuildLazy(System.Boolean)">
            <summary>
                Builds lazily a lookup for properties and property accessors.
            </summary>
            <param name="readOnly">
                Determines whether the built lookup should be read only.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.Properties.KeyLookup.DotMemberAttributeKeyLookupBuilder`2.Build(System.Boolean)">
            <summary>
                Builds a lookup for properties and property accessors.
            </summary>
            <param name="readOnly">
                Determines whether the built lookup should be read only.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Clusters.Attributes.DotClusterStyleAttributeOptions.Set(GiGraph.Dot.Types.Clusters.DotClusterFillStyle,GiGraph.Dot.Types.Styling.DotBorderStyle,GiGraph.Dot.Types.Styling.DotBorderWeight,GiGraph.Dot.Types.Styling.DotCornerStyle,System.Boolean)">
            <summary>
                Applies the specified style options.
            </summary>
            <param name="fillStyle">
                The fill style to set.
            </param>
            <param name="borderStyle">
                The border style to set.
            </param>
            <param name="borderWeight">
                The border weight to set.
            </param>
            <param name="cornerStyle">
                The corner style to set.
            </param>
            <param name="invisible">
                Determines whether the node should be invisible.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Clusters.Attributes.DotClusterStyleAttributeOptions.CopyFrom(GiGraph.Dot.Entities.Clusters.Attributes.DotClusterStyleAttributeOptions)">
            <summary>
                Copies style options from the specified instance.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Clusters.Attributes.IDotClusterAttributes.Style">
            <summary>
                <para>
                    Gets or sets the style of the cluster (default: unset). See the descriptions of individual <see cref="T:GiGraph.Dot.Types.Styling.DotStyles" />
                    values to learn which styles are applicable to this type of element.
                </para>
                <para>
                    Multiple styles can be used at once, for example: <see cref="P:GiGraph.Dot.Entities.Clusters.Attributes.IDotClusterAttributes.Style" /> = <see cref="F:GiGraph.Dot.Types.Styling.DotStyles.Rounded" /> |
                    <see cref="F:GiGraph.Dot.Types.Styling.DotStyles.Bold" />;
                </para>
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Clusters.Attributes.IDotClusterAttributes.Label">
            <summary>
                <para>
                    Gets or sets the label to display on the cluster. It may be plain text (<see cref="T:System.String" />) or HTML (
                    <see cref="T:GiGraph.Dot.Types.Html.DotHtmlString" />). See also <see cref="T:GiGraph.Dot.Types.EscapeString.DotFormattedTextBuilder" /> for text justification and simple
                    formatting and <see cref="T:GiGraph.Dot.Entities.Html.Builder.DotHtmlBuilder" /> for custom text styling and defining tables. The latter one gives the most
                    possibilities (specifying font, size, color, style, images, etc.).
                </para>
                <para>
                    Examples:
                    <list type="bullet">
                        <item>
                            <description>
                                <see cref="P:GiGraph.Dot.Entities.Clusters.Attributes.IDotClusterAttributes.Label" /> = "My label";
                            </description>
                        </item>
                        <item>
                            <description>
                                <see cref="P:GiGraph.Dot.Entities.Clusters.Attributes.IDotClusterAttributes.Label" /> = new <see cref="T:GiGraph.Dot.Entities.Html.Font.Styles.DotHtmlBold" />("My label");
                            </description>
                        </item>
                        <item>
                            <description>
                                <see cref="P:GiGraph.Dot.Entities.Clusters.Attributes.IDotClusterAttributes.Label" /> = (<see cref="T:GiGraph.Dot.Types.Html.DotHtmlString" />) "&lt;b&gt;My label&lt;/b&gt;";
                            </description>
                        </item>
                    </list>
                </para>
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Clusters.Attributes.IDotClusterAttributes.Tooltip">
            <summary>
                Tooltip annotation attached to the cluster (svg, cmap only). If unset, Graphviz will use the <see cref="P:GiGraph.Dot.Entities.Clusters.Attributes.IDotClusterAttributes.Label" /> attribute
                if defined.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Clusters.Attributes.IDotClusterAttributes.BackgroundColor">
            <summary>
                <para>
                    Gets or sets the background color of the cluster (default: none). Used as the initial background for the cluster. If the
                    <see cref="F:GiGraph.Dot.Types.Clusters.DotClusterFillStyle.Normal" /> fill style is used for the cluster, its
                    <see cref="P:GiGraph.Dot.Entities.Attributes.Properties.Common.GraphCluster.IDotGraphClusterCommonAttributes.FillColor" /> will overlay the background color.
                </para>
                <para>
                    When <see cref="T:GiGraph.Dot.Types.Colors.DotGradientColor" /> is used, a gradient fill is generated. By default, this is a linear fill; applying
                    the <see cref="F:GiGraph.Dot.Types.Clusters.DotClusterFillStyle.Radial" /> fill style to the cluster will cause a radial fill. If the second color is
                    <see cref="F:System.Drawing.Color.Empty" />, the default color is used for it. See also the
                    <see cref="P:GiGraph.Dot.Entities.Clusters.Attributes.IDotClusterAttributes.GradientFillAngle" /> attribute for setting a gradient angle.
                </para>
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Clusters.Attributes.IDotClusterAttributes.ColorScheme">
            <summary>
                Specifies a color scheme namespace to use. If defined, specifies the context for interpreting color names. If no color scheme
                is set, the standard <see cref="F:GiGraph.Dot.Types.Colors.DotColorSchemes.X11" /> naming is used. For example, if
                <see cref="P:GiGraph.Dot.Types.Colors.DotColorSchemes.DotBrewerColorSchemes.BuGn9" /> Brewer color scheme is used, then a color named "7", e.g.
                Color.FromName("7"), will be evaluated in the context of that specific color scheme. See <see cref="T:GiGraph.Dot.Types.Colors.DotColorSchemes" /> for
                supported scheme names.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Clusters.Attributes.IDotClusterAttributes.GradientFillAngle">
            <summary>
                If a gradient fill is being used, this determines the angle of the fill. For linear fills, the colors transform along a line
                specified by the angle and the center of the object. For radial fills, a value of zero causes the colors to transform
                radially from the center; for non-zero values, the colors transform from a point near the object's periphery as specified by
                the value. If unset, the default angle is 0.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Clusters.Attributes.IDotClusterAttributes.Peripheries">
            <summary>
                Sets the number of peripheries used in cluster boundaries (default: 1, minimum: 0, maximum: 1). Setting peripheries to 0 will
                remove the boundaries.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Clusters.Attributes.IDotClusterAttributes.Padding">
            <summary>
                Specifies the space between the nodes in the cluster and bounding box of the cluster. By default, this is 8 points.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Clusters.Attributes.IDotClusterAttributes.SortIndex">
            <summary>
                Gets or sets the sorting index of the cluster (default: 0). If <see cref="P:GiGraph.Dot.Entities.Graphs.Attributes.DotGraphLayoutAttributes.PackingMode" /> indicates
                an array packing, this attribute specifies an insertion order among the components, with smaller values inserted first.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Clusters.Attributes.IDotClusterAttributes.ObjectId">
            <summary>
                <para>
                    Allows the graph author to provide an identifier for graph objects which is to be included in the output (svg,
                    postscript, map only).
                </para>
                <para>
                    Normal <see cref="F:GiGraph.Dot.Types.EscapeString.DotEscapeString.NodeId" />, <see cref="F:GiGraph.Dot.Types.EscapeString.DotEscapeString.EdgeDefinition" />,
                    <see cref="F:GiGraph.Dot.Types.EscapeString.DotEscapeString.GraphId" /> substitutions can be applied (see <see cref="T:GiGraph.Dot.Types.EscapeString.DotFormattedTextBuilder" />). Note,
                    however, that <see cref="F:GiGraph.Dot.Types.EscapeString.DotEscapeString.EdgeDefinition" /> does not provide a unique ID for multi-edges.
                </para>
                <para>
                    If provided, it is the responsibility of the provider to keep ID values unique for its intended downstream use. If no ID
                    attribute is provided, then a unique internal ID is used. However, this value is unpredictable by the graph writer.
                </para>
                <para>
                    If the graph provides an ID attribute, this will be used as a prefix for internally generated attributes. By making
                    internally-used attributes distinct, the user can include multiple image maps in the same document.
                </para>
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Clusters.Attributes.IDotClusterAttributes.NodeRank">
            <summary>
                Gets or sets the rank constraints on the nodes in the cluster (dot only).
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Clusters.Attributes.IDotClusterRootAttributes.Font">
            <summary>
                Font attributes.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Clusters.Attributes.IDotClusterRootAttributes.Style">
            <summary>
                Style options.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Clusters.Attributes.IDotClusterRootAttributes.LabelAlignment">
            <summary>
                Horizontal and vertical label alignment options.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Clusters.Attributes.IDotClusterRootAttributes.SvgStyleSheet">
            <summary>
                Style sheet attributes used for SVG output.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Clusters.Attributes.IDotClusterRootAttributes.Hyperlink">
            <summary>
                Hyperlink attributes.
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Clusters.Collections.DotClusterCollection.Add(System.Action{GiGraph.Dot.Entities.Clusters.DotCluster})">
            <summary>
                <para>
                    Adds a new cluster subgraph to the collection.
                </para>
                <para>
                    Note that an identifier should be specified for the cluster. If no identifier or the same identifier is specified for
                    multiple clusters having the same parent, they are treated as one and the same cluster when visualized.
                </para>
            </summary>
            <param name="init">
                An optional cluster initializer delegate.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Clusters.Collections.DotClusterCollection.Add(System.String,System.Action{GiGraph.Dot.Entities.Clusters.DotCluster})">
            <summary>
                Adds a new cluster subgraph with the specified identifier to the collection.
            </summary>
            <param name="id">
                A unique identifier of the cluster. If no identifier or the same identifier is specified for multiple clusters having the
                same parent, they are treated as one and the same cluster when visualized.
            </param>
            <param name="init">
                An optional cluster initializer delegate.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Clusters.Collections.DotClusterCollection.AddWithNodes(System.String,System.String[])">
            <summary>
                Adds a new cluster subgraph with the specified identifier to the collection, and populates it with the specified nodes.
            </summary>
            <param name="id">
                A unique identifier of the cluster. If no identifier or the same identifier is specified for multiple clusters having the
                same parent, they are treated as one and the same cluster when visualized.
            </param>
            <param name="nodeIds">
                Optional node identifiers to populate the cluster with.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Clusters.Collections.DotClusterCollection.AddWithNodes(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Adds a new cluster subgraph with the specified identifier to the collection, and populates it with the specified nodes.
            </summary>
            <param name="id">
                The unique identifier of the cluster. If no identifier or the same identifier is specified for multiple clusters having the
                same parent, they are treated as one and the same cluster when visualized.
            </param>
            <param name="nodeIds">
                A node identifier collection to populate the cluster with.
            </param>
        </member>
        <member name="P:GiGraph.Dot.Entities.Clusters.Collections.DotGraphClusterCollection.Style">
            <summary>
                Style options. Note that the options are shared with those of the graph.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Clusters.Collections.DotGraphClusterCollection.AllowEdgeClipping">
            <summary>
                If true, allows edges between clusters (dot only, default: false). Specify a
                <see cref="P:GiGraph.Dot.Entities.Edges.Endpoints.Attributes.IDotEdgeEndpointAttributes.ClusterId" /> for an edge's head or tail to attach it to the border of the cluster with
                that identifier.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Clusters.Collections.DotGraphClusterCollection.VisualizationMode">
            <summary>
                Mode used for handling clusters (dot only; default: <see cref="F:GiGraph.Dot.Types.Clusters.DotClusterVisualizationMode.Bounded" />).
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Clusters.Collections.DotGraphClusterCollection.Color">
            <summary>
                <para>
                    Gets or sets the color to use for the cluster (default: <see cref="P:System.Drawing.Color.Black" />).
                </para>
                <para>
                    If <see cref="T:GiGraph.Dot.Types.Colors.DotGradientColor" /> is specified, with no weighted colors in its parameters (<see cref="T:GiGraph.Dot.Types.Colors.DotColor" /> items
                    only), and the <see cref="F:GiGraph.Dot.Types.Clusters.DotClusterFillStyle.Normal" /> fill style is used, a linear gradient fill is done.
                </para>
                <para>
                    If <see cref="T:GiGraph.Dot.Types.Colors.DotGradientColor" /> is used with weighted colors (see <see cref="T:GiGraph.Dot.Types.Colors.DotWeightedColor" />), a degenerate
                    linear gradient fill is done. This essentially does a fill using two colors, with the
                    <see cref="P:GiGraph.Dot.Types.Colors.DotWeightedColor.Weight" /> specifying how much of region is filled with each color.
                </para>
                <para>
                    If the fill style used is <see cref="F:GiGraph.Dot.Types.Clusters.DotClusterFillStyle.Radial" />, then a radial gradient fill is done. See also the
                    <see cref="P:GiGraph.Dot.Entities.Graphs.Attributes.DotGraphCanvasAttributes.GradientFillAngle" /> attribute of graph
                    <see cref="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphRootAttributes.Canvas" /> for setting a gradient angle globally, or its
                    <see cref="P:GiGraph.Dot.Entities.Clusters.Attributes.IDotClusterAttributes.GradientFillAngle" /> counterpart on individual clusters.
                </para>
                <para>
                    The fill style can also be set to do fills using more than 2 colors (set fill style to
                    <see cref="F:GiGraph.Dot.Types.Clusters.DotClusterFillStyle.Striped" />, and use <see cref="T:GiGraph.Dot.Types.Colors.DotMultiColor" /> as a color list definition).
                </para>
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Clusters.Collections.DotGraphClusterCollection.FillColor">
            <summary>
                <para>
                    Gets or sets the color used to fill the background of the cluster, assuming that the
                    <see cref="F:GiGraph.Dot.Types.Clusters.DotClusterFillStyle.Normal" /> fill style is specified (default: <see cref="P:System.Drawing.Color.Black" />).
                    If <see cref="P:GiGraph.Dot.Entities.Attributes.Properties.Common.GraphCluster.IDotGraphClusterCommonAttributes.FillColor" /> is not defined, <see cref="P:GiGraph.Dot.Entities.Attributes.Properties.Common.GraphCluster.IDotGraphClusterCommonAttributes.Color" /> is used. If <see cref="P:GiGraph.Dot.Entities.Attributes.Properties.Common.GraphCluster.IDotGraphClusterCommonAttributes.Color" /> is not defined,
                    <see cref="P:GiGraph.Dot.Entities.Clusters.Attributes.IDotClusterAttributes.BackgroundColor" /> is used. If it is not defined too, the default is used, except when
                    the output format is MIF, which use black by default.
                </para>
                <para>
                    When <see cref="T:GiGraph.Dot.Types.Colors.DotGradientColor" /> is used, a gradient fill is generated. By default, this is a linear fill; setting
                    fill style to <see cref="F:GiGraph.Dot.Types.Clusters.DotClusterFillStyle.Radial" /> will cause a radial fill. If the second color is
                    <see cref="F:System.Drawing.Color.Empty" />, the default color is used for it. See also the
                    <see cref="P:GiGraph.Dot.Entities.Graphs.Attributes.DotGraphCanvasAttributes.GradientFillAngle" /> attribute on graph
                    <see cref="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphRootAttributes.Canvas" /> for setting a gradient angle globally, or its
                    <see cref="P:GiGraph.Dot.Entities.Clusters.Attributes.IDotClusterAttributes.GradientFillAngle" /> counterpart on individual clusters.
                </para>
                <para>
                    Note that a cluster inherits the root graph's attributes if defined. Thus, if the root graph has defined a
                    <see cref="P:GiGraph.Dot.Entities.Attributes.Properties.Common.GraphCluster.IDotGraphClusterCommonAttributes.FillColor" />, this will override a <see cref="P:GiGraph.Dot.Entities.Attributes.Properties.Common.GraphCluster.IDotGraphClusterCommonAttributes.Color" /> or
                    <see cref="P:GiGraph.Dot.Entities.Clusters.Attributes.IDotClusterAttributes.BackgroundColor" /> set for the cluster.
                </para>
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Clusters.Collections.DotGraphClusterCollection.BorderWidth">
            <summary>
                Specifies the width of the pen, in points, used to draw the bounding box around clusters. The value is inherited by
                subclusters. It has no effect on text. Default: 1.0, minimum: 0.0.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Clusters.Collections.DotGraphClusterCollection.BorderColor">
            <summary>
                A color used to draw the bounding box around the cluster (default: <see cref="P:System.Drawing.Color.Black" />). If
                <see cref="P:GiGraph.Dot.Entities.Attributes.Properties.Common.GraphCluster.IDotGraphClusterCommonAttributes.BorderColor" /> is not defined, <see cref="P:GiGraph.Dot.Entities.Attributes.Properties.Common.GraphCluster.IDotGraphClusterCommonAttributes.Color" /> is used. If this is not defined, the default is used. Note
                that a cluster inherits the root graph's attributes if defined. Thus, if <see cref="P:GiGraph.Dot.Entities.Attributes.Properties.Common.GraphCluster.IDotGraphClusterCommonAttributes.BorderColor" /> is defined globally for
                clusters, it will override a <see cref="P:GiGraph.Dot.Entities.Attributes.Properties.Common.GraphCluster.IDotGraphClusterCommonAttributes.Color" /> or <see cref="P:GiGraph.Dot.Entities.Clusters.Attributes.IDotClusterAttributes.BackgroundColor" /> attribute set for
                individual clusters.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Clusters.Collections.DotGraphClusterCollection.Attributes">
            <summary>
                Provides access to the global graph attributes applied to clusters.
            </summary>
        </member>
        <member name="T:GiGraph.Dot.Entities.Clusters.DotCluster">
            <summary>
                Represents a cluster subgraph. A cluster subgraph is a special type of subgraph whose appearance can be customized. If
                supported, the layout engine used to render it, will do the layout so that the nodes belonging to the cluster are drawn
                together, with the entire drawing of the cluster contained within a bounding rectangle. Note that cluster subgraphs are not
                part of the DOT language, but solely a syntactic convention adhered to by certain of the layout engines.
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Clusters.DotCluster.#ctor(System.String)">
            <summary>
                Creates a new cluster subgraph.
            </summary>
            <param name="id">
                The unique identifier of the cluster.
            </param>
        </member>
        <member name="P:GiGraph.Dot.Entities.Clusters.DotCluster.Subsections">
            <summary>
                <para>
                    The subsections of the graph. They appear consecutively in the output DOT script, and inherit the graph attributes, and
                    the global node and/or edge attributes of their predecessors. When overridden in any subsection, the new graph attributes
                    and global node/edge attributes apply to the elements the section itself contains, and also to those that belong to the
                    sections that follow it (if any).
                </para>
                <para>
                    Note that each subsection is dependent on the graph attributes and the global node and edge attributes specified by the
                    sections that precede it (including those of the root section represented by the current element). Note also that some
                    graph attributes cannot be overriden, and apply to the whole graph no matter in which section they are set.
                </para>
                <para>
                    As far as setting global node and/or edge attributes for a specific group of elements is concerned,
                    <see cref="N:GiGraph.Dot.Entities.Subgraphs" /> may be the cleaner and preferable way to achieve the effect.
                </para>
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Clusters.DotCluster.Id">
            <summary>
                Gets or sets the identifier of the cluster (optional).
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Clusters.DotCluster.FromNodes(System.String,System.String[])">
            <summary>
                Creates a new cluster with the specified nodes.
            </summary>
            <param name="id">
                The unique identifier of the cluster.
            </param>
            <param name="nodeIds">
                The identifiers of nodes to add to the subgraph.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Clusters.DotCluster.FromNodes(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Creates a new cluster with the specified nodes.
            </summary>
            <param name="id">
                The unique identifier of the cluster.
            </param>
            <param name="nodeIds">
                The identifiers of nodes to add to the subgraph.
            </param>
        </member>
        <member name="P:GiGraph.Dot.Entities.Clusters.DotClusterSection.Font">
            <summary>
                Font attributes.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Clusters.DotClusterSection.Style">
            <summary>
                Style options.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Clusters.DotClusterSection.LabelAlignment">
            <summary>
                Horizontal and vertical label alignment options.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Clusters.DotClusterSection.SvgStyleSheet">
            <summary>
                Style sheet attributes used for SVG output.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Clusters.DotClusterSection.Hyperlink">
            <summary>
                Hyperlink attributes.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Clusters.DotClusterSection.Color">
            <summary>
                <para>
                    Gets or sets the color to use for the cluster (default: <see cref="P:System.Drawing.Color.Black" />).
                </para>
                <para>
                    If <see cref="T:GiGraph.Dot.Types.Colors.DotGradientColor" /> is specified, with no weighted colors in its parameters (<see cref="T:GiGraph.Dot.Types.Colors.DotColor" /> items
                    only), and the <see cref="F:GiGraph.Dot.Types.Clusters.DotClusterFillStyle.Normal" /> fill style is used, a linear gradient fill is done.
                </para>
                <para>
                    If <see cref="T:GiGraph.Dot.Types.Colors.DotGradientColor" /> is used with weighted colors (see <see cref="T:GiGraph.Dot.Types.Colors.DotWeightedColor" />), a degenerate
                    linear gradient fill is done. This essentially does a fill using two colors, with the
                    <see cref="P:GiGraph.Dot.Types.Colors.DotWeightedColor.Weight" /> specifying how much of region is filled with each color.
                </para>
                <para>
                    If the fill style used is <see cref="F:GiGraph.Dot.Types.Clusters.DotClusterFillStyle.Radial" />, then a radial gradient fill is done. See also the
                    <see cref="P:GiGraph.Dot.Entities.Graphs.Attributes.DotGraphCanvasAttributes.GradientFillAngle" /> attribute of graph
                    <see cref="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphRootAttributes.Canvas" /> for setting a gradient angle globally, or its
                    <see cref="P:GiGraph.Dot.Entities.Clusters.Attributes.IDotClusterAttributes.GradientFillAngle" /> counterpart on individual clusters.
                </para>
                <para>
                    The fill style can also be set to do fills using more than 2 colors (set fill style to
                    <see cref="F:GiGraph.Dot.Types.Clusters.DotClusterFillStyle.Striped" />, and use <see cref="T:GiGraph.Dot.Types.Colors.DotMultiColor" /> as a color list definition).
                </para>
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Clusters.DotClusterSection.FillColor">
            <summary>
                <para>
                    Gets or sets the color used to fill the background of the cluster, assuming that the
                    <see cref="F:GiGraph.Dot.Types.Clusters.DotClusterFillStyle.Normal" /> fill style is specified (default: <see cref="P:System.Drawing.Color.Black" />).
                    If <see cref="P:GiGraph.Dot.Entities.Attributes.Properties.Common.GraphCluster.IDotGraphClusterCommonAttributes.FillColor" /> is not defined, <see cref="P:GiGraph.Dot.Entities.Attributes.Properties.Common.GraphCluster.IDotGraphClusterCommonAttributes.Color" /> is used. If <see cref="P:GiGraph.Dot.Entities.Attributes.Properties.Common.GraphCluster.IDotGraphClusterCommonAttributes.Color" /> is not defined,
                    <see cref="P:GiGraph.Dot.Entities.Clusters.Attributes.IDotClusterAttributes.BackgroundColor" /> is used. If it is not defined too, the default is used, except when
                    the output format is MIF, which use black by default.
                </para>
                <para>
                    When <see cref="T:GiGraph.Dot.Types.Colors.DotGradientColor" /> is used, a gradient fill is generated. By default, this is a linear fill; setting
                    fill style to <see cref="F:GiGraph.Dot.Types.Clusters.DotClusterFillStyle.Radial" /> will cause a radial fill. If the second color is
                    <see cref="F:System.Drawing.Color.Empty" />, the default color is used for it. See also the
                    <see cref="P:GiGraph.Dot.Entities.Graphs.Attributes.DotGraphCanvasAttributes.GradientFillAngle" /> attribute on graph
                    <see cref="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphRootAttributes.Canvas" /> for setting a gradient angle globally, or its
                    <see cref="P:GiGraph.Dot.Entities.Clusters.Attributes.IDotClusterAttributes.GradientFillAngle" /> counterpart on individual clusters.
                </para>
                <para>
                    Note that a cluster inherits the root graph's attributes if defined. Thus, if the root graph has defined a
                    <see cref="P:GiGraph.Dot.Entities.Attributes.Properties.Common.GraphCluster.IDotGraphClusterCommonAttributes.FillColor" />, this will override a <see cref="P:GiGraph.Dot.Entities.Attributes.Properties.Common.GraphCluster.IDotGraphClusterCommonAttributes.Color" /> or
                    <see cref="P:GiGraph.Dot.Entities.Clusters.Attributes.IDotClusterAttributes.BackgroundColor" /> set for the cluster.
                </para>
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Clusters.DotClusterSection.BorderWidth">
            <summary>
                Specifies the width of the pen, in points, used to draw the bounding box around clusters. The value is inherited by
                subclusters. It has no effect on text. Default: 1.0, minimum: 0.0.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Clusters.DotClusterSection.BorderColor">
            <summary>
                A color used to draw the bounding box around the cluster (default: <see cref="P:System.Drawing.Color.Black" />). If
                <see cref="P:GiGraph.Dot.Entities.Attributes.Properties.Common.GraphCluster.IDotGraphClusterCommonAttributes.BorderColor" /> is not defined, <see cref="P:GiGraph.Dot.Entities.Attributes.Properties.Common.GraphCluster.IDotGraphClusterCommonAttributes.Color" /> is used. If this is not defined, the default is used. Note
                that a cluster inherits the root graph's attributes if defined. Thus, if <see cref="P:GiGraph.Dot.Entities.Attributes.Properties.Common.GraphCluster.IDotGraphClusterCommonAttributes.BorderColor" /> is defined globally for
                clusters, it will override a <see cref="P:GiGraph.Dot.Entities.Attributes.Properties.Common.GraphCluster.IDotGraphClusterCommonAttributes.Color" /> or <see cref="P:GiGraph.Dot.Entities.Clusters.Attributes.IDotClusterAttributes.BackgroundColor" /> attribute set for
                individual clusters.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Clusters.DotClusterSection.GiGraph#Dot#Entities#Clusters#Attributes#IDotClusterAttributes#Style">
            <summary>
                <para>
                    Gets or sets the style of the cluster (default: unset). See the descriptions of individual <see cref="T:GiGraph.Dot.Types.Styling.DotStyles" />
                    values to learn which styles are applicable to this type of element.
                </para>
                <para>
                    Multiple styles can be used at once, for example: <see cref="P:GiGraph.Dot.Entities.Clusters.Attributes.IDotClusterAttributes.Style" /> = <see cref="F:GiGraph.Dot.Types.Styling.DotStyles.Rounded" /> |
                    <see cref="F:GiGraph.Dot.Types.Styling.DotStyles.Bold" />;
                </para>
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Clusters.DotClusterSection.Label">
            <summary>
                <para>
                    Gets or sets the label to display on the cluster. It may be plain text (<see cref="T:System.String" />) or HTML (
                    <see cref="T:GiGraph.Dot.Types.Html.DotHtmlString" />). See also <see cref="T:GiGraph.Dot.Types.EscapeString.DotFormattedTextBuilder" /> for text justification and simple
                    formatting and <see cref="T:GiGraph.Dot.Entities.Html.Builder.DotHtmlBuilder" /> for custom text styling and defining tables. The latter one gives the most
                    possibilities (specifying font, size, color, style, images, etc.).
                </para>
                <para>
                    Examples:
                    <list type="bullet">
                        <item>
                            <description>
                                <see cref="P:GiGraph.Dot.Entities.Clusters.Attributes.IDotClusterAttributes.Label" /> = "My label";
                            </description>
                        </item>
                        <item>
                            <description>
                                <see cref="P:GiGraph.Dot.Entities.Clusters.Attributes.IDotClusterAttributes.Label" /> = new <see cref="T:GiGraph.Dot.Entities.Html.Font.Styles.DotHtmlBold" />("My label");
                            </description>
                        </item>
                        <item>
                            <description>
                                <see cref="P:GiGraph.Dot.Entities.Clusters.Attributes.IDotClusterAttributes.Label" /> = (<see cref="T:GiGraph.Dot.Types.Html.DotHtmlString" />) "&lt;b&gt;My label&lt;/b&gt;";
                            </description>
                        </item>
                    </list>
                </para>
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Clusters.DotClusterSection.Tooltip">
            <summary>
                Tooltip annotation attached to the cluster (svg, cmap only). If unset, Graphviz will use the <see cref="P:GiGraph.Dot.Entities.Clusters.Attributes.IDotClusterAttributes.Label" /> attribute
                if defined.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Clusters.DotClusterSection.BackgroundColor">
            <summary>
                <para>
                    Gets or sets the background color of the cluster (default: none). Used as the initial background for the cluster. If the
                    <see cref="F:GiGraph.Dot.Types.Clusters.DotClusterFillStyle.Normal" /> fill style is used for the cluster, its
                    <see cref="P:GiGraph.Dot.Entities.Attributes.Properties.Common.GraphCluster.IDotGraphClusterCommonAttributes.FillColor" /> will overlay the background color.
                </para>
                <para>
                    When <see cref="T:GiGraph.Dot.Types.Colors.DotGradientColor" /> is used, a gradient fill is generated. By default, this is a linear fill; applying
                    the <see cref="F:GiGraph.Dot.Types.Clusters.DotClusterFillStyle.Radial" /> fill style to the cluster will cause a radial fill. If the second color is
                    <see cref="F:System.Drawing.Color.Empty" />, the default color is used for it. See also the
                    <see cref="P:GiGraph.Dot.Entities.Clusters.Attributes.IDotClusterAttributes.GradientFillAngle" /> attribute for setting a gradient angle.
                </para>
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Clusters.DotClusterSection.ColorScheme">
            <summary>
                Specifies a color scheme namespace to use. If defined, specifies the context for interpreting color names. If no color scheme
                is set, the standard <see cref="F:GiGraph.Dot.Types.Colors.DotColorSchemes.X11" /> naming is used. For example, if
                <see cref="P:GiGraph.Dot.Types.Colors.DotColorSchemes.DotBrewerColorSchemes.BuGn9" /> Brewer color scheme is used, then a color named "7", e.g.
                Color.FromName("7"), will be evaluated in the context of that specific color scheme. See <see cref="T:GiGraph.Dot.Types.Colors.DotColorSchemes" /> for
                supported scheme names.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Clusters.DotClusterSection.GradientFillAngle">
            <summary>
                If a gradient fill is being used, this determines the angle of the fill. For linear fills, the colors transform along a line
                specified by the angle and the center of the object. For radial fills, a value of zero causes the colors to transform
                radially from the center; for non-zero values, the colors transform from a point near the object's periphery as specified by
                the value. If unset, the default angle is 0.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Clusters.DotClusterSection.Peripheries">
            <summary>
                Sets the number of peripheries used in cluster boundaries (default: 1, minimum: 0, maximum: 1). Setting peripheries to 0 will
                remove the boundaries.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Clusters.DotClusterSection.Padding">
            <summary>
                Specifies the space between the nodes in the cluster and bounding box of the cluster. By default, this is 8 points.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Clusters.DotClusterSection.SortIndex">
            <summary>
                Gets or sets the sorting index of the cluster (default: 0). If <see cref="P:GiGraph.Dot.Entities.Graphs.Attributes.DotGraphLayoutAttributes.PackingMode" /> indicates
                an array packing, this attribute specifies an insertion order among the components, with smaller values inserted first.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Clusters.DotClusterSection.ObjectId">
            <summary>
                <para>
                    Allows the graph author to provide an identifier for graph objects which is to be included in the output (svg,
                    postscript, map only).
                </para>
                <para>
                    Normal <see cref="F:GiGraph.Dot.Types.EscapeString.DotEscapeString.NodeId" />, <see cref="F:GiGraph.Dot.Types.EscapeString.DotEscapeString.EdgeDefinition" />,
                    <see cref="F:GiGraph.Dot.Types.EscapeString.DotEscapeString.GraphId" /> substitutions can be applied (see <see cref="T:GiGraph.Dot.Types.EscapeString.DotFormattedTextBuilder" />). Note,
                    however, that <see cref="F:GiGraph.Dot.Types.EscapeString.DotEscapeString.EdgeDefinition" /> does not provide a unique ID for multi-edges.
                </para>
                <para>
                    If provided, it is the responsibility of the provider to keep ID values unique for its intended downstream use. If no ID
                    attribute is provided, then a unique internal ID is used. However, this value is unpredictable by the graph writer.
                </para>
                <para>
                    If the graph provides an ID attribute, this will be used as a prefix for internally generated attributes. By making
                    internally-used attributes distinct, the user can include multiple image maps in the same document.
                </para>
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Clusters.DotClusterSection.NodeRank">
            <summary>
                Gets or sets the rank constraints on the nodes in the cluster (dot only).
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Clusters.DotClusterSection.Attributes">
            <summary>
                Provides access to the attributes of the subgraph.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Attributes.DotEdgeEndpointLabelsAttributes.Font">
            <summary>
                Font attributes used for labels of the head and of the tail of the edge. If not set, default to font attributes specified for
                the edge.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Attributes.DotEdgeEndpointLabelsAttributes.Distance">
            <summary>
                Multiplicative scaling factor adjusting the distance that the the head and tail labels are from the head/tail nodes (see
                <see cref="P:GiGraph.Dot.Entities.Edges.Endpoints.Attributes.IDotEdgeEndpointAttributes.Label" /> on the head and the tail of the edge). The default distance is 10 points, the
                minimum is 0.0. See also <see cref="P:GiGraph.Dot.Entities.Edges.Attributes.IDotEdgeEndpointLabelsAttributes.Angle" />.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Attributes.DotEdgeEndpointLabelsAttributes.Angle">
            <summary>
                <para>
                    This, along with <see cref="P:GiGraph.Dot.Entities.Edges.Attributes.IDotEdgeEndpointLabelsAttributes.Distance" />, determine where the the head and tail labels are placed with respect to the
                    head/tail in polar coordinates (see <see cref="P:GiGraph.Dot.Entities.Edges.Endpoints.Attributes.IDotEdgeEndpointAttributes.Label" /> on the head and on the tail of the
                    edge). The origin in the coordinate system is the point where the edge touches the node. The ray of 0 degrees goes from
                    the origin back along the edge, parallel to the edge at the origin.
                </para>
                <para>
                    The angle, in degrees, specifies the rotation from the 0 degree ray, with positive angles moving counterclockwise and
                    negative angles moving clockwise. The default value is -25.0, the minimum: -180.0.
                </para>
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Attributes.DotEdgeEndpointLabelsFontAttributes.Name">
            <summary>
                Font used for labels specified for the head and the tail of the edge (default: "Times-Roman"). If not set, defaults to font
                name specified for the edge.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Attributes.DotEdgeEndpointLabelsFontAttributes.Color">
            <summary>
                Color used for labels specified for the head and the tail of the edge (default: <see cref="P:System.Drawing.Color.Black" />).
                If not set, defaults to font color specified for the edge.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Attributes.DotEdgeEndpointLabelsFontAttributes.Size">
            <summary>
                Font size, in points, used for labels specified for the head and the tail of the edge (default: 14.0). If not set, defaults
                to font size specified for the edge.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Attributes.DotEdgeHyperlinkAttributes.Url">
            <summary>
                If defined, this is the link used for the non-label parts of the edge (svg, map only). Used near the head or the tail node,
                unless overridden by the <see cref="P:GiGraph.Dot.Entities.Attributes.Properties.Common.Hyperlink.IDotHyperlinkAttributes.Url" /> on the head's or tail's
                <see cref="P:GiGraph.Dot.Entities.Edges.Endpoints.Attributes.IDotEdgeEndpointRootAttributes.Hyperlink" /> attributes of the edge. This value overrides any
                <see cref="P:GiGraph.Dot.Entities.Attributes.Properties.Common.Hyperlink.IDotHyperlinkAttributes.Url" /> specified for the edge's <see cref="P:GiGraph.Dot.Entities.Edges.Attributes.IDotEdgeRootAttributes.Hyperlink" />.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Attributes.DotEdgeHyperlinkAttributes.Href">
            <summary>
                Synonym for <see cref="P:GiGraph.Dot.Entities.Edges.Attributes.DotEdgeHyperlinkAttributes.Url" /> (svg, map only).
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Attributes.DotEdgeHyperlinkAttributes.Target">
            <summary>
                If <see cref="P:GiGraph.Dot.Entities.Edges.Attributes.DotEdgeHyperlinkAttributes.Url" /> is specified, or if the edge has a <see cref="P:GiGraph.Dot.Entities.Edges.Attributes.IDotEdgeRootAttributes.Hyperlink" />
                <see cref="P:GiGraph.Dot.Entities.Attributes.Properties.Common.Hyperlink.IDotHyperlinkAttributes.Url" /> attribute specified, determines which window of the browser is used for the URL
                attached to the non-label part of the edge (svg, map only). Setting it to <see cref="F:GiGraph.Dot.Types.Hyperlinks.DotHyperlinkTargets.NewWindow" /> will
                open a new window if it doesn't already exist, or reuse it if it does. If undefined, the value of the edge's
                <see cref="P:GiGraph.Dot.Entities.Edges.Attributes.IDotEdgeRootAttributes.Hyperlink" /> <see cref="P:GiGraph.Dot.Entities.Attributes.Properties.Common.Hyperlink.IDotHyperlinkAttributes.Target" /> is used.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Attributes.DotEdgeHyperlinkAttributes.Tooltip">
            <summary>
                Tooltip annotation attached to the non-label part of the edge (svg, cmap only). This is used only if <see cref="P:GiGraph.Dot.Entities.Edges.Attributes.DotEdgeHyperlinkAttributes.Url" /> is
                specified, or if the edge has a <see cref="P:GiGraph.Dot.Entities.Edges.Attributes.IDotEdgeRootAttributes.Hyperlink" /> <see cref="P:GiGraph.Dot.Entities.Attributes.Properties.Common.Hyperlink.IDotHyperlinkAttributes.Url" />
                specified.
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Edges.Attributes.DotEdgeHyperlinkAttributes.Set(GiGraph.Dot.Types.EscapeString.DotEscapeString,GiGraph.Dot.Types.EscapeString.DotEscapeString,GiGraph.Dot.Types.EscapeString.DotEscapeString)">
            <summary>
                Specifies hyperlink attributes.
            </summary>
            <param name="url">
                The URL of the hyperlink.
            </param>
            <param name="target">
                The target of the hyperlink. See <see cref="T:GiGraph.Dot.Types.Hyperlinks.DotHyperlinkTargets" /> for accepted values.
            </param>
            <param name="tooltip">
                The tooltip of the hyperlink.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Edges.Attributes.DotEdgeHyperlinkAttributes.Set(GiGraph.Dot.Types.Edges.DotEdgeHyperlink)">
            <summary>
                Specifies hyperlink attributes.
            </summary>
            <param name="attributes">
                The attributes to set.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Edges.Attributes.DotEdgeHyperlinkAttributes.Set(GiGraph.Dot.Entities.Edges.Attributes.IDotEdgeHyperlinkAttributes)">
            <summary>
                Copies hyperlink attributes from the specified instance.
            </summary>
            <param name="attributes">
                The instance to copy the attributes from.
            </param>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Attributes.DotEdgeLabelHyperlinkAttributes.Url">
            <summary>
                If defined, this is the link used for the label of the edge (svg, map only). This value overrides any
                <see cref="P:GiGraph.Dot.Entities.Edges.Attributes.IDotEdgeRootAttributes.Hyperlink" /> <see cref="P:GiGraph.Dot.Entities.Attributes.Properties.Common.Hyperlink.IDotHyperlinkAttributes.Url" /> defined for the edge.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Attributes.DotEdgeLabelHyperlinkAttributes.Href">
            <summary>
                Synonym for <see cref="P:GiGraph.Dot.Entities.Edges.Attributes.DotEdgeLabelHyperlinkAttributes.Url" /> (svg, map only).
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Attributes.DotEdgeLabelHyperlinkAttributes.Target">
            <summary>
                If <see cref="P:GiGraph.Dot.Entities.Edges.Attributes.DotEdgeLabelHyperlinkAttributes.Url" /> is specified, or if the edge has a <see cref="P:GiGraph.Dot.Entities.Edges.Attributes.IDotEdgeRootAttributes.Hyperlink" />
                <see cref="P:GiGraph.Dot.Entities.Attributes.Properties.Common.Hyperlink.IDotHyperlinkAttributes.Url" /> specified, this attribute determines which window of the browser is used for the
                URL attached to the label (svg, map only). Setting it to <see cref="F:GiGraph.Dot.Types.Hyperlinks.DotHyperlinkTargets.NewWindow" /> will open a new window
                if it doesn't already exist, or reuse it if it does. If undefined, the value of the edge's
                <see cref="P:GiGraph.Dot.Entities.Edges.Attributes.IDotEdgeRootAttributes.Hyperlink" /> <see cref="P:GiGraph.Dot.Entities.Attributes.Properties.Common.Hyperlink.IDotHyperlinkAttributes.Target" /> is used.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Attributes.DotEdgeLabelHyperlinkAttributes.Tooltip">
            <summary>
                Tooltip annotation attached to the label of the edge (svg, cmap only). This is used only if <see cref="P:GiGraph.Dot.Entities.Edges.Attributes.DotEdgeLabelHyperlinkAttributes.Url" /> is specified,
                or if the edge has a <see cref="P:GiGraph.Dot.Entities.Edges.Attributes.IDotEdgeRootAttributes.Hyperlink" /> <see cref="P:GiGraph.Dot.Entities.Attributes.Properties.Common.Hyperlink.IDotHyperlinkAttributes.Url" /> specified.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Attributes.DotEdgeStyleAttributeOptions.LineStyle">
            <summary>
                Gets or sets a line style for the edge (default: <see cref="F:GiGraph.Dot.Types.Styling.DotLineStyle.Normal" />).
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Attributes.DotEdgeStyleAttributeOptions.LineWeight">
            <summary>
                Gets or sets a line weight for the edge (default: <see cref="F:GiGraph.Dot.Types.Styling.DotLineWeight.Normal" />).
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Attributes.DotEdgeStyleAttributeOptions.Invisible">
            <summary>
                Gets or sets a value indicating if the edge is invisible.
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Edges.Attributes.DotEdgeStyleAttributeOptions.Set(GiGraph.Dot.Types.Edges.DotEdgeStyleProperties)">
            <summary>
                Applies the specified style options to the edge.
            </summary>
            <param name="options">
                The options to apply.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Edges.Attributes.DotEdgeStyleAttributeOptions.Set(GiGraph.Dot.Types.Styling.DotLineStyle,GiGraph.Dot.Types.Styling.DotLineWeight,System.Boolean)">
            <summary>
                Applies the specified style options to the edge.
            </summary>
            <param name="lineStyle">
                The line style to set.
            </param>
            <param name="lineWeight">
                The line weight to set.
            </param>
            <param name="invisible">
                Determines whether the edge should be invisible.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Edges.Attributes.DotEdgeStyleAttributeOptions.CopyFrom(GiGraph.Dot.Entities.Edges.Attributes.DotEdgeStyleAttributeOptions)">
            <summary>
                Copies style options from the specified instance.
            </summary>
            <param name="options">
                The instance to copy the options from.
            </param>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Attributes.IDotEdgeAttributes.Style">
            <summary>
                <para>
                    Gets or sets the style of the edge (default: unset). See the descriptions of individual <see cref="T:GiGraph.Dot.Types.Styling.DotStyles" /> values
                    to learn which styles are applicable to this type of element.
                </para>
                <para>
                    Multiple styles can be used at once, for example: <see cref="P:GiGraph.Dot.Entities.Edges.Attributes.IDotEdgeAttributes.Style" /> = <see cref="F:GiGraph.Dot.Types.Styling.DotStyles.Rounded" /> |
                    <see cref="F:GiGraph.Dot.Types.Styling.DotStyles.Bold" />;
                </para>
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Attributes.IDotEdgeAttributes.Label">
            <summary>
                <para>
                    Gets or sets the label to display next to the edge. It may be plain text (<see cref="T:System.String" />) or HTML (
                    <see cref="T:GiGraph.Dot.Types.Html.DotHtmlString" />). See also <see cref="T:GiGraph.Dot.Types.EscapeString.DotFormattedTextBuilder" /> for text justification and simple
                    formatting and <see cref="T:GiGraph.Dot.Entities.Html.Builder.DotHtmlBuilder" /> for custom text styling and defining tables. The latter one gives the most
                    possibilities (specifying font, size, color, style, images, etc.).
                </para>
                <para>
                    Examples:
                    <list type="bullet">
                        <item>
                            <description>
                                <see cref="P:GiGraph.Dot.Entities.Edges.Attributes.IDotEdgeAttributes.Label" /> = "My label";
                            </description>
                        </item>
                        <item>
                            <description>
                                <see cref="P:GiGraph.Dot.Entities.Edges.Attributes.IDotEdgeAttributes.Label" /> = new <see cref="T:GiGraph.Dot.Entities.Html.Font.Styles.DotHtmlBold" />("My label");
                            </description>
                        </item>
                        <item>
                            <description>
                                <see cref="P:GiGraph.Dot.Entities.Edges.Attributes.IDotEdgeAttributes.Label" /> = (<see cref="T:GiGraph.Dot.Types.Html.DotHtmlString" />) "&lt;b&gt;My label&lt;/b&gt;";
                            </description>
                        </item>
                    </list>
                </para>
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Attributes.IDotEdgeAttributes.ExternalLabel">
            <summary>
                <para>
                    External label for the edge. The label will be placed near the center of the edge. This can be useful in dot to avoid the
                    occasional problem when the use of edge labels distorts the layout. For other layouts, this attribute can be viewed as a
                    synonym for the <see cref="P:GiGraph.Dot.Entities.Edges.Attributes.IDotEdgeAttributes.Label" /> attribute.
                </para>
                <para>
                    These labels are added after all nodes and edges have been placed. The labels will be placed so that they do not overlap
                    any node or label. This means it may not be possible to place all of them. To force placing all of them, use the
                    <see cref="P:GiGraph.Dot.Entities.Graphs.Attributes.DotGraphLayoutAttributes.ForceExternalLabels" /> attribute on the graph.
                </para>
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Attributes.IDotEdgeAttributes.AllowLabelFloat">
            <summary>
                If true, allows edge labels to be less constrained in position. In particular, it may appear on top of other edges. Default:
                false.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Attributes.IDotEdgeAttributes.MinLength">
            <summary>
                Minimum edge length (rank difference between head and tail). Dot only, default: 1, minimum: 0.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Attributes.IDotEdgeAttributes.Length">
            <summary>
                Preferred edge length, in inches (fdp, neato only). Default: 1.0 (neato), 0.3 (fdp).
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Attributes.IDotEdgeAttributes.Weight">
            <summary>
                Weight of the edge. In dot, the heavier the weight, the shorter, straighter and more vertical the edge is. Note that weights
                in dot must be integers. For twopi, a weight of 0 indicates the edge should not be used in constructing a spanning tree from
                the root. For other layouts, a larger weight encourages the layout to make the edge length closer to that specified by the
                <see cref="P:GiGraph.Dot.Entities.Edges.Attributes.IDotEdgeAttributes.Length" /> attribute. Default: 1. Minimum: 0 [int] (dot, twopi), 1 [double] (neato, fdp).
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Attributes.IDotEdgeAttributes.Tooltip">
            <summary>
                Tooltip annotation attached to the edge (svg, cmap only). If unset, Graphviz will use the <see cref="P:GiGraph.Dot.Entities.Edges.Attributes.IDotEdgeAttributes.Label" /> attribute if
                defined.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Attributes.IDotEdgeAttributes.Color">
            <summary>
                <para>
                    Gets or sets the color to use for the edge (default: <see cref="P:System.Drawing.Color.Black" />).
                </para>
                <para>
                    If <see cref="T:GiGraph.Dot.Types.Colors.DotMultiColor" /> is used, with no weighted colors in its color collection (<see cref="T:GiGraph.Dot.Types.Colors.DotColor" /> items
                    only), the edge is drawn using parallel splines or lines, one for each color in the list, in the order given. The head
                    arrow, if any, is drawn using the first color in the list, and the tail arrow, if any, the second color. This supports
                    the common case of drawing opposing edges, but using parallel splines instead of separately routed multiedges.
                </para>
                <para>
                    If <see cref="T:GiGraph.Dot.Types.Colors.DotMultiColor" /> is used with at least one weighted color (<see cref="T:GiGraph.Dot.Types.Colors.DotWeightedColor" />), the colors
                    are drawn in series, with each color being given roughly its specified fraction of the edge, expressed by the
                    <see cref="P:GiGraph.Dot.Types.Colors.DotWeightedColor.Weight" /> property.
                </para>
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Attributes.IDotEdgeAttributes.FillColor">
            <summary>
                Gets or sets the color used to fill the arrowhead, assuming it has a filled style. If <see cref="P:GiGraph.Dot.Entities.Edges.Attributes.IDotEdgeAttributes.FillColor" /> is not
                defined, <see cref="P:GiGraph.Dot.Entities.Edges.Attributes.IDotEdgeAttributes.Color" /> is used. If it is not defined too, the default is used, except when the output format is MIF,
                which use black by default.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Attributes.IDotEdgeAttributes.ColorScheme">
            <summary>
                Specifies a color scheme namespace to use. If defined, specifies the context for interpreting color names. If no color scheme
                is set, the standard <see cref="F:GiGraph.Dot.Types.Colors.DotColorSchemes.X11" /> naming is used. For example, if
                <see cref="P:GiGraph.Dot.Types.Colors.DotColorSchemes.DotBrewerColorSchemes.BuGn9" /> Brewer color scheme is used, then a color named "7", e.g.
                Color.FromName("7"), will be evaluated in the context of that specific color scheme. See <see cref="T:GiGraph.Dot.Types.Colors.DotColorSchemes" /> for
                supported scheme names.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Attributes.IDotEdgeAttributes.Width">
            <summary>
                Specifies the width of the pen, in points, used to draw lines and curves, including the boundaries of edges. The value has no
                effect on text. Default: 1.0, minimum: 0.0.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Attributes.IDotEdgeAttributes.ArrowheadScale">
            <summary>
                Gets or sets the multiplicative scale factor for arrowheads (default: 1.0, minimum: 0.0).
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Attributes.IDotEdgeAttributes.Directions">
            <summary>
                <para>
                    Gets or sets edge type for drawing arrowheads. Default: <see cref="F:GiGraph.Dot.Types.Edges.DotEdgeDirections.Forward" /> (for directed graphs),
                    <see cref="F:GiGraph.Dot.Types.Edges.DotEdgeDirections.None" /> (for undirected graphs).
                </para>
                <para>
                    Indicates which ends of the edge should be decorated with an arrowhead. The actual style of the arrowhead may be
                    specified using the <see cref="P:GiGraph.Dot.Entities.Edges.Endpoints.Attributes.IDotEdgeEndpointAttributes.Arrowhead" /> attribute on the head or tail of the edge.
                </para>
                <para>
                    A glyph is drawn at the head end of the edge if and only if the direction is <see cref="F:GiGraph.Dot.Types.Edges.DotEdgeDirections.Forward" /> or
                    <see cref="F:GiGraph.Dot.Types.Edges.DotEdgeDirections.Both" />.
                </para>
                <para>
                    A glyph is drawn at the tail end of the edge if and only if the direction is <see cref="F:GiGraph.Dot.Types.Edges.DotEdgeDirections.Backward" /> or
                    <see cref="F:GiGraph.Dot.Types.Edges.DotEdgeDirections.Both" />.
                </para>
                <para>
                    For undirected edges T -- H, one of the nodes, usually the right hand one, is treated as the head for the purpose of
                    interpreting <see cref="F:GiGraph.Dot.Types.Edges.DotEdgeDirections.Forward" /> and <see cref="F:GiGraph.Dot.Types.Edges.DotEdgeDirections.Backward" />.
                </para>
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Attributes.IDotEdgeAttributes.AttachLabel">
            <summary>
                If true, attaches label to the edge by a 2-segment polyline, underlining the label, then going to the closest point of
                spline. Default: false.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Attributes.IDotEdgeAttributes.Constrain">
            <summary>
                If false, the edge is not used in ranking the nodes (dot only, default: true). See
                <see href="http://www.graphviz.org/doc/info/attrs.html#a:constraint">
                    documentation
                </see>
                for more details.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Attributes.IDotEdgeAttributes.Comment">
            <summary>
                Comments are inserted into output. Device-dependent.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Attributes.IDotEdgeAttributes.ObjectId">
            <summary>
                <para>
                    Allows the graph author to provide an identifier for graph objects which is to be included in the output (svg,
                    postscript, map only).
                </para>
                <para>
                    Normal <see cref="F:GiGraph.Dot.Types.EscapeString.DotEscapeString.NodeId" />, <see cref="F:GiGraph.Dot.Types.EscapeString.DotEscapeString.EdgeDefinition" />,
                    <see cref="F:GiGraph.Dot.Types.EscapeString.DotEscapeString.GraphId" /> substitutions can be applied (see <see cref="T:GiGraph.Dot.Types.EscapeString.DotFormattedTextBuilder" />). Note,
                    however, that <see cref="F:GiGraph.Dot.Types.EscapeString.DotEscapeString.EdgeDefinition" /> does not provide a unique ID for multi-edges.
                </para>
                <para>
                    If provided, it is the responsibility of the provider to keep ID values unique for its intended downstream use. If no ID
                    attribute is provided, then a unique internal ID is used. However, this value is unpredictable by the graph writer.
                </para>
                <para>
                    If the graph provides an ID attribute, this will be used as a prefix for internally generated attributes. By making
                    internally-used attributes distinct, the user can include multiple image maps in the same document.
                </para>
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Attributes.IDotEdgeEndpointLabelsAttributes.Distance">
            <summary>
                Multiplicative scaling factor adjusting the distance that the the head and tail labels are from the head/tail nodes (see
                <see cref="P:GiGraph.Dot.Entities.Edges.Endpoints.Attributes.IDotEdgeEndpointAttributes.Label" /> on the head and the tail of the edge). The default distance is 10 points, the
                minimum is 0.0. See also <see cref="P:GiGraph.Dot.Entities.Edges.Attributes.IDotEdgeEndpointLabelsAttributes.Angle" />.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Attributes.IDotEdgeEndpointLabelsAttributes.Angle">
            <summary>
                <para>
                    This, along with <see cref="P:GiGraph.Dot.Entities.Edges.Attributes.IDotEdgeEndpointLabelsAttributes.Distance" />, determine where the the head and tail labels are placed with respect to the
                    head/tail in polar coordinates (see <see cref="P:GiGraph.Dot.Entities.Edges.Endpoints.Attributes.IDotEdgeEndpointAttributes.Label" /> on the head and on the tail of the
                    edge). The origin in the coordinate system is the point where the edge touches the node. The ray of 0 degrees goes from
                    the origin back along the edge, parallel to the edge at the origin.
                </para>
                <para>
                    The angle, in degrees, specifies the rotation from the 0 degree ray, with positive angles moving counterclockwise and
                    negative angles moving clockwise. The default value is -25.0, the minimum: -180.0.
                </para>
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Attributes.IDotEdgeHyperlinkAttributes.Tooltip">
            <summary>
                Tooltip annotation attached to the endpoint of the edge, to its label, or to its non-label part, depending on the context the
                attribute is specified. Used only if <see cref="P:GiGraph.Dot.Entities.Attributes.Properties.Common.Hyperlink.IDotHyperlinkAttributes.Url" /> is specified, or if the edge has a
                <see cref="P:GiGraph.Dot.Entities.Edges.Attributes.IDotEdgeRootAttributes.Hyperlink" /> <see cref="P:GiGraph.Dot.Entities.Attributes.Properties.Common.Hyperlink.IDotHyperlinkAttributes.Url" /> specified.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Attributes.IDotEdgeRootAttributes.Head">
            <summary>
                Attributes applied to the head of the edge.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Attributes.IDotEdgeRootAttributes.Tail">
            <summary>
                Attributes applied to the tail of the edge.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Attributes.IDotEdgeRootAttributes.Font">
            <summary>
                Font attributes.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Attributes.IDotEdgeRootAttributes.EndpointLabels">
            <summary>
                Attributes applied to labels specified for the head and the tail of the edge.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Attributes.IDotEdgeRootAttributes.EdgeHyperlink">
            <summary>
                Hyperlink attributes applied to the non-label parts of the edge.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Attributes.IDotEdgeRootAttributes.LabelHyperlink">
            <summary>
                Hyperlink attributes applied to the label of the edge.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Attributes.IDotEdgeRootAttributes.Style">
            <summary>
                Style options.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Attributes.IDotEdgeRootAttributes.SvgStyleSheet">
            <summary>
                Style sheet attributes used for SVG output.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Attributes.IDotEdgeRootAttributes.Hyperlink">
            <summary>
                Hyperlink attributes.
            </summary>
        </member>
        <member name="T:GiGraph.Dot.Entities.Edges.Collections.DotEdgeCollection">
            <summary>
                A collection of edges.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Collections.DotEdgeCollection.Head">
            <summary>
                Attributes applied to the head of the edge.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Collections.DotEdgeCollection.Tail">
            <summary>
                Attributes applied to the tail of the edge.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Collections.DotEdgeCollection.Font">
            <summary>
                Font attributes.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Collections.DotEdgeCollection.EndpointLabels">
            <summary>
                Attributes applied to labels specified for the head and the tail of the edge.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Collections.DotEdgeCollection.EdgeHyperlink">
            <summary>
                Hyperlink attributes applied to the non-label parts of the edge.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Collections.DotEdgeCollection.LabelHyperlink">
            <summary>
                Hyperlink attributes applied to the label of the edge.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Collections.DotEdgeCollection.Style">
            <summary>
                Style options.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Collections.DotEdgeCollection.SvgStyleSheet">
            <summary>
                Style sheet attributes used for SVG output.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Collections.DotEdgeCollection.Hyperlink">
            <summary>
                Hyperlink attributes.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Collections.DotEdgeCollection.Label">
            <summary>
                <para>
                    Gets or sets the label to display next to the edge. It may be plain text (<see cref="T:System.String" />) or HTML (
                    <see cref="T:GiGraph.Dot.Types.Html.DotHtmlString" />). See also <see cref="T:GiGraph.Dot.Types.EscapeString.DotFormattedTextBuilder" /> for text justification and simple
                    formatting and <see cref="T:GiGraph.Dot.Entities.Html.Builder.DotHtmlBuilder" /> for custom text styling and defining tables. The latter one gives the most
                    possibilities (specifying font, size, color, style, images, etc.).
                </para>
                <para>
                    Examples:
                    <list type="bullet">
                        <item>
                            <description>
                                <see cref="P:GiGraph.Dot.Entities.Edges.Attributes.IDotEdgeAttributes.Label" /> = "My label";
                            </description>
                        </item>
                        <item>
                            <description>
                                <see cref="P:GiGraph.Dot.Entities.Edges.Attributes.IDotEdgeAttributes.Label" /> = new <see cref="T:GiGraph.Dot.Entities.Html.Font.Styles.DotHtmlBold" />("My label");
                            </description>
                        </item>
                        <item>
                            <description>
                                <see cref="P:GiGraph.Dot.Entities.Edges.Attributes.IDotEdgeAttributes.Label" /> = (<see cref="T:GiGraph.Dot.Types.Html.DotHtmlString" />) "&lt;b&gt;My label&lt;/b&gt;";
                            </description>
                        </item>
                    </list>
                </para>
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Collections.DotEdgeCollection.ExternalLabel">
            <summary>
                <para>
                    External label for the edge. The label will be placed near the center of the edge. This can be useful in dot to avoid the
                    occasional problem when the use of edge labels distorts the layout. For other layouts, this attribute can be viewed as a
                    synonym for the <see cref="P:GiGraph.Dot.Entities.Edges.Attributes.IDotEdgeAttributes.Label" /> attribute.
                </para>
                <para>
                    These labels are added after all nodes and edges have been placed. The labels will be placed so that they do not overlap
                    any node or label. This means it may not be possible to place all of them. To force placing all of them, use the
                    <see cref="P:GiGraph.Dot.Entities.Graphs.Attributes.DotGraphLayoutAttributes.ForceExternalLabels" /> attribute on the graph.
                </para>
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Collections.DotEdgeCollection.AllowLabelFloat">
            <summary>
                If true, allows edge labels to be less constrained in position. In particular, it may appear on top of other edges. Default:
                false.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Collections.DotEdgeCollection.MinLength">
            <summary>
                Minimum edge length (rank difference between head and tail). Dot only, default: 1, minimum: 0.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Collections.DotEdgeCollection.Length">
            <summary>
                Preferred edge length, in inches (fdp, neato only). Default: 1.0 (neato), 0.3 (fdp).
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Collections.DotEdgeCollection.Weight">
            <summary>
                Weight of the edge. In dot, the heavier the weight, the shorter, straighter and more vertical the edge is. Note that weights
                in dot must be integers. For twopi, a weight of 0 indicates the edge should not be used in constructing a spanning tree from
                the root. For other layouts, a larger weight encourages the layout to make the edge length closer to that specified by the
                <see cref="P:GiGraph.Dot.Entities.Edges.Attributes.IDotEdgeAttributes.Length" /> attribute. Default: 1. Minimum: 0 [int] (dot, twopi), 1 [double] (neato, fdp).
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Collections.DotEdgeCollection.Tooltip">
            <summary>
                Tooltip annotation attached to the edge (svg, cmap only). If unset, Graphviz will use the <see cref="P:GiGraph.Dot.Entities.Edges.Attributes.IDotEdgeAttributes.Label" /> attribute if
                defined.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Collections.DotEdgeCollection.Color">
            <summary>
                <para>
                    Gets or sets the color to use for the edge (default: <see cref="P:System.Drawing.Color.Black" />).
                </para>
                <para>
                    If <see cref="T:GiGraph.Dot.Types.Colors.DotMultiColor" /> is used, with no weighted colors in its color collection (<see cref="T:GiGraph.Dot.Types.Colors.DotColor" /> items
                    only), the edge is drawn using parallel splines or lines, one for each color in the list, in the order given. The head
                    arrow, if any, is drawn using the first color in the list, and the tail arrow, if any, the second color. This supports
                    the common case of drawing opposing edges, but using parallel splines instead of separately routed multiedges.
                </para>
                <para>
                    If <see cref="T:GiGraph.Dot.Types.Colors.DotMultiColor" /> is used with at least one weighted color (<see cref="T:GiGraph.Dot.Types.Colors.DotWeightedColor" />), the colors
                    are drawn in series, with each color being given roughly its specified fraction of the edge, expressed by the
                    <see cref="P:GiGraph.Dot.Types.Colors.DotWeightedColor.Weight" /> property.
                </para>
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Collections.DotEdgeCollection.FillColor">
            <summary>
                Gets or sets the color used to fill the arrowhead, assuming it has a filled style. If <see cref="P:GiGraph.Dot.Entities.Edges.Attributes.IDotEdgeAttributes.FillColor" /> is not
                defined, <see cref="P:GiGraph.Dot.Entities.Edges.Attributes.IDotEdgeAttributes.Color" /> is used. If it is not defined too, the default is used, except when the output format is MIF,
                which use black by default.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Collections.DotEdgeCollection.ColorScheme">
            <summary>
                Specifies a color scheme namespace to use. If defined, specifies the context for interpreting color names. If no color scheme
                is set, the standard <see cref="F:GiGraph.Dot.Types.Colors.DotColorSchemes.X11" /> naming is used. For example, if
                <see cref="P:GiGraph.Dot.Types.Colors.DotColorSchemes.DotBrewerColorSchemes.BuGn9" /> Brewer color scheme is used, then a color named "7", e.g.
                Color.FromName("7"), will be evaluated in the context of that specific color scheme. See <see cref="T:GiGraph.Dot.Types.Colors.DotColorSchemes" /> for
                supported scheme names.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Collections.DotEdgeCollection.Width">
            <summary>
                Specifies the width of the pen, in points, used to draw lines and curves, including the boundaries of edges. The value has no
                effect on text. Default: 1.0, minimum: 0.0.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Collections.DotEdgeCollection.ArrowheadScale">
            <summary>
                Gets or sets the multiplicative scale factor for arrowheads (default: 1.0, minimum: 0.0).
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Collections.DotEdgeCollection.Directions">
            <summary>
                <para>
                    Gets or sets edge type for drawing arrowheads. Default: <see cref="F:GiGraph.Dot.Types.Edges.DotEdgeDirections.Forward" /> (for directed graphs),
                    <see cref="F:GiGraph.Dot.Types.Edges.DotEdgeDirections.None" /> (for undirected graphs).
                </para>
                <para>
                    Indicates which ends of the edge should be decorated with an arrowhead. The actual style of the arrowhead may be
                    specified using the <see cref="P:GiGraph.Dot.Entities.Edges.Endpoints.Attributes.IDotEdgeEndpointAttributes.Arrowhead" /> attribute on the head or tail of the edge.
                </para>
                <para>
                    A glyph is drawn at the head end of the edge if and only if the direction is <see cref="F:GiGraph.Dot.Types.Edges.DotEdgeDirections.Forward" /> or
                    <see cref="F:GiGraph.Dot.Types.Edges.DotEdgeDirections.Both" />.
                </para>
                <para>
                    A glyph is drawn at the tail end of the edge if and only if the direction is <see cref="F:GiGraph.Dot.Types.Edges.DotEdgeDirections.Backward" /> or
                    <see cref="F:GiGraph.Dot.Types.Edges.DotEdgeDirections.Both" />.
                </para>
                <para>
                    For undirected edges T -- H, one of the nodes, usually the right hand one, is treated as the head for the purpose of
                    interpreting <see cref="F:GiGraph.Dot.Types.Edges.DotEdgeDirections.Forward" /> and <see cref="F:GiGraph.Dot.Types.Edges.DotEdgeDirections.Backward" />.
                </para>
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Collections.DotEdgeCollection.AttachLabel">
            <summary>
                If true, attaches label to the edge by a 2-segment polyline, underlining the label, then going to the closest point of
                spline. Default: false.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Collections.DotEdgeCollection.Constrain">
            <summary>
                If false, the edge is not used in ranking the nodes (dot only, default: true). See
                <see href="http://www.graphviz.org/doc/info/attrs.html#a:constraint">
                    documentation
                </see>
                for more details.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Collections.DotEdgeCollection.Comment">
            <summary>
                Comments are inserted into output. Device-dependent.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Collections.DotEdgeCollection.ObjectId">
            <summary>
                <para>
                    Allows the graph author to provide an identifier for graph objects which is to be included in the output (svg,
                    postscript, map only).
                </para>
                <para>
                    Normal <see cref="F:GiGraph.Dot.Types.EscapeString.DotEscapeString.NodeId" />, <see cref="F:GiGraph.Dot.Types.EscapeString.DotEscapeString.EdgeDefinition" />,
                    <see cref="F:GiGraph.Dot.Types.EscapeString.DotEscapeString.GraphId" /> substitutions can be applied (see <see cref="T:GiGraph.Dot.Types.EscapeString.DotFormattedTextBuilder" />). Note,
                    however, that <see cref="F:GiGraph.Dot.Types.EscapeString.DotEscapeString.EdgeDefinition" /> does not provide a unique ID for multi-edges.
                </para>
                <para>
                    If provided, it is the responsibility of the provider to keep ID values unique for its intended downstream use. If no ID
                    attribute is provided, then a unique internal ID is used. However, this value is unpredictable by the graph writer.
                </para>
                <para>
                    If the graph provides an ID attribute, this will be used as a prefix for internally generated attributes. By making
                    internally-used attributes distinct, the user can include multiple image maps in the same document.
                </para>
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Collections.DotEdgeCollection.Attributes">
            <summary>
                Provides access to the global attributes applied to edges.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Collections.DotEdgeCollection.Annotation">
            <summary>
                The annotation to write in the output DOT script as a comment in the context of the element or section represented by the
                current object.
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Edges.Collections.DotEdgeCollection.Add``1(``0,System.Action{``0})">
            <summary>
                Adds an edge to the collection and initializes its attributes.
            </summary>
            <typeparam name="TEdge">
                The type of edge to add.
            </typeparam>
            <param name="edge">
                The edge to add.
            </param>
            <param name="init">
                An optional edge initializer delegate.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Edges.Collections.DotEdgeCollection.Add(System.String,System.String,System.Action{GiGraph.Dot.Entities.Edges.DotEdge})">
            <summary>
                Adds an edge that joins the two specified nodes.
            </summary>
            <param name="tailNodeId">
                The tail node identifier.
            </param>
            <param name="headNodeId">
                The head node identifier.
            </param>
            <param name="init">
                An optional edge initializer delegate.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Edges.Collections.DotEdgeCollection.Add(GiGraph.Dot.Entities.Edges.Endpoints.DotEndpoint,GiGraph.Dot.Entities.Edges.Endpoints.DotEndpoint,System.Action{GiGraph.Dot.Entities.Edges.DotEdge})">
            <summary>
                Adds an edge that joins the two specified endpoints.
            </summary>
            <param name="tail">
                The tail node identifier (note that if you want to specify a cluster as a tail, use <see cref="T:GiGraph.Dot.Entities.Edges.Endpoints.DotClusterEndpoint" />).
            </param>
            <param name="head">
                The head node identifier (note that if you want to specify a cluster as a head, use <see cref="T:GiGraph.Dot.Entities.Edges.Endpoints.DotClusterEndpoint" />).
            </param>
            <param name="init">
                An optional edge initializer delegate.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Edges.Collections.DotEdgeCollection.Add``2(``0,``1,System.Action{GiGraph.Dot.Entities.Edges.DotEdge{``0,``1}})">
            <summary>
                Adds an edge that joins the specified endpoints or groups of endpoints.
            </summary>
            <param name="tail">
                The tail node identifier. Use <see cref="T:GiGraph.Dot.Entities.Edges.Endpoints.DotEndpoint" /> for a node as a tail, <see cref="T:GiGraph.Dot.Entities.Edges.Endpoints.DotClusterEndpoint" /> for a
                cluster as a tail, <see cref="T:GiGraph.Dot.Entities.Edges.Endpoints.DotEndpointGroup" /> for a group of nodes as tails, or <see cref="T:GiGraph.Dot.Entities.Edges.Endpoints.DotSubgraphEndpoint" /> for a
                subgraph whose nodes will be used as tails.
            </param>
            <param name="head">
                The head node identifier. Use <see cref="T:GiGraph.Dot.Entities.Edges.Endpoints.DotEndpoint" /> for a node as a head, <see cref="T:GiGraph.Dot.Entities.Edges.Endpoints.DotClusterEndpoint" /> for a
                cluster as a head, <see cref="T:GiGraph.Dot.Entities.Edges.Endpoints.DotEndpointGroup" /> for a group of nodes as heads, or <see cref="T:GiGraph.Dot.Entities.Edges.Endpoints.DotSubgraphEndpoint" /> for a
                subgraph whose nodes will be used as heads.
            </param>
            <param name="init">
                An optional edge initializer delegate.
            </param>
            <typeparam name="TTail">
                The type of the tail endpoint.
            </typeparam>
            <typeparam name="THead">
                The type of the head endpoint.
            </typeparam>
        </member>
        <member name="M:GiGraph.Dot.Entities.Edges.Collections.DotEdgeCollection.AddLoop(System.String,System.Action{GiGraph.Dot.Entities.Edges.DotEdge})">
            <summary>
                Adds a loop edge that joins the specified node to itself.
            </summary>
            <param name="nodeId">
                The node identifier.
            </param>
            <param name="init">
                An optional edge initializer delegate.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Edges.Collections.DotEdgeCollection.AddLoop(GiGraph.Dot.Entities.Edges.Endpoints.DotEndpoint,System.Action{GiGraph.Dot.Entities.Edges.DotEdge})">
            <summary>
                Adds a loop edge that joins the specified node to itself.
            </summary>
            <param name="endpoint">
                The endpoint to add.
            </param>
            <param name="init">
                An optional edge initializer delegate.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Edges.Collections.DotEdgeCollection.AddManyToMany(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Action{GiGraph.Dot.Entities.Edges.DotEdge{GiGraph.Dot.Entities.Edges.Endpoints.DotSubgraphEndpoint,GiGraph.Dot.Entities.Edges.Endpoints.DotSubgraphEndpoint}})">
            <summary>
                Adds a group of edges where all <paramref name="tailNodeIds" /> as tail nodes are joined to all
                <paramref name="headNodeIds" /> as head nodes.
            </summary>
            <param name="tailNodeIds">
                The identifiers of the tail nodes.
            </param>
            <param name="headNodeIds">
                The identifiers of the head nodes.
            </param>
            <param name="init">
                An optional initializer delegate to call for the created edge group.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Edges.Collections.DotEdgeCollection.AddManyToMany(System.Collections.Generic.IEnumerable{System.String},System.String[])">
            <summary>
                Adds a group of edges where all <paramref name="tailNodeIds" /> as tail nodes are joined to all
                <paramref name="headNodeIds" /> as head nodes.
            </summary>
            <param name="tailNodeIds">
                The identifiers of the tail nodes.
            </param>
            <param name="headNodeIds">
                The identifiers of the head nodes.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Edges.Collections.DotEdgeCollection.AddManyToMany(System.Action{GiGraph.Dot.Entities.Edges.DotEdge{GiGraph.Dot.Entities.Edges.Endpoints.DotSubgraphEndpoint,GiGraph.Dot.Entities.Edges.Endpoints.DotSubgraphEndpoint}},System.Collections.Generic.IEnumerable{System.String},System.String[])">
            <summary>
                Adds a group of edges where all <paramref name="tailNodeIds" /> as tail nodes are joined to all
                <paramref name="headNodeIds" /> as head nodes.
            </summary>
            <param name="init">
                An optional initializer delegate to call for the created edge group.
            </param>
            <param name="tailNodeIds">
                The identifiers of the tail nodes.
            </param>
            <param name="headNodeIds">
                The identifiers of the head nodes.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Edges.Collections.DotEdgeCollection.AddManyToMany(GiGraph.Dot.Entities.Edges.Endpoints.DotEndpointGroup,GiGraph.Dot.Entities.Edges.Endpoints.DotEndpointGroup,System.Action{GiGraph.Dot.Entities.Edges.DotEdge{GiGraph.Dot.Entities.Edges.Endpoints.DotEndpointGroup,GiGraph.Dot.Entities.Edges.Endpoints.DotEndpointGroup}})">
            <summary>
                Adds a group of edges where all nodes in the specified tail endpoint group are joined to all nodes in the specified head
                endpoint group.
            </summary>
            <param name="tails">
                The group whose endpoints to use as tails
            </param>
            <param name="heads">
                The group whose endpoints to use as heads.
            </param>
            <param name="init">
                An optional initializer delegate to call for the created edge group.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Edges.Collections.DotEdgeCollection.AddManyToMany(GiGraph.Dot.Entities.Edges.Endpoints.DotSubgraphEndpoint,GiGraph.Dot.Entities.Edges.Endpoints.DotSubgraphEndpoint,System.Action{GiGraph.Dot.Entities.Edges.DotEdge{GiGraph.Dot.Entities.Edges.Endpoints.DotSubgraphEndpoint,GiGraph.Dot.Entities.Edges.Endpoints.DotSubgraphEndpoint}})">
            <summary>
                Adds a group of edges where all nodes in the specified tail subgraph are joined to all nodes in the specified head subgraph.
            </summary>
            <param name="tails">
                The subgraph whose nodes to use as tail endpoints.
            </param>
            <param name="heads">
                The subgraph whose nodes to use as head endpoints.
            </param>
            <param name="init">
                An optional initializer delegate to call for the created edge group.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Edges.Collections.DotEdgeCollection.AddManyToMany(GiGraph.Dot.Entities.Subgraphs.DotSubgraph,GiGraph.Dot.Entities.Subgraphs.DotSubgraph,System.Action{GiGraph.Dot.Entities.Edges.DotEdge{GiGraph.Dot.Entities.Edges.Endpoints.DotSubgraphEndpoint,GiGraph.Dot.Entities.Edges.Endpoints.DotSubgraphEndpoint}})">
            <summary>
                Adds a group of edges where all nodes in the specified tail subgraph are joined to all nodes in the specified head subgraph.
            </summary>
            <param name="tails">
                The subgraph whose nodes to use as tail endpoints.
            </param>
            <param name="heads">
                The subgraph whose nodes to use as head endpoints.
            </param>
            <param name="init">
                An optional initializer delegate to call for the created edge group.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Edges.Collections.DotEdgeCollection.AddManyToOne(System.String,System.String[])">
            <summary>
                Adds a group of edges where all <paramref name="tailNodeIds" /> as tail nodes are joined to the
                <paramref name="headNodeId" /> as the head node.
            </summary>
            <param name="headNodeId">
                The identifier of the head node.
            </param>
            <param name="tailNodeIds">
                The identifiers of the tail nodes.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Edges.Collections.DotEdgeCollection.AddManyToOne(System.Action{GiGraph.Dot.Entities.Edges.DotEdge{GiGraph.Dot.Entities.Edges.Endpoints.DotSubgraphEndpoint,GiGraph.Dot.Entities.Edges.Endpoints.DotEndpoint}},System.String,System.String[])">
            <summary>
                Adds a group of edges where all <paramref name="tailNodeIds" /> as tail nodes are joined to the
                <paramref name="headNodeId" /> as the head node.
            </summary>
            <param name="init">
                An optional initializer delegate to call for the created edge group.
            </param>
            <param name="headNodeId">
                The identifier of the head node.
            </param>
            <param name="tailNodeIds">
                The identifiers of the tail nodes.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Edges.Collections.DotEdgeCollection.AddManyToOne(System.Collections.Generic.IEnumerable{System.String},System.String,System.Action{GiGraph.Dot.Entities.Edges.DotEdge{GiGraph.Dot.Entities.Edges.Endpoints.DotSubgraphEndpoint,GiGraph.Dot.Entities.Edges.Endpoints.DotEndpoint}})">
            <summary>
                Adds a group of edges where all <paramref name="tailNodeIds" /> as tail nodes are joined to the
                <paramref name="headNodeId" /> as the head node.
            </summary>
            <param name="tailNodeIds">
                The identifiers of the tail nodes.
            </param>
            <param name="headNodeId">
                The identifier of the head node.
            </param>
            <param name="init">
                An optional initializer delegate to call for the created edge group.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Edges.Collections.DotEdgeCollection.AddManyToOne(GiGraph.Dot.Entities.Edges.Endpoints.DotEndpointGroup,GiGraph.Dot.Entities.Edges.Endpoints.DotEndpoint,System.Action{GiGraph.Dot.Entities.Edges.DotEdge{GiGraph.Dot.Entities.Edges.Endpoints.DotEndpointGroup,GiGraph.Dot.Entities.Edges.Endpoints.DotEndpoint}})">
            <summary>
                Adds a group of edges where all nodes in the specified tail endpoint group are joined to specified head endpoint.
            </summary>
            <param name="tails">
                The group whose endpoints to use as tails.
            </param>
            <param name="head">
                The head node (note that if you want to specify a cluster as a head, use <see cref="T:GiGraph.Dot.Entities.Edges.Endpoints.DotClusterEndpoint" />).
            </param>
            <param name="init">
                An optional initializer delegate to call for the created edge group.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Edges.Collections.DotEdgeCollection.AddManyToOne(GiGraph.Dot.Entities.Edges.Endpoints.DotSubgraphEndpoint,GiGraph.Dot.Entities.Edges.Endpoints.DotEndpoint,System.Action{GiGraph.Dot.Entities.Edges.DotEdge{GiGraph.Dot.Entities.Edges.Endpoints.DotSubgraphEndpoint,GiGraph.Dot.Entities.Edges.Endpoints.DotEndpoint}})">
            <summary>
                Adds a group of edges where all nodes in the specified tail subgraph are joined to the specified head endpoint.
            </summary>
            <param name="tails">
                The subgraph whose nodes to use as tail endpoints.
            </param>
            <param name="head">
                The head node (note that if you want to specify a cluster as a head, use <see cref="T:GiGraph.Dot.Entities.Edges.Endpoints.DotClusterEndpoint" />).
            </param>
            <param name="init">
                An optional initializer delegate to call for the created edge group.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Edges.Collections.DotEdgeCollection.AddManyToOne(GiGraph.Dot.Entities.Subgraphs.DotSubgraph,System.String,System.Action{GiGraph.Dot.Entities.Edges.DotEdge{GiGraph.Dot.Entities.Edges.Endpoints.DotSubgraphEndpoint,GiGraph.Dot.Entities.Edges.Endpoints.DotEndpoint}})">
            <summary>
                Adds a group of edges where all nodes in the specified tail subgraph are joined to specified head endpoint.
            </summary>
            <param name="tails">
                The subgraph whose nodes to use as tail endpoints.
            </param>
            <param name="headNodeId">
                The identifier of the head node.
            </param>
            <param name="init">
                An optional initializer delegate to call for the created edge group.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Edges.Collections.DotEdgeCollection.AddOneToMany(System.String,System.String[])">
            <summary>
                Adds a group of edges where the <paramref name="tailNodeId" /> as the tail node is joined to all
                <paramref name="headNodeIds" /> as the head nodes.
            </summary>
            <param name="tailNodeId">
                The identifier of the tail node.
            </param>
            <param name="headNodeIds">
                The identifiers of the head nodes.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Edges.Collections.DotEdgeCollection.AddOneToMany(System.Action{GiGraph.Dot.Entities.Edges.DotEdge{GiGraph.Dot.Entities.Edges.Endpoints.DotEndpoint,GiGraph.Dot.Entities.Edges.Endpoints.DotSubgraphEndpoint}},System.String,System.String[])">
            <summary>
                Adds a group of edges where the <paramref name="tailNodeId" /> as the tail node is joined to all
                <paramref name="headNodeIds" /> as the head nodes.
            </summary>
            <param name="init">
                An optional initializer delegate to call for the created edge group.
            </param>
            <param name="tailNodeId">
                The identifier of the tail node.
            </param>
            <param name="headNodeIds">
                The identifiers of the head nodes.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Edges.Collections.DotEdgeCollection.AddOneToMany(System.String,System.Collections.Generic.IEnumerable{System.String},System.Action{GiGraph.Dot.Entities.Edges.DotEdge{GiGraph.Dot.Entities.Edges.Endpoints.DotEndpoint,GiGraph.Dot.Entities.Edges.Endpoints.DotSubgraphEndpoint}})">
            <summary>
                Adds a group of edges where the <paramref name="tailNodeId" /> as the tail node is joined to all
                <paramref name="headNodeIds" /> as the head nodes.
            </summary>
            <param name="tailNodeId">
                The identifier of the tail node.
            </param>
            <param name="headNodeIds">
                The identifiers of the head nodes.
            </param>
            <param name="init">
                An optional initializer delegate to call for the created edge group.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Edges.Collections.DotEdgeCollection.AddOneToMany(GiGraph.Dot.Entities.Edges.Endpoints.DotEndpoint,GiGraph.Dot.Entities.Edges.Endpoints.DotEndpointGroup,System.Action{GiGraph.Dot.Entities.Edges.DotEdge{GiGraph.Dot.Entities.Edges.Endpoints.DotEndpoint,GiGraph.Dot.Entities.Edges.Endpoints.DotEndpointGroup}})">
            <summary>
                Adds a group of edges where the tail endpoint is joined to all nodes in the specified head endpoint group.
            </summary>
            <param name="tail">
                The tail node (note that if you want to specify a cluster as a tail, use <see cref="T:GiGraph.Dot.Entities.Edges.Endpoints.DotClusterEndpoint" />).
            </param>
            <param name="heads">
                The group whose endpoints to use as heads.
            </param>
            <param name="init">
                An optional initializer delegate to call for the created edge group.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Edges.Collections.DotEdgeCollection.AddOneToMany(GiGraph.Dot.Entities.Edges.Endpoints.DotEndpoint,GiGraph.Dot.Entities.Edges.Endpoints.DotSubgraphEndpoint,System.Action{GiGraph.Dot.Entities.Edges.DotEdge{GiGraph.Dot.Entities.Edges.Endpoints.DotEndpoint,GiGraph.Dot.Entities.Edges.Endpoints.DotSubgraphEndpoint}})">
            <summary>
                Adds a group of edges where the tail endpoint is joined to all nodes in the specified head subgraph.
            </summary>
            <param name="tail">
                The tail node (note that if you want to specify a cluster as a tail, use <see cref="T:GiGraph.Dot.Entities.Edges.Endpoints.DotClusterEndpoint" />).
            </param>
            <param name="heads">
                The subgraph whose nodes to use as head endpoints.
            </param>
            <param name="init">
                An optional initializer delegate to call for the created edge group.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Edges.Collections.DotEdgeCollection.AddOneToMany(System.String,GiGraph.Dot.Entities.Subgraphs.DotSubgraph,System.Action{GiGraph.Dot.Entities.Edges.DotEdge{GiGraph.Dot.Entities.Edges.Endpoints.DotEndpoint,GiGraph.Dot.Entities.Edges.Endpoints.DotSubgraphEndpoint}})">
            <summary>
                Adds a group of edges where the tail endpoint is joined to all nodes in the specified head subgraph.
            </summary>
            <param name="tailNodeId">
                The identifier of the tail node.
            </param>
            <param name="heads">
                The subgraph whose nodes to use as head endpoints.
            </param>
            <param name="init">
                An optional initializer delegate to call for the created edge group.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Edges.Collections.DotEdgeCollection.AddSequence(System.String[])">
            <summary>
                Adds a sequence of edges that join specified nodes consecutively. At least a pair of identifiers has to be provided.
            </summary>
            <param name="nodeIds">
                The identifiers of consecutive nodes to connect with edges (at least a pair is required).
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Edges.Collections.DotEdgeCollection.AddSequence(System.Action{GiGraph.Dot.Entities.Edges.DotEdgeSequence},System.String[])">
            <summary>
                Adds a sequence of edges that join specified nodes consecutively. At least a pair of identifiers has to be provided.
            </summary>
            <param name="init">
                An optional initializer delegate to call for the created sequence.
            </param>
            <param name="nodeIds">
                The identifiers of consecutive nodes to connect with edges (at least a pair is required).
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Edges.Collections.DotEdgeCollection.AddSequence(System.Collections.Generic.IEnumerable{System.String},System.Action{GiGraph.Dot.Entities.Edges.DotEdgeSequence})">
            <summary>
                Adds a sequence of edges that join specified nodes consecutively. At least a pair of identifiers has to be provided.
            </summary>
            <param name="nodeIds">
                The identifiers of consecutive nodes to connect with edges (at least a pair is required).
            </param>
            <param name="init">
                An optional initializer delegate to call for the created sequence.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Edges.Collections.DotEdgeCollection.AddSequence(GiGraph.Dot.Entities.Edges.Endpoints.DotEndpointDefinition[])">
            <summary>
                Adds a sequence of edges that connect the specified endpoints consecutively. At least a pair of endpoints has to be provided.
            </summary>
            <param name="endpoints">
                The endpoints to initialize the instance with (at least a pair is required).
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Edges.Collections.DotEdgeCollection.AddSequence(System.Action{GiGraph.Dot.Entities.Edges.DotEdgeSequence},GiGraph.Dot.Entities.Edges.Endpoints.DotEndpointDefinition[])">
            <summary>
                Adds a sequence of edges that connect the specified endpoints consecutively. At least a pair of endpoints has to be provided.
            </summary>
            <param name="init">
                An optional initializer delegate to call for the created sequence.
            </param>
            <param name="endpoints">
                The endpoints to initialize the instance with (at least a pair is required).
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Edges.Collections.DotEdgeCollection.AddSequence(System.Collections.Generic.IEnumerable{GiGraph.Dot.Entities.Edges.Endpoints.DotEndpointDefinition},System.Action{GiGraph.Dot.Entities.Edges.DotEdgeSequence})">
            <summary>
                Adds a sequence of edges that connect the specified endpoints consecutively. At least a pair of endpoints has to be provided.
            </summary>
            <param name="endpoints">
                The endpoints to initialize the instance with (at least a pair is required).
            </param>
            <param name="init">
                An optional initializer delegate to call for the created sequence.
            </param>
        </member>
        <member name="T:GiGraph.Dot.Entities.Edges.DotEdge">
            <summary>
                Represents an edge (joins two endpoints).
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Edges.DotEdge.#ctor(GiGraph.Dot.Entities.Edges.Endpoints.DotEndpoint,GiGraph.Dot.Entities.Edges.Endpoints.DotEndpoint)">
            <summary>
                Creates a new edge.
            </summary>
            <param name="tail">
                The tail endpoint.
            </param>
            <param name="head">
                The head endpoint.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Edges.DotEdge.#ctor(System.String,System.String)">
            <summary>
                Creates a new edge.
            </summary>
            <param name="tailNodeId">
                The identifier of the tail node.
            </param>
            <param name="headNodeId">
                The identifier of the head node.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Edges.DotEdge.#ctor(System.String)">
            <summary>
                Creates a new loop edge.
            </summary>
            <param name="nodeId">
                The identifier of the node.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Edges.DotEdge.#ctor(GiGraph.Dot.Entities.Edges.Endpoints.DotEndpoint)">
            <summary>
                Creates a new loop edge.
            </summary>
            <param name="endpoint">
                The endpoint (note that if you want to specify a cluster as an endpoint, use <see cref="T:GiGraph.Dot.Entities.Edges.Endpoints.DotClusterEndpoint" />).
            </param>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.DotEdge.IsLoop">
            <summary>
                Indicates if the edge is a loop.
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Edges.DotEdge.Loops(System.String)">
            <summary>
                Determines whether the edge joins the specified endpoint to itself.
            </summary>
            <param name="endpointId">
                The identifier of the endpoint to check.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Edges.DotEdge.Loops(GiGraph.Dot.Entities.Edges.Endpoints.DotEndpoint)">
            <summary>
                Determines whether the edge joins the specified endpoint to itself.
            </summary>
            <param name="endpoint">
                The endpoint to check (note that if you want to check a cluster as an endpoint, use <see cref="T:GiGraph.Dot.Entities.Edges.Endpoints.DotClusterEndpoint" />).
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Edges.DotEdge.Equals(System.String,System.String)">
            <summary>
                Determines whether the edge joins the specified endpoints.
            </summary>
            <param name="tailId">
                The identifier of the tail endpoint to check.
            </param>
            <param name="headId">
                The identifier of the head endpoint to check.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Edges.DotEdge.Equals(GiGraph.Dot.Entities.Edges.Endpoints.DotEndpoint,GiGraph.Dot.Entities.Edges.Endpoints.DotEndpoint)">
            <summary>
                Determines whether the edge joins the specified endpoints.
            </summary>
            <param name="tail">
                The identifier of the tail endpoint to check.
            </param>
            <param name="head">
                The identifier of the head endpoint to check.
            </param>
        </member>
        <member name="T:GiGraph.Dot.Entities.Edges.DotEdge`2">
            <summary>
                Represents:
                <list type="bullet">
                    <item>
                        <description>
                            an edge that joins two nodes, when <typeparamref name="TTail" /> and <typeparamref name="THead" /> are both of
                            <see cref="T:GiGraph.Dot.Entities.Edges.Endpoints.DotEndpoint" /> type,
                        </description>
                    </item>
                    <item>
                        <description>
                            a group of edges that join one <typeparamref name="TTail" /> <see cref="T:GiGraph.Dot.Entities.Edges.Endpoints.DotEndpoint" /> node to multiple
                            <typeparamref name="THead" /> <see cref="T:GiGraph.Dot.Entities.Edges.Endpoints.DotSubgraphEndpoint" /> or <see cref="T:GiGraph.Dot.Entities.Edges.Endpoints.DotEndpointGroup" /> nodes,
                        </description>
                    </item>
                    <item>
                        <description>
                            a group of edges that join multiple <typeparamref name="TTail" /> <see cref="T:GiGraph.Dot.Entities.Edges.Endpoints.DotSubgraphEndpoint" /> or
                            <see cref="T:GiGraph.Dot.Entities.Edges.Endpoints.DotEndpointGroup" /> nodes to one <typeparamref name="THead" /> <see cref="T:GiGraph.Dot.Entities.Edges.Endpoints.DotEndpoint" /> node,
                        </description>
                    </item>
                    <item>
                        <description>
                            a group of edges that join multiple <typeparamref name="TTail" /> <see cref="T:GiGraph.Dot.Entities.Edges.Endpoints.DotSubgraphEndpoint" /> or
                            <see cref="T:GiGraph.Dot.Entities.Edges.Endpoints.DotEndpointGroup" /> nodes to multiple <typeparamref name="THead" />
                            <see cref="T:GiGraph.Dot.Entities.Edges.Endpoints.DotSubgraphEndpoint" /> or <see cref="T:GiGraph.Dot.Entities.Edges.Endpoints.DotEndpointGroup" /> nodes.
                        </description>
                    </item>
                </list>
            </summary>
            <typeparam name="TTail">
                The type of the tail endpoint.
            </typeparam>
            <typeparam name="THead">
                The type of the head endpoint.
            </typeparam>
        </member>
        <member name="M:GiGraph.Dot.Entities.Edges.DotEdge`2.#ctor(`0,`1)">
            <summary>
                Creates a new edge instance.
            </summary>
            <param name="tail">
                The tail endpoint.
            </param>
            <param name="head">
                The head endpoint.
            </param>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.DotEdge`2.Tail">
            <summary>
                Gets the tail endpoint.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.DotEdge`2.Head">
            <summary>
                Gets the head endpoint.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.DotEdgeDefinition.Font">
            <summary>
                Font attributes.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.DotEdgeDefinition.EndpointLabels">
            <summary>
                Attributes applied to labels specified for the head and the tail of the edge.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.DotEdgeDefinition.EdgeHyperlink">
            <summary>
                Hyperlink attributes applied to the non-label parts of the edge.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.DotEdgeDefinition.LabelHyperlink">
            <summary>
                Hyperlink attributes applied to the label of the edge.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.DotEdgeDefinition.Style">
            <summary>
                Style options.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.DotEdgeDefinition.SvgStyleSheet">
            <summary>
                Style sheet attributes used for SVG output.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.DotEdgeDefinition.Hyperlink">
            <summary>
                Hyperlink attributes.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.DotEdgeDefinition.Label">
            <summary>
                <para>
                    Gets or sets the label to display next to the edge. It may be plain text (<see cref="T:System.String" />) or HTML (
                    <see cref="T:GiGraph.Dot.Types.Html.DotHtmlString" />). See also <see cref="T:GiGraph.Dot.Types.EscapeString.DotFormattedTextBuilder" /> for text justification and simple
                    formatting and <see cref="T:GiGraph.Dot.Entities.Html.Builder.DotHtmlBuilder" /> for custom text styling and defining tables. The latter one gives the most
                    possibilities (specifying font, size, color, style, images, etc.).
                </para>
                <para>
                    Examples:
                    <list type="bullet">
                        <item>
                            <description>
                                <see cref="P:GiGraph.Dot.Entities.Edges.Attributes.IDotEdgeAttributes.Label" /> = "My label";
                            </description>
                        </item>
                        <item>
                            <description>
                                <see cref="P:GiGraph.Dot.Entities.Edges.Attributes.IDotEdgeAttributes.Label" /> = new <see cref="T:GiGraph.Dot.Entities.Html.Font.Styles.DotHtmlBold" />("My label");
                            </description>
                        </item>
                        <item>
                            <description>
                                <see cref="P:GiGraph.Dot.Entities.Edges.Attributes.IDotEdgeAttributes.Label" /> = (<see cref="T:GiGraph.Dot.Types.Html.DotHtmlString" />) "&lt;b&gt;My label&lt;/b&gt;";
                            </description>
                        </item>
                    </list>
                </para>
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.DotEdgeDefinition.ExternalLabel">
            <summary>
                <para>
                    External label for the edge. The label will be placed near the center of the edge. This can be useful in dot to avoid the
                    occasional problem when the use of edge labels distorts the layout. For other layouts, this attribute can be viewed as a
                    synonym for the <see cref="P:GiGraph.Dot.Entities.Edges.Attributes.IDotEdgeAttributes.Label" /> attribute.
                </para>
                <para>
                    These labels are added after all nodes and edges have been placed. The labels will be placed so that they do not overlap
                    any node or label. This means it may not be possible to place all of them. To force placing all of them, use the
                    <see cref="P:GiGraph.Dot.Entities.Graphs.Attributes.DotGraphLayoutAttributes.ForceExternalLabels" /> attribute on the graph.
                </para>
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.DotEdgeDefinition.AllowLabelFloat">
            <summary>
                If true, allows edge labels to be less constrained in position. In particular, it may appear on top of other edges. Default:
                false.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.DotEdgeDefinition.MinLength">
            <summary>
                Minimum edge length (rank difference between head and tail). Dot only, default: 1, minimum: 0.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.DotEdgeDefinition.Length">
            <summary>
                Preferred edge length, in inches (fdp, neato only). Default: 1.0 (neato), 0.3 (fdp).
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.DotEdgeDefinition.Weight">
            <summary>
                Weight of the edge. In dot, the heavier the weight, the shorter, straighter and more vertical the edge is. Note that weights
                in dot must be integers. For twopi, a weight of 0 indicates the edge should not be used in constructing a spanning tree from
                the root. For other layouts, a larger weight encourages the layout to make the edge length closer to that specified by the
                <see cref="P:GiGraph.Dot.Entities.Edges.Attributes.IDotEdgeAttributes.Length" /> attribute. Default: 1. Minimum: 0 [int] (dot, twopi), 1 [double] (neato, fdp).
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.DotEdgeDefinition.Tooltip">
            <summary>
                Tooltip annotation attached to the edge (svg, cmap only). If unset, Graphviz will use the <see cref="P:GiGraph.Dot.Entities.Edges.Attributes.IDotEdgeAttributes.Label" /> attribute if
                defined.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.DotEdgeDefinition.Color">
            <summary>
                <para>
                    Gets or sets the color to use for the edge (default: <see cref="P:System.Drawing.Color.Black" />).
                </para>
                <para>
                    If <see cref="T:GiGraph.Dot.Types.Colors.DotMultiColor" /> is used, with no weighted colors in its color collection (<see cref="T:GiGraph.Dot.Types.Colors.DotColor" /> items
                    only), the edge is drawn using parallel splines or lines, one for each color in the list, in the order given. The head
                    arrow, if any, is drawn using the first color in the list, and the tail arrow, if any, the second color. This supports
                    the common case of drawing opposing edges, but using parallel splines instead of separately routed multiedges.
                </para>
                <para>
                    If <see cref="T:GiGraph.Dot.Types.Colors.DotMultiColor" /> is used with at least one weighted color (<see cref="T:GiGraph.Dot.Types.Colors.DotWeightedColor" />), the colors
                    are drawn in series, with each color being given roughly its specified fraction of the edge, expressed by the
                    <see cref="P:GiGraph.Dot.Types.Colors.DotWeightedColor.Weight" /> property.
                </para>
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.DotEdgeDefinition.FillColor">
            <summary>
                Gets or sets the color used to fill the arrowhead, assuming it has a filled style. If <see cref="P:GiGraph.Dot.Entities.Edges.Attributes.IDotEdgeAttributes.FillColor" /> is not
                defined, <see cref="P:GiGraph.Dot.Entities.Edges.Attributes.IDotEdgeAttributes.Color" /> is used. If it is not defined too, the default is used, except when the output format is MIF,
                which use black by default.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.DotEdgeDefinition.ColorScheme">
            <summary>
                Specifies a color scheme namespace to use. If defined, specifies the context for interpreting color names. If no color scheme
                is set, the standard <see cref="F:GiGraph.Dot.Types.Colors.DotColorSchemes.X11" /> naming is used. For example, if
                <see cref="P:GiGraph.Dot.Types.Colors.DotColorSchemes.DotBrewerColorSchemes.BuGn9" /> Brewer color scheme is used, then a color named "7", e.g.
                Color.FromName("7"), will be evaluated in the context of that specific color scheme. See <see cref="T:GiGraph.Dot.Types.Colors.DotColorSchemes" /> for
                supported scheme names.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.DotEdgeDefinition.Width">
            <summary>
                Specifies the width of the pen, in points, used to draw lines and curves, including the boundaries of edges. The value has no
                effect on text. Default: 1.0, minimum: 0.0.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.DotEdgeDefinition.ArrowheadScale">
            <summary>
                Gets or sets the multiplicative scale factor for arrowheads (default: 1.0, minimum: 0.0).
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.DotEdgeDefinition.Directions">
            <summary>
                <para>
                    Gets or sets edge type for drawing arrowheads. Default: <see cref="F:GiGraph.Dot.Types.Edges.DotEdgeDirections.Forward" /> (for directed graphs),
                    <see cref="F:GiGraph.Dot.Types.Edges.DotEdgeDirections.None" /> (for undirected graphs).
                </para>
                <para>
                    Indicates which ends of the edge should be decorated with an arrowhead. The actual style of the arrowhead may be
                    specified using the <see cref="P:GiGraph.Dot.Entities.Edges.Endpoints.Attributes.IDotEdgeEndpointAttributes.Arrowhead" /> attribute on the head or tail of the edge.
                </para>
                <para>
                    A glyph is drawn at the head end of the edge if and only if the direction is <see cref="F:GiGraph.Dot.Types.Edges.DotEdgeDirections.Forward" /> or
                    <see cref="F:GiGraph.Dot.Types.Edges.DotEdgeDirections.Both" />.
                </para>
                <para>
                    A glyph is drawn at the tail end of the edge if and only if the direction is <see cref="F:GiGraph.Dot.Types.Edges.DotEdgeDirections.Backward" /> or
                    <see cref="F:GiGraph.Dot.Types.Edges.DotEdgeDirections.Both" />.
                </para>
                <para>
                    For undirected edges T -- H, one of the nodes, usually the right hand one, is treated as the head for the purpose of
                    interpreting <see cref="F:GiGraph.Dot.Types.Edges.DotEdgeDirections.Forward" /> and <see cref="F:GiGraph.Dot.Types.Edges.DotEdgeDirections.Backward" />.
                </para>
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.DotEdgeDefinition.AttachLabel">
            <summary>
                If true, attaches label to the edge by a 2-segment polyline, underlining the label, then going to the closest point of
                spline. Default: false.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.DotEdgeDefinition.Constrain">
            <summary>
                If false, the edge is not used in ranking the nodes (dot only, default: true). See
                <see href="http://www.graphviz.org/doc/info/attrs.html#a:constraint">
                    documentation
                </see>
                for more details.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.DotEdgeDefinition.Comment">
            <summary>
                Comments are inserted into output. Device-dependent.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.DotEdgeDefinition.ObjectId">
            <summary>
                <para>
                    Allows the graph author to provide an identifier for graph objects which is to be included in the output (svg,
                    postscript, map only).
                </para>
                <para>
                    Normal <see cref="F:GiGraph.Dot.Types.EscapeString.DotEscapeString.NodeId" />, <see cref="F:GiGraph.Dot.Types.EscapeString.DotEscapeString.EdgeDefinition" />,
                    <see cref="F:GiGraph.Dot.Types.EscapeString.DotEscapeString.GraphId" /> substitutions can be applied (see <see cref="T:GiGraph.Dot.Types.EscapeString.DotFormattedTextBuilder" />). Note,
                    however, that <see cref="F:GiGraph.Dot.Types.EscapeString.DotEscapeString.EdgeDefinition" /> does not provide a unique ID for multi-edges.
                </para>
                <para>
                    If provided, it is the responsibility of the provider to keep ID values unique for its intended downstream use. If no ID
                    attribute is provided, then a unique internal ID is used. However, this value is unpredictable by the graph writer.
                </para>
                <para>
                    If the graph provides an ID attribute, this will be used as a prefix for internally generated attributes. By making
                    internally-used attributes distinct, the user can include multiple image maps in the same document.
                </para>
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.DotEdgeDefinition.Attributes">
            <summary>
                Provides access to the attributes of the edge.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.DotEdgeDefinition.Endpoints">
            <summary>
                Gets the endpoints of the edge.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.DotEdgeDefinition.Annotation">
            <summary>
                The annotation to write in the output DOT script as a comment in the context of the element or section represented by the
                current object.
            </summary>
        </member>
        <member name="T:GiGraph.Dot.Entities.Edges.DotEdgeSequence">
            <summary>
                Represents a sequence of edges that join a specified sequence of endpoints.
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Edges.DotEdgeSequence.#ctor(GiGraph.Dot.Entities.Edges.Endpoints.DotEndpointDefinition[])">
            <summary>
                Creates a new edge sequence initialized with the specified endpoints. At least a pair of endpoints has to be provided.
            </summary>
            <param name="endpoints">
                The endpoints to initialize the instance with.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Edges.DotEdgeSequence.#ctor(System.Collections.Generic.IEnumerable{GiGraph.Dot.Entities.Edges.Endpoints.DotEndpointDefinition})">
            <summary>
                Creates a new edge sequence initialized with the specified endpoints. At least a pair of endpoints has to be provided.
            </summary>
            <param name="endpoints">
                The endpoints to initialize the instance with.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Edges.DotEdgeSequence.#ctor(System.String[])">
            <summary>
                Creates a new edge sequence initialized with the specified node identifiers. At least a pair of identifiers has to be
                provided.
            </summary>
            <param name="nodeIds">
                The node identifiers to initialize the instance with.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Edges.DotEdgeSequence.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Creates a new edge sequence initialized with the specified node identifiers. At least a pair of identifiers has to be
                provided.
            </summary>
            <param name="nodeIds">
                The node identifiers to initialize the instance with.
            </param>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.DotEdgeSequence.Heads">
            <summary>
                Attributes applied to the heads of the edges in this sequence.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.DotEdgeSequence.Tails">
            <summary>
                Attributes applied to the tails of the edges in this sequence.
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Edges.DotEdgeSequence.FromNodes(System.Action{GiGraph.Dot.Entities.Edges.Endpoints.DotEndpoint},System.String[])">
            <summary>
                Creates a new edge sequence initialized with the specified node identifiers. At least a pair of identifiers has to be
                provided.
            </summary>
            <param name="nodeIds">
                The node identifiers to initialize the instance with.
            </param>
            <param name="initEndpoint">
                An optional endpoint initializer to call for each created endpoint.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Edges.DotEdgeSequence.FromNodes(System.Collections.Generic.IEnumerable{System.String},System.Action{GiGraph.Dot.Entities.Edges.Endpoints.DotEndpoint})">
            <summary>
                Creates a new edge sequence initialized with the specified node identifiers. At least a pair of identifiers has to be
                provided.
            </summary>
            <param name="nodeIds">
                The node identifiers to initialize the instance with.
            </param>
            <param name="initEndpoint">
                An optional endpoint initializer to call for each created endpoint.
            </param>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Endpoints.Attributes.DotEdgeEndpointAttributes.Hyperlink">
            <summary>
                Hyperlink attributes of the endpoint of the edge. If defined, the hyperlink is output as part of the endpoint's
                <see cref="P:GiGraph.Dot.Entities.Edges.Endpoints.Attributes.IDotEdgeEndpointAttributes.Label" />. Also, this value is used near the endpoint, overriding hyperlink attributes
                set on the edge.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Endpoints.Attributes.DotEdgeEndpointAttributes.Label">
            <summary>
                The text label to be placed near the endpoint of the edge.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Endpoints.Attributes.DotEdgeEndpointAttributes.ClipToNodeBoundary">
            <summary>
                If true (default), the end of the edge is clipped to node boundary; otherwise, it goes to the center of the node, or the
                center of a port, if applicable.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Endpoints.Attributes.DotEdgeEndpointAttributes.GroupName">
            <summary>
                When specified, edges with the same endpoint and the same group name are aimed at the same point on that endpoint (dot only).
                This has no effect on loops. Each node may have at most 5 unique group names specified.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Endpoints.Attributes.DotEdgeEndpointAttributes.Port">
            <summary>
                Indicates where on the node to attach the end of the edge. In the default case (<see cref="F:GiGraph.Dot.Types.Edges.DotCompassPoint.Center" />), the
                edge is aimed towards the center of the node, and then clipped at the node boundary. See also the corresponding
                <see cref="P:GiGraph.Dot.Entities.Edges.Endpoints.DotEndpoint.Port" /> property on the <see cref="P:GiGraph.Dot.Entities.Edges.Endpoints.DotEdgeEndpoint`1.Endpoint" /> of the
                <see cref="P:GiGraph.Dot.Entities.Edges.DotEdge`2.Head" /> or <see cref="P:GiGraph.Dot.Entities.Edges.DotEdge`2.Tail" /> of the edge.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Endpoints.Attributes.DotEdgeEndpointAttributes.ClusterId">
            <summary>
                Logical endpoint of the edge (dot only). When <see cref="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphClustersAttributes.AllowEdgeClipping" /> is true (see
                attributes on the graph's <see cref="P:GiGraph.Dot.Entities.Graphs.DotCommonGraphSection.Clusters" /> collection), if the current property is defined, and
                is the identifier of a cluster containing the real endpoint node, the edge is clipped to the boundary of the cluster.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Endpoints.Attributes.DotEdgeEndpointAttributes.Arrowhead">
            <summary>
                <para>
                    Gets or sets the style of arrowhead at the end of the edge (default: <see cref="F:GiGraph.Dot.Types.Arrowheads.DotArrowheadShape.Normal" />). Appears
                    only if the <see cref="P:GiGraph.Dot.Entities.Edges.Attributes.IDotEdgeAttributes.Directions" /> attribute on the edge is
                    <see cref="F:GiGraph.Dot.Types.Edges.DotEdgeDirections.Forward" /> (when specifying an arrowhead for the head endpoint),
                    <see cref="F:GiGraph.Dot.Types.Edges.DotEdgeDirections.Backward" /> (when specifying an arrowhead for the tail endpoint), or
                    <see cref="F:GiGraph.Dot.Types.Edges.DotEdgeDirections.Both" />.
                </para>
                <para>
                    For basic shapes, assign a value of the <see cref="T:GiGraph.Dot.Types.Arrowheads.DotArrowheadShape" /> enumeration to this property (it will be
                    converted implicitly). For variants of the basic shapes (filled/empty, normal/clipped) use <see cref="T:GiGraph.Dot.Types.Arrowheads.DotArrowhead" />.
                    To generate an arrow composed of multiple arrowheads use <see cref="T:GiGraph.Dot.Types.Arrowheads.DotCompositeArrowhead" />.
                </para>
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Endpoints.Attributes.DotEdgeHeadAttributes.Label">
            <summary>
                The text label to be placed near the endpoint of the edge.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Endpoints.Attributes.DotEdgeHeadAttributes.ClipToNodeBoundary">
            <summary>
                If true (default), the end of the edge is clipped to node boundary; otherwise, it goes to the center of the node, or the
                center of a port, if applicable.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Endpoints.Attributes.DotEdgeHeadAttributes.GroupName">
            <summary>
                When specified, edges with the same endpoint and the same group name are aimed at the same point on that endpoint (dot only).
                This has no effect on loops. Each node may have at most 5 unique group names specified.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Endpoints.Attributes.DotEdgeHeadAttributes.Port">
            <summary>
                Indicates where on the node to attach the end of the edge. In the default case (<see cref="F:GiGraph.Dot.Types.Edges.DotCompassPoint.Center" />), the
                edge is aimed towards the center of the node, and then clipped at the node boundary. See also the corresponding
                <see cref="P:GiGraph.Dot.Entities.Edges.Endpoints.DotEndpoint.Port" /> property on the <see cref="P:GiGraph.Dot.Entities.Edges.Endpoints.DotEdgeEndpoint`1.Endpoint" /> of the
                <see cref="P:GiGraph.Dot.Entities.Edges.DotEdge`2.Head" /> or <see cref="P:GiGraph.Dot.Entities.Edges.DotEdge`2.Tail" /> of the edge.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Endpoints.Attributes.DotEdgeHeadAttributes.ClusterId">
            <summary>
                Logical endpoint of the edge (dot only). When <see cref="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphClustersAttributes.AllowEdgeClipping" /> is true (see
                attributes on the graph's <see cref="P:GiGraph.Dot.Entities.Graphs.DotCommonGraphSection.Clusters" /> collection), if the current property is defined, and
                is the identifier of a cluster containing the real endpoint node, the edge is clipped to the boundary of the cluster.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Endpoints.Attributes.DotEdgeHeadAttributes.Arrowhead">
            <summary>
                <para>
                    Gets or sets the style of arrowhead at the end of the edge (default: <see cref="F:GiGraph.Dot.Types.Arrowheads.DotArrowheadShape.Normal" />). Appears
                    only if the <see cref="P:GiGraph.Dot.Entities.Edges.Attributes.IDotEdgeAttributes.Directions" /> attribute on the edge is
                    <see cref="F:GiGraph.Dot.Types.Edges.DotEdgeDirections.Forward" /> (when specifying an arrowhead for the head endpoint),
                    <see cref="F:GiGraph.Dot.Types.Edges.DotEdgeDirections.Backward" /> (when specifying an arrowhead for the tail endpoint), or
                    <see cref="F:GiGraph.Dot.Types.Edges.DotEdgeDirections.Both" />.
                </para>
                <para>
                    For basic shapes, assign a value of the <see cref="T:GiGraph.Dot.Types.Arrowheads.DotArrowheadShape" /> enumeration to this property (it will be
                    converted implicitly). For variants of the basic shapes (filled/empty, normal/clipped) use <see cref="T:GiGraph.Dot.Types.Arrowheads.DotArrowhead" />.
                    To generate an arrow composed of multiple arrowheads use <see cref="T:GiGraph.Dot.Types.Arrowheads.DotCompositeArrowhead" />.
                </para>
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Endpoints.Attributes.DotEdgeHeadHyperlinkAttributes.Url">
            <summary>
                If defined, it is output as part of the head <see cref="P:GiGraph.Dot.Entities.Edges.Endpoints.Attributes.IDotEdgeEndpointAttributes.Label" /> of the edge (svg, map only).
                Also, this value is used near the head node, overriding any <see cref="P:GiGraph.Dot.Entities.Edges.Attributes.IDotEdgeRootAttributes.Hyperlink" />
                <see cref="P:GiGraph.Dot.Entities.Attributes.Properties.Common.Hyperlink.IDotHyperlinkAttributes.Url" /> set for the edge.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Endpoints.Attributes.DotEdgeHeadHyperlinkAttributes.Href">
            <summary>
                Synonym for <see cref="P:GiGraph.Dot.Entities.Edges.Endpoints.Attributes.DotEdgeHeadHyperlinkAttributes.Url" /> (svg, map only).
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Endpoints.Attributes.DotEdgeHeadHyperlinkAttributes.Target">
            <summary>
                If <see cref="P:GiGraph.Dot.Entities.Edges.Endpoints.Attributes.DotEdgeHeadHyperlinkAttributes.Url" /> is specified, this attribute determines which window of the browser is used for the URL (svg, map
                only). Setting it to <see cref="F:GiGraph.Dot.Types.Hyperlinks.DotHyperlinkTargets.NewWindow" /> will open a new window if it doesn't already exist, or
                reuse it if it does. If undefined, the value of the edge's <see cref="P:GiGraph.Dot.Entities.Edges.Attributes.IDotEdgeRootAttributes.Hyperlink" />
                <see cref="P:GiGraph.Dot.Entities.Attributes.Properties.Common.Hyperlink.IDotHyperlinkAttributes.Target" /> is used.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Endpoints.Attributes.DotEdgeHeadHyperlinkAttributes.Tooltip">
            <summary>
                Tooltip annotation attached to the head of an edge (svg, cmap only). This is used only if <see cref="P:GiGraph.Dot.Entities.Edges.Endpoints.Attributes.DotEdgeHeadHyperlinkAttributes.Url" /> is specified.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Endpoints.Attributes.DotEdgeTailAttributes.Label">
            <summary>
                The text label to be placed near the endpoint of the edge.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Endpoints.Attributes.DotEdgeTailAttributes.ClipToNodeBoundary">
            <summary>
                If true (default), the end of the edge is clipped to node boundary; otherwise, it goes to the center of the node, or the
                center of a port, if applicable.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Endpoints.Attributes.DotEdgeTailAttributes.GroupName">
            <summary>
                When specified, edges with the same endpoint and the same group name are aimed at the same point on that endpoint (dot only).
                This has no effect on loops. Each node may have at most 5 unique group names specified.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Endpoints.Attributes.DotEdgeTailAttributes.Port">
            <summary>
                Indicates where on the node to attach the end of the edge. In the default case (<see cref="F:GiGraph.Dot.Types.Edges.DotCompassPoint.Center" />), the
                edge is aimed towards the center of the node, and then clipped at the node boundary. See also the corresponding
                <see cref="P:GiGraph.Dot.Entities.Edges.Endpoints.DotEndpoint.Port" /> property on the <see cref="P:GiGraph.Dot.Entities.Edges.Endpoints.DotEdgeEndpoint`1.Endpoint" /> of the
                <see cref="P:GiGraph.Dot.Entities.Edges.DotEdge`2.Head" /> or <see cref="P:GiGraph.Dot.Entities.Edges.DotEdge`2.Tail" /> of the edge.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Endpoints.Attributes.DotEdgeTailAttributes.ClusterId">
            <summary>
                Logical endpoint of the edge (dot only). When <see cref="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphClustersAttributes.AllowEdgeClipping" /> is true (see
                attributes on the graph's <see cref="P:GiGraph.Dot.Entities.Graphs.DotCommonGraphSection.Clusters" /> collection), if the current property is defined, and
                is the identifier of a cluster containing the real endpoint node, the edge is clipped to the boundary of the cluster.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Endpoints.Attributes.DotEdgeTailAttributes.Arrowhead">
            <summary>
                <para>
                    Gets or sets the style of arrowhead at the end of the edge (default: <see cref="F:GiGraph.Dot.Types.Arrowheads.DotArrowheadShape.Normal" />). Appears
                    only if the <see cref="P:GiGraph.Dot.Entities.Edges.Attributes.IDotEdgeAttributes.Directions" /> attribute on the edge is
                    <see cref="F:GiGraph.Dot.Types.Edges.DotEdgeDirections.Forward" /> (when specifying an arrowhead for the head endpoint),
                    <see cref="F:GiGraph.Dot.Types.Edges.DotEdgeDirections.Backward" /> (when specifying an arrowhead for the tail endpoint), or
                    <see cref="F:GiGraph.Dot.Types.Edges.DotEdgeDirections.Both" />.
                </para>
                <para>
                    For basic shapes, assign a value of the <see cref="T:GiGraph.Dot.Types.Arrowheads.DotArrowheadShape" /> enumeration to this property (it will be
                    converted implicitly). For variants of the basic shapes (filled/empty, normal/clipped) use <see cref="T:GiGraph.Dot.Types.Arrowheads.DotArrowhead" />.
                    To generate an arrow composed of multiple arrowheads use <see cref="T:GiGraph.Dot.Types.Arrowheads.DotCompositeArrowhead" />.
                </para>
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Endpoints.Attributes.DotEdgeTailHyperlinkAttributes.Url">
            <summary>
                If defined, it is output as part of the tail <see cref="P:GiGraph.Dot.Entities.Edges.Endpoints.Attributes.IDotEdgeEndpointAttributes.Label" /> of the edge (svg, map only).
                Also, this value is used near the tail node, overriding any <see cref="P:GiGraph.Dot.Entities.Edges.Attributes.IDotEdgeRootAttributes.Hyperlink" />
                <see cref="P:GiGraph.Dot.Entities.Attributes.Properties.Common.Hyperlink.IDotHyperlinkAttributes.Url" /> set for the edge.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Endpoints.Attributes.DotEdgeTailHyperlinkAttributes.Href">
            <summary>
                Synonym for <see cref="P:GiGraph.Dot.Entities.Edges.Endpoints.Attributes.DotEdgeTailHyperlinkAttributes.Url" /> (svg, map only).
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Endpoints.Attributes.DotEdgeTailHyperlinkAttributes.Target">
            <summary>
                If <see cref="P:GiGraph.Dot.Entities.Edges.Endpoints.Attributes.DotEdgeTailHyperlinkAttributes.Url" /> is specified, this attribute determines which window of the browser is used for the URL (svg, map
                only). Setting it to <see cref="F:GiGraph.Dot.Types.Hyperlinks.DotHyperlinkTargets.NewWindow" /> will open a new window if it doesn't already exist, or
                reuse it if it does. If undefined, the value of the edge's <see cref="P:GiGraph.Dot.Entities.Edges.Attributes.IDotEdgeRootAttributes.Hyperlink" />
                <see cref="P:GiGraph.Dot.Entities.Attributes.Properties.Common.Hyperlink.IDotHyperlinkAttributes.Target" /> is used.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Endpoints.Attributes.DotEdgeTailHyperlinkAttributes.Tooltip">
            <summary>
                Tooltip annotation attached to the tail of an edge (svg, cmap only). This is used only if <see cref="P:GiGraph.Dot.Entities.Edges.Endpoints.Attributes.DotEdgeTailHyperlinkAttributes.Url" /> is specified.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Endpoints.Attributes.IDotEdgeEndpointAttributes.Label">
            <summary>
                The text label to be placed near the endpoint of the edge.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Endpoints.Attributes.IDotEdgeEndpointAttributes.Port">
            <summary>
                Indicates where on the node to attach the end of the edge. In the default case (<see cref="F:GiGraph.Dot.Types.Edges.DotCompassPoint.Center" />), the
                edge is aimed towards the center of the node, and then clipped at the node boundary. See also the corresponding
                <see cref="P:GiGraph.Dot.Entities.Edges.Endpoints.DotEndpoint.Port" /> property on the <see cref="P:GiGraph.Dot.Entities.Edges.Endpoints.DotEdgeEndpoint`1.Endpoint" /> of the
                <see cref="P:GiGraph.Dot.Entities.Edges.DotEdge`2.Head" /> or <see cref="P:GiGraph.Dot.Entities.Edges.DotEdge`2.Tail" /> of the edge.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Endpoints.Attributes.IDotEdgeEndpointAttributes.ClusterId">
            <summary>
                Logical endpoint of the edge (dot only). When <see cref="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphClustersAttributes.AllowEdgeClipping" /> is true (see
                attributes on the graph's <see cref="P:GiGraph.Dot.Entities.Graphs.DotCommonGraphSection.Clusters" /> collection), if the current property is defined, and
                is the identifier of a cluster containing the real endpoint node, the edge is clipped to the boundary of the cluster.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Endpoints.Attributes.IDotEdgeEndpointAttributes.ClipToNodeBoundary">
            <summary>
                If true (default), the end of the edge is clipped to node boundary; otherwise, it goes to the center of the node, or the
                center of a port, if applicable.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Endpoints.Attributes.IDotEdgeEndpointAttributes.GroupName">
            <summary>
                When specified, edges with the same endpoint and the same group name are aimed at the same point on that endpoint (dot only).
                This has no effect on loops. Each node may have at most 5 unique group names specified.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Endpoints.Attributes.IDotEdgeEndpointAttributes.Arrowhead">
            <summary>
                <para>
                    Gets or sets the style of arrowhead at the end of the edge (default: <see cref="F:GiGraph.Dot.Types.Arrowheads.DotArrowheadShape.Normal" />). Appears
                    only if the <see cref="P:GiGraph.Dot.Entities.Edges.Attributes.IDotEdgeAttributes.Directions" /> attribute on the edge is
                    <see cref="F:GiGraph.Dot.Types.Edges.DotEdgeDirections.Forward" /> (when specifying an arrowhead for the head endpoint),
                    <see cref="F:GiGraph.Dot.Types.Edges.DotEdgeDirections.Backward" /> (when specifying an arrowhead for the tail endpoint), or
                    <see cref="F:GiGraph.Dot.Types.Edges.DotEdgeDirections.Both" />.
                </para>
                <para>
                    For basic shapes, assign a value of the <see cref="T:GiGraph.Dot.Types.Arrowheads.DotArrowheadShape" /> enumeration to this property (it will be
                    converted implicitly). For variants of the basic shapes (filled/empty, normal/clipped) use <see cref="T:GiGraph.Dot.Types.Arrowheads.DotArrowhead" />.
                    To generate an arrow composed of multiple arrowheads use <see cref="T:GiGraph.Dot.Types.Arrowheads.DotCompositeArrowhead" />.
                </para>
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Endpoints.Attributes.IDotEdgeEndpointRootAttributes.Hyperlink">
            <summary>
                Hyperlink attributes of the endpoint of the edge. If defined, the hyperlink is output as part of the endpoint's
                <see cref="P:GiGraph.Dot.Entities.Edges.Endpoints.Attributes.IDotEdgeEndpointAttributes.Label" />. Also, this value is used near the endpoint, overriding hyperlink attributes
                set on the edge.
            </summary>
        </member>
        <member name="T:GiGraph.Dot.Entities.Edges.Endpoints.DotClusterEndpoint">
            <summary>
                Represents a cluster as an endpoint.
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Edges.Endpoints.DotClusterEndpoint.#ctor(System.String,System.Nullable{GiGraph.Dot.Types.Edges.DotCompassPoint})">
            <summary>
                Creates a new instance of the class.
            </summary>
            <param name="clusterId">
                The cluster identifier.
            </param>
            <param name="compassPoint">
                Determines the edge placement to aim for the specified compass point on the cluster. If no compass point is specified
                explicitly, the default value is <see cref="F:GiGraph.Dot.Types.Edges.DotCompassPoint.Center" />.
            </param>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Endpoints.DotClusterEndpoint.Id">
            <summary>
                Gets the cluster identifier.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Endpoints.DotClusterEndpoint.Port">
            <summary>
                Gets or sets the endpoint port, that is a point on a cluster where an edge is attached to.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Endpoints.DotEdgeEndpoint.Hyperlink">
            <summary>
                Hyperlink attributes of the endpoint of the edge. If defined, the hyperlink is output as part of the endpoint's
                <see cref="P:GiGraph.Dot.Entities.Edges.Endpoints.Attributes.IDotEdgeEndpointAttributes.Label" />. Also, this value is used near the endpoint, overriding hyperlink attributes
                set on the edge.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Endpoints.DotEdgeEndpoint.Label">
            <summary>
                The text label to be placed near the endpoint of the edge.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Endpoints.DotEdgeEndpoint.Port">
            <summary>
                Indicates where on the node to attach the end of the edge. In the default case (<see cref="F:GiGraph.Dot.Types.Edges.DotCompassPoint.Center" />), the
                edge is aimed towards the center of the node, and then clipped at the node boundary. See also the corresponding
                <see cref="P:GiGraph.Dot.Entities.Edges.Endpoints.DotEndpoint.Port" /> property on the <see cref="P:GiGraph.Dot.Entities.Edges.Endpoints.DotEdgeEndpoint`1.Endpoint" /> of the
                <see cref="P:GiGraph.Dot.Entities.Edges.DotEdge`2.Head" /> or <see cref="P:GiGraph.Dot.Entities.Edges.DotEdge`2.Tail" /> of the edge.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Endpoints.DotEdgeEndpoint.ClusterId">
            <summary>
                Logical endpoint of the edge (dot only). When <see cref="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphClustersAttributes.AllowEdgeClipping" /> is true (see
                attributes on the graph's <see cref="P:GiGraph.Dot.Entities.Graphs.DotCommonGraphSection.Clusters" /> collection), if the current property is defined, and
                is the identifier of a cluster containing the real endpoint node, the edge is clipped to the boundary of the cluster.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Endpoints.DotEdgeEndpoint.ClipToNodeBoundary">
            <summary>
                If true (default), the end of the edge is clipped to node boundary; otherwise, it goes to the center of the node, or the
                center of a port, if applicable.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Endpoints.DotEdgeEndpoint.GroupName">
            <summary>
                When specified, edges with the same endpoint and the same group name are aimed at the same point on that endpoint (dot only).
                This has no effect on loops. Each node may have at most 5 unique group names specified.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Endpoints.DotEdgeEndpoint.Arrowhead">
            <summary>
                <para>
                    Gets or sets the style of arrowhead at the end of the edge (default: <see cref="F:GiGraph.Dot.Types.Arrowheads.DotArrowheadShape.Normal" />). Appears
                    only if the <see cref="P:GiGraph.Dot.Entities.Edges.Attributes.IDotEdgeAttributes.Directions" /> attribute on the edge is
                    <see cref="F:GiGraph.Dot.Types.Edges.DotEdgeDirections.Forward" /> (when specifying an arrowhead for the head endpoint),
                    <see cref="F:GiGraph.Dot.Types.Edges.DotEdgeDirections.Backward" /> (when specifying an arrowhead for the tail endpoint), or
                    <see cref="F:GiGraph.Dot.Types.Edges.DotEdgeDirections.Both" />.
                </para>
                <para>
                    For basic shapes, assign a value of the <see cref="T:GiGraph.Dot.Types.Arrowheads.DotArrowheadShape" /> enumeration to this property (it will be
                    converted implicitly). For variants of the basic shapes (filled/empty, normal/clipped) use <see cref="T:GiGraph.Dot.Types.Arrowheads.DotArrowhead" />.
                    To generate an arrow composed of multiple arrowheads use <see cref="T:GiGraph.Dot.Types.Arrowheads.DotCompositeArrowhead" />.
                </para>
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Endpoints.DotEdgeEndpoint.Attributes">
            <summary>
                Provides access to edge attributes applied to the endpoint.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Endpoints.DotEdgeEndpoint`1.Endpoint">
            <summary>
                The endpoint of the edge.
            </summary>
        </member>
        <member name="T:GiGraph.Dot.Entities.Edges.Endpoints.DotEndpoint">
            <summary>
                Represents a node as an endpoint.
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Edges.Endpoints.DotEndpoint.#ctor(System.String,System.String,System.Nullable{GiGraph.Dot.Types.Edges.DotCompassPoint})">
            <summary>
                Creates a new instance of the class.
            </summary>
            <param name="id">
                The node identifier.
            </param>
            <param name="portName">
                Determines the edge placement to aim for the specified port. If specified, the corresponding node, referred to by the
                <paramref name="id" /> parameter, must either have a record shape (<see cref="F:GiGraph.Dot.Types.Nodes.DotNodeShape.Record" />,
                <see cref="F:GiGraph.Dot.Types.Nodes.DotNodeShape.RoundedRecord" />) with one of its fields having the given port name, or have an HTML-like label, one
                of whose components has a PORT attribute set to the specified port name.
            </param>
            <param name="compassPoint">
                Determines the edge placement to aim for the specified compass point on the <paramref name="portName" /> if specified, or on
                the node itself otherwise. If no compass point is specified explicitly, the default value is
                <see cref="F:GiGraph.Dot.Types.Edges.DotCompassPoint.Center" />.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Edges.Endpoints.DotEndpoint.#ctor(System.String,System.Nullable{GiGraph.Dot.Types.Edges.DotCompassPoint})">
            <summary>
                Creates a new instance of the class.
            </summary>
            <param name="id">
                The node identifier.
            </param>
            <param name="compassPoint">
                Determines the edge placement to aim for the specified compass point on the node. If no compass point is specified
                explicitly, the default value is <see cref="F:GiGraph.Dot.Types.Edges.DotCompassPoint.Center" />.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Edges.Endpoints.DotEndpoint.#ctor(System.String,GiGraph.Dot.Types.Edges.DotEndpointPort)">
            <summary>
                Creates a new instance of the class.
            </summary>
            <param name="id">
                The node identifier.
            </param>
            <param name="port">
                The endpoint port, that is a point on a node an edge will be attached to.
            </param>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Endpoints.DotEndpoint.Id">
            <summary>
                Gets the node identifier.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Endpoints.DotEndpoint.Port">
            <summary>
                Gets or sets the endpoint port, that is a point on a node where an edge is attached to.
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Edges.Endpoints.DotEndpoint.IsSameEndpoint(GiGraph.Dot.Entities.Edges.Endpoints.DotEndpoint)">
            <summary>
                Determines the equality of endpoint identifiers (ignores port). Ensures that the endpoints are of the same type.
            </summary>
            <param name="endpoint">
                The endpoint to check.
            </param>
        </member>
        <member name="T:GiGraph.Dot.Entities.Edges.Endpoints.DotEndpointDefinition">
            <summary>
                Represents an endpoint of an edge.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Endpoints.DotEndpointDefinition.Annotation">
            <summary>
                The annotation to write in the output DOT script as a comment in the context of the element or section represented by the
                current object.
            </summary>
        </member>
        <member name="T:GiGraph.Dot.Entities.Edges.Endpoints.DotEndpointGroup">
            <summary>
                Represents a collection of endpoints.
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Edges.Endpoints.DotEndpointGroup.#ctor(System.String[])">
            <summary>
                Creates a new endpoint group initialized with the specified node identifiers.
            </summary>
            <param name="nodeIds">
                The identifiers of nodes to use as endpoints.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Edges.Endpoints.DotEndpointGroup.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Creates a new endpoint group initialized with the specified node identifiers.
            </summary>
            <param name="nodeIds">
                The identifiers of nodes to use as endpoints.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Edges.Endpoints.DotEndpointGroup.#ctor(GiGraph.Dot.Entities.Edges.Endpoints.DotEndpoint[])">
            <summary>
                Creates a new endpoint group initialized with the specified endpoints.
            </summary>
            <param name="endpoints">
                The endpoints to use.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Edges.Endpoints.DotEndpointGroup.#ctor(System.Collections.Generic.IEnumerable{GiGraph.Dot.Entities.Edges.Endpoints.DotEndpoint})">
            <summary>
                Creates a new endpoint group initialized with the specified endpoints.
            </summary>
            <param name="endpoints">
                The endpoints to use.
            </param>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Endpoints.DotEndpointGroup.Endpoints">
            <summary>
                Gets the endpoints.
            </summary>
        </member>
        <member name="T:GiGraph.Dot.Entities.Edges.Endpoints.DotSubgraphEndpoint">
            <summary>
                Represents a collection of nodes in a subgraph as a group of endpoints.
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Edges.Endpoints.DotSubgraphEndpoint.#ctor(GiGraph.Dot.Entities.Subgraphs.DotSubgraph)">
            <summary>
                Creates a new endpoint group initialized with a subgraph.
            </summary>
            <param name="subgraph">
                The subgraph whose nodes to use as the endpoints of multiple edges.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Edges.Endpoints.DotSubgraphEndpoint.#ctor(System.String[])">
            <summary>
                Creates a new endpoint group initialized with the specified node identifiers.
            </summary>
            <param name="nodeIds">
                The identifiers of nodes to use as the endpoints of multiple edges.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Edges.Endpoints.DotSubgraphEndpoint.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Creates a new endpoint group initialized with the specified node identifiers.
            </summary>
            <param name="nodeIds">
                The identifiers of nodes to use as the endpoints of multiple edges.
            </param>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Endpoints.DotSubgraphEndpoint.Subgraph">
            <summary>
                Gets the subgraph whose nodes are used as endpoints.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.Attributes.DotGraphCanvasAttributes.BackgroundColor">
            <summary>
                <para>
                    Gets or sets the background color of the graph (default: none). Used as the background for entire canvas.
                </para>
                <para>
                    When <see cref="T:GiGraph.Dot.Types.Colors.DotGradientColor" /> is used, a gradient fill is generated. By default, this is a linear fill; applying
                    the <see cref="F:GiGraph.Dot.Types.Clusters.DotClusterFillStyle.Radial" /> fill style to the graph will cause a radial fill. If the second color is
                    <see cref="F:System.Drawing.Color.Empty" />, the default color is used for it. See also the
                    <see cref="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphCanvasAttributes.GradientFillAngle" /> attribute for setting a gradient angle.
                </para>
                <para>
                    For certain output formats, such as PostScript, no fill is done for the root graph unless background color is explicitly
                    set. For bitmap formats, however, the bits need to be initialized to something, so the canvas is filled with white by
                    default. This means that if the bitmap output is included in some other document, all of the bits within the bitmap
                    bounding box will be set, overwriting whatever color or graphics were already on the page. If this effect is not desired,
                    and you only want to set bits explicitly assigned in drawing the graph, set <see cref="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphCanvasAttributes.BackgroundColor" /> =
                    <see cref="P:System.Drawing.Color.Transparent" />.
                </para>
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.Attributes.DotGraphCanvasAttributes.GradientFillAngle">
            <summary>
                If a gradient fill is being used, this determines the angle of the fill. For linear fills, the colors transform along a line
                specified by the angle and the center of the object. For radial fills, a value of zero causes the colors to transform
                radially from the center; for non-zero values, the colors transform from a point near the object's periphery as specified by
                the value. If unset, the default angle is 0.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.Attributes.DotGraphCanvasAttributes.CenterDrawing">
            <summary>
                If true, the drawing is centered in the output canvas (default: false).
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.Attributes.DotGraphCanvasAttributes.Orientation">
            <summary>
                Sets graph orientation to landscape or portrait (default). Used only if <see cref="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphCanvasAttributes.OrientationAngle" /> is not defined. See
                also <see cref="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphCanvasAttributes.LandscapeOrientation" />.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.Attributes.DotGraphCanvasAttributes.OrientationAngle">
            <summary>
                If 90, sets drawing orientation to landscape (default: 0). See also <see cref="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphCanvasAttributes.Orientation" /> and
                <see cref="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphCanvasAttributes.LandscapeOrientation" />.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.Attributes.DotGraphCanvasAttributes.LandscapeOrientation">
            <summary>
                If true, the graph is rendered in landscape mode (default: false). Synonymous with <see cref="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphCanvasAttributes.OrientationAngle" /> = 90 or
                <see cref="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphCanvasAttributes.Orientation" /> = <see cref="F:GiGraph.Dot.Types.Orientation.DotOrientation.Landscape" />.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.Attributes.DotGraphCanvasAttributes.Dpi">
            <summary>
                Specifies the expected number of pixels per inch on a display device (svg, bitmap output only; default: 96.0, 0.0). For
                bitmap output, this guarantees that text rendering will be done more accurately, both in size and in placement. For SVG
                output, it is used to guarantee that the dimensions in the output correspond to the correct number of points or inches.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.Attributes.DotGraphCanvasAttributes.Resolution">
            <summary>
                This is a synonym for the <see cref="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphCanvasAttributes.Dpi" /> attribute (svg, bitmap output only; default: 96.0, 0.0).
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.Attributes.DotGraphCanvasAttributes.Size">
            <summary>
                <para>
                    The maximum width and height of drawing, in inches. If only a single number is given, this is used for both the width and
                    the height.
                </para>
                <para>
                    If defined and the drawing is larger than the given size, the drawing is uniformly scaled down so that it fits within the
                    given size.
                </para>
                <para>
                    If <see cref="P:GiGraph.Dot.Types.Geometry.DotPoint.IsFixed" /> is set, then the size specified is taken to be the desired size. In this case, if both
                    dimensions of the drawing are less than size, the drawing is scaled up uniformly until at least one dimension equals its
                    dimension in size.
                </para>
                <para>
                    Note that there is some interaction between the <see cref="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphCanvasAttributes.Size" /> and the <see cref="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphCanvasAttributes.Scaling" /> attributes.
                </para>
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.Attributes.DotGraphCanvasAttributes.Viewport">
            <summary>
                <para>
                    Gets or sets the clipping window on final drawing. Supersedes any <see cref="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphCanvasAttributes.Size" /> attribute. The width and height of
                    the viewport specify precisely the final size of the output.
                </para>
                <para>
                    To specify width, height, and zoom of the final drawing, use <see cref="T:GiGraph.Dot.Types.Viewport.DotViewport" />. To also specify a central point
                    of the drawing, use <see cref="T:GiGraph.Dot.Types.Viewport.DotPointCenteredViewport" />, or, to specify a node as a central point, use
                    <see cref="T:GiGraph.Dot.Types.Viewport.DotNodeCenteredViewport" />. By default, the focus is the center of the graph bounding box, i.e., (bbx / 2,
                    bby / 2), where "bbx, bby" is the value of the bounding box attribute bb.
                </para>
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.Attributes.DotGraphCanvasAttributes.Scaling">
            <summary>
                <para>
                    Gets or sets the aspect ratio (drawing height / drawing width) for the drawing. Note that this is adjusted before the
                    <see cref="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphCanvasAttributes.Size" /> attribute constraints are enforced. In addition, the calculations usually ignore the node sizes, so
                    the final drawing size may only approximate what is desired.
                </para>
                <para>
                    If ratio is numeric (<see cref="T:GiGraph.Dot.Types.Graphs.DotGraphScalingAspectRatio" />), it is taken as the desired aspect ratio. Then, if the
                    actual aspect ratio is less than the desired ratio, the drawing height is scaled up to achieve the desired ratio; if the
                    actual ratio is greater than that desired ratio, the drawing width is scaled up.
                </para>
                <para>
                    See also <see cref="T:GiGraph.Dot.Types.Graphs.DotGraphScaling" /> for non-numeric options of the ratio.
                </para>
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.Attributes.DotGraphCanvasAttributes.Margin">
            <summary>
                <para>
                    Sets x and y margins of canvas, in inches (default: device-dependent). If the margin is a single double, both margins are
                    set equal to the given value.
                </para>
                <para>
                    Note that the margin is not part of the drawing but just empty space left around the drawing. It basically corresponds to
                    a translation of drawing, as would be necessary to center a drawing on a page. Nothing is actually drawn in the margin.
                    To actually extend the background of a drawing, see the <see cref="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphCanvasAttributes.Padding" /> attribute.
                </para>
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.Attributes.DotGraphCanvasAttributes.Padding">
            <summary>
                <para>
                    Specifies how much, in inches, to extend the drawing area around the minimal area needed to draw the graph. This area is
                    part of the drawing, and will be filled with the background color, if appropriate. Default: 0.0555 (4 points).
                </para>
                <para>
                    Normally, a small pad is used for aesthetic reasons, especially when a background color is used, to avoid having nodes
                    and edges abutting the boundary of the drawn region.
                </para>
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Graphs.Attributes.DotGraphCanvasAttributes.Set(GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphCanvasAttributes)">
            <summary>
                Copies canvas attributes from the specified instance.
            </summary>
            <param name="attributes">
                The instance to copy the attributes from.
            </param>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.Attributes.DotGraphFontAttributes.Directories">
            <summary>
                Gets or sets the directory list used by libgd to search for bitmap fonts if Graphviz was not built with the fontconfig
                library. If <see cref="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphFontAttributes.Directories" /> is not set, the environment variable DOTFONTPATH is checked. If that is not set,
                GDFONTPATH is checked. If not set, libgd uses its compiled-in font path. The default path is system dependent.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.Attributes.DotGraphFontAttributes.Convention">
            <summary>
                Allows user control of how basic font names are represented in SVG output (svg only; default:
                <see cref="F:GiGraph.Dot.Types.Fonts.DotFontConvention.Svg" />).
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Graphs.Attributes.DotGraphFontAttributes.Set(System.String,System.Nullable{System.Double},GiGraph.Dot.Types.Colors.DotColor,System.String,System.Nullable{GiGraph.Dot.Types.Fonts.DotFontConvention})">
            <summary>
                Sets font attributes.
            </summary>
            <param name="name">
                Font name.
            </param>
            <param name="size">
                Font size.
            </param>
            <param name="color">
                Font color.
            </param>
            <param name="directories">
                The directories to search for fonts.
            </param>
            <param name="convention">
                The font convention to use.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Graphs.Attributes.DotGraphFontAttributes.Set(GiGraph.Dot.Types.Graphs.DotGraphFont)">
            <summary>
                Sets font attributes.
            </summary>
            <param name="attributes">
                The attributes to set.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Graphs.Attributes.DotGraphFontAttributes.Set(GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphFontAttributes)">
            <summary>
                Copies font attributes from the specified instance.
            </summary>
            <param name="attributes">
                The instance to copy the attributes from.
            </param>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.Attributes.DotGraphLayoutAttributes.Rotation">
            <summary>
                Rotates the final layout counter-clockwise by the specified number of degrees (sfdp only; default: 0).
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.Attributes.DotGraphLayoutAttributes.RepeatCrossingMinimization">
            <summary>
                If true and there are multiple clusters, runs crossing minimization a second time (dot only, default: true).
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.Attributes.DotGraphLayoutAttributes.UseGlobalRanking">
            <summary>
                <para>
                    Determines whether to use a single global ranking, ignoring clusters (dot only, default: false).
                </para>
                <para>
                    The original ranking algorithm in dot is recursive on clusters. This can produce fewer ranks and a more compact layout,
                    but sometimes at the cost of a head node being placed on a higher rank than the tail node. It also assumes that a node is
                    not constrained in separate, incompatible subgraphs. For example, a node cannot be in a cluster and also be constrained
                    by a rank of <see cref="F:GiGraph.Dot.Types.Ranks.DotRank.Same" /> with a node not in the cluster (see
                    <see cref="P:GiGraph.Dot.Entities.Subgraphs.Attributes.IDotSubgraphAttributes.NodeRank" /> on subgraph attributes).
                </para>
                <para>
                    This allows nodes to be subject to multiple constraints. Rank constraints will usually take precedence over edge
                    constraints. See also <see cref="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphLayoutAttributes.NodeRank" />.
                </para>
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.Attributes.DotGraphLayoutAttributes.NodeRank">
            <summary>
                Gets or sets the rank constraints on the nodes in the graph (dot only). See also <see cref="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphLayoutAttributes.UseGlobalRanking" />.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.Attributes.DotGraphLayoutAttributes.Packing">
            <summary>
                <para>
                    If enabled (see <see cref="T:GiGraph.Dot.Types.Packing.DotPackingToggle" />), each connected component of the graph is laid out separately, and then
                    the graphs are packed together.
                </para>
                <para>
                    If an integral value is specified (see <see cref="T:GiGraph.Dot.Types.Packing.DotPackingMargin" />), this is used as the size, in
                    <see href="http://www.graphviz.org/doc/info/attrs.html#points">
                        points
                    </see>
                    , of a margin around each part; otherwise, a default margin of 8 is used.
                </para>
                <para>
                    If disabled (see <see cref="T:GiGraph.Dot.Types.Packing.DotPackingToggle" />), the entire graph is laid out together. The granularity and method of
                    packing is influenced by the <see cref="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphLayoutAttributes.PackingMode" /> attribute.
                </para>
                <para>
                    Default: disabled (see <see cref="T:GiGraph.Dot.Types.Packing.DotPackingToggle" />).
                </para>
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.Attributes.DotGraphLayoutAttributes.PackingMode">
            <summary>
                Indicates how connected components should be packed (default: <see cref="F:GiGraph.Dot.Types.Packing.DotPackingGranularity.Node" />). Note that
                specifying a value for this property will automatically turn on packing as though one had set <see cref="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphLayoutAttributes.Packing" /> = true.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.Attributes.DotGraphLayoutAttributes.NodeSeparation">
            <summary>
                <para>
                    In dot, this specifies the minimum space between two adjacent nodes in the same rank, in inches (default: 0.25, minimum:
                    0.02).
                </para>
                <para>
                    For other layouts, this affects the spacing between loops on a single node, or multiedges between a pair of nodes.
                </para>
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.Attributes.DotGraphLayoutAttributes.RankSeparation">
            <summary>
                <para>
                    In dot, this gives the desired rank separation, in inches (<see cref="T:GiGraph.Dot.Types.Ranks.DotRankSeparation" />; default: 0.5, minimum: 0.02.
                    This is the minimum vertical distance between the bottom of the nodes in one rank and the tops of nodes in the next.
                </para>
                <para>
                    In twopi, this attribute specifies the radial separation of concentric circles (default: 1, minimum: 0.02). For twopi,
                    this can also be a list of doubles (<see cref="T:GiGraph.Dot.Types.Ranks.DotRadialRankSeparation" />). The first double specifies the radius of the
                    inner circle; the second double specifies the increase in radius from the first circle to the second; etc. If there are
                    more circles than numbers, the last number is used as the increment for the remainder.
                </para>
                <para>
                    Twopi, dot only.
                </para>
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.Attributes.DotGraphLayoutAttributes.ConcentrateEdges">
            <summary>
                If true, edge concentrators are used (default: false). This merges multiedges into a single edge, and causes partially
                parallel edges to share part of their paths. The latter feature is not yet available outside of dot.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.Attributes.DotGraphLayoutAttributes.Engine">
            <summary>
                <para>
                    Specifies the name of the layout algorithm to use, such as dot or neato (see <see cref="T:GiGraph.Dot.Types.Layout.DotLayoutEngines" /> for a list
                    of available layout engines).
                </para>
                <para>
                    Normally, graphs should be kept independent of a type of layout. In some cases, however, it can be convenient to embed
                    the type of layout desired within the graph. For example, a graph containing position information from a layout might
                    want to record what the associated layout algorithm was. This attribute takes precedence over the -K flag or the actual
                    command name used.
                </para>
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.Attributes.DotGraphLayoutAttributes.Direction">
            <summary>
                Gets or sets the direction of graph layout (dot only, default: <see cref="F:GiGraph.Dot.Types.Layout.DotLayoutDirection.TopToBottom" />).
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.Attributes.DotGraphLayoutAttributes.EdgeOrderingMode">
            <summary>
                Determines how inedges and outedges, that is, edges with a node as their head or tail node respectively, are ordered (dot
                only). If defined on a graph or subgraph, the value is applied to all nodes in the graph or subgraph. Note that the graph
                attribute takes precedence over a corresponding attribute on nodes.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.Attributes.DotGraphLayoutAttributes.ForceExternalLabels">
            <summary>
                If true, all node <see cref="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeAttributes.ExternalLabel" /> and edge <see cref="P:GiGraph.Dot.Entities.Edges.Attributes.IDotEdgeAttributes.ExternalLabel" />
                attributes are placed, even if there is some overlap with nodes or other labels (default: true).
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.Attributes.DotGraphLayoutAttributes.SortIndex">
            <summary>
                Gets or sets the sorting index of the graph (default: 0). If <see cref="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphLayoutAttributes.PackingMode" /> indicates an array packing, this
                attribute specifies an insertion order among the components, with smaller values inserted first.
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Graphs.Attributes.DotGraphLayoutAttributes.Set(GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphLayoutAttributes)">
            <summary>
                Copies layout attributes from the specified instance.
            </summary>
            <param name="attributes">
                The instance to copy the attributes from.
            </param>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.Attributes.DotGraphStyleAttributeOptions.FillStyle">
            <summary>
                Gets or sets a fill style of the graph. Note that the style is shared with clusters, and that the only option applicable to
                the root graph is <see cref="F:GiGraph.Dot.Types.Clusters.DotClusterFillStyle.Radial" />.
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Graphs.Attributes.DotGraphStyleAttributeOptions.Set(GiGraph.Dot.Types.Graphs.DotGraphStyleProperties)">
            <summary>
                Applies the specified style options to the graph and clusters.
            </summary>
            <param name="options">
                The options to apply.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Graphs.Attributes.DotGraphStyleAttributeOptions.Set(GiGraph.Dot.Types.Clusters.DotClusterFillStyle)">
            <summary>
                Applies the specified style options to the graph and clusters.
            </summary>
            <param name="fillStyle">
                The fill options to apply.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Graphs.Attributes.DotGraphStyleAttributeOptions.CopyFrom(GiGraph.Dot.Entities.Graphs.Attributes.DotGraphStyleAttributeOptions)">
            <summary>
                Copies style options from the specified instance.
            </summary>
            <param name="options">
                The instance to copy the options from.
            </param>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.Attributes.DotGraphSvgStyleSheetAttributes.Url">
            <summary>
                A URL or pathname specifying an XML style sheet, used in SVG output. Combine with
                <see cref="P:GiGraph.Dot.Entities.Attributes.Properties.Common.SvgStyleSheet.IDotSvgStyleSheetAttributes.Class" /> on this or other elements to style them using CSS selectors.
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Graphs.Attributes.DotGraphSvgStyleSheetAttributes.Set(System.String,System.String)">
            <summary>
                Sets style sheet attributes.
            </summary>
            <param name="url">
                The URL or pathname specifying an XML style sheet.
            </param>
            <param name="class">
                The CSS class to set.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Graphs.Attributes.DotGraphSvgStyleSheetAttributes.Set(GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphSvgStyleSheetAttributes)">
            <summary>
                Copies style sheet attributes from the specified instance.
            </summary>
            <param name="attributes">
                The instance to copy the attributes from.
            </param>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphAttributes.Style">
            <summary>
                <para>
                    Gets or sets the style of the graph (default: unset). See the descriptions of individual <see cref="T:GiGraph.Dot.Types.Styling.DotStyles" /> values
                    to learn which styles are applicable to this type of element.
                </para>
                <para>
                    Multiple styles can be used at once, for example: <see cref="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphAttributes.Style" /> = <see cref="F:GiGraph.Dot.Types.Styling.DotStyles.Rounded" /> |
                    <see cref="F:GiGraph.Dot.Types.Styling.DotStyles.Bold" />;
                </para>
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphAttributes.EdgeShape">
            <summary>
                Controls how, and if, edges are represented. By default, the attribute is unset. How this is interpreted depends on the
                layout. For dot, the default is to draw edges as splines (<see cref="F:GiGraph.Dot.Types.Edges.DotEdgeShape.Spline" />). For all other layouts, the
                default is to draw edges as line segments (<see cref="F:GiGraph.Dot.Types.Edges.DotEdgeShape.Line" />). Note that for these latter layouts, if
                <see cref="F:GiGraph.Dot.Types.Edges.DotEdgeShape.Spline" /> is used, this requires non-overlapping nodes (cf.
                <see href="http://www.graphviz.org/doc/info/attrs.html#d:overlap">
                    overlap
                </see>
                ). If fdp is used for layout and <see cref="F:GiGraph.Dot.Types.Edges.DotEdgeShape.Compound" /> is used, then the edges are drawn to avoid clusters as
                well as nodes.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphAttributes.Label">
            <summary>
                <para>
                    Gets or sets the label to display on the graph. It may be plain text (<see cref="T:System.String" />) or HTML (
                    <see cref="T:GiGraph.Dot.Types.Html.DotHtmlString" />). See also <see cref="T:GiGraph.Dot.Types.EscapeString.DotFormattedTextBuilder" /> for text justification and simple
                    formatting and <see cref="T:GiGraph.Dot.Entities.Html.Builder.DotHtmlBuilder" /> for custom text styling and defining tables. The latter one gives the most
                    possibilities (specifying font, size, color, style, images, etc.).
                </para>
                <para>
                    Examples:
                    <list type="bullet">
                        <item>
                            <description>
                                <see cref="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphAttributes.Label" /> = "My label";
                            </description>
                        </item>
                        <item>
                            <description>
                                <see cref="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphAttributes.Label" /> = new <see cref="T:GiGraph.Dot.Entities.Html.Font.Styles.DotHtmlBold" />("My label");
                            </description>
                        </item>
                        <item>
                            <description>
                                <see cref="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphAttributes.Label" /> = (<see cref="T:GiGraph.Dot.Types.Html.DotHtmlString" />) "&lt;b&gt;My label&lt;/b&gt;";
                            </description>
                        </item>
                    </list>
                </para>
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphAttributes.ColorScheme">
            <summary>
                Specifies a color scheme namespace to use. If defined, specifies the context for interpreting color names. If no color scheme
                is set, the standard <see cref="F:GiGraph.Dot.Types.Colors.DotColorSchemes.X11" /> naming is used. For example, if
                <see cref="P:GiGraph.Dot.Types.Colors.DotColorSchemes.DotBrewerColorSchemes.BuGn9" /> Brewer color scheme is used, then a color named "7", e.g.
                Color.FromName("7"), will be evaluated in the context of that specific color scheme. See <see cref="T:GiGraph.Dot.Types.Colors.DotColorSchemes" /> for
                supported scheme names.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphAttributes.Charset">
            <summary>
                Specifies the character encoding used when interpreting string input as a text label. The default value is "UTF-8". The other
                legal value is "iso-8859-1" or, equivalently, "Latin1". The charset attribute is case-insensitive. Note that if the character
                encoding used in the input does not match the charset value, the resulting output may be very strange.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphAttributes.Comment">
            <summary>
                Comments are inserted into output. Device-dependent.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphAttributes.ImageDirectories">
            <summary>
                <para>
                    Specifies a list of directories in which to look for image files used by nodes, referenced either by the
                    <see cref="P:GiGraph.Dot.Entities.Nodes.Attributes.DotNodeImageAttributes.Path" /> of their <see cref="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeRootAttributes.Image" /> attributes, or from the
                    IMG element in HTML-like labels. The string should be a list of (absolute or relative) path names, each separated by a
                    semicolon (for Windows) or a colon (all other OS). The first directory in which a file of the given name is found will be
                    used to load the image.
                </para>
                <para>
                    If not set, relative path names for image files will be interpreted with respect to the current working directory.
                </para>
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphAttributes.RootNodeId">
            <summary>
                <para>
                    The identifier of a node that should be used as the center of the layout and the root of the generated spanning tree
                    (circo, twopi only).
                </para>
                <para>
                    In twopi, root will actually be the central node. In circo, the block containing the node will be central in the drawing
                    of its connected component. If not defined, twopi will pick a most central node, and circo will pick a random node.
                </para>
                <para>
                    If the attribute is defined as the empty string, twopi will reset it to name of the node picked as the root node.
                </para>
                <para>
                    For twopi, it is possible to have multiple roots, presumably one for each component. If more than one node in a component
                    is marked as the root, twopi will pick one (see the <see cref="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeAttributes.IsRoot" /> attribute on a node).
                </para>
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphAttributes.ObjectId">
            <summary>
                <para>
                    Allows the graph author to provide an identifier for graph objects which is to be included in the output (svg,
                    postscript, map only).
                </para>
                <para>
                    Normal <see cref="F:GiGraph.Dot.Types.EscapeString.DotEscapeString.NodeId" />, <see cref="F:GiGraph.Dot.Types.EscapeString.DotEscapeString.EdgeDefinition" />,
                    <see cref="F:GiGraph.Dot.Types.EscapeString.DotEscapeString.GraphId" /> substitutions can be applied (see <see cref="T:GiGraph.Dot.Types.EscapeString.DotFormattedTextBuilder" />). Note,
                    however, that <see cref="F:GiGraph.Dot.Types.EscapeString.DotEscapeString.EdgeDefinition" /> does not provide a unique ID for multi-edges.
                </para>
                <para>
                    If provided, it is the responsibility of the provider to keep ID values unique for its intended downstream use. If no ID
                    attribute is provided, then a unique internal ID is used. However, this value is unpredictable by the graph writer.
                </para>
                <para>
                    If the graph provides an ID attribute, this will be used as a prefix for internally generated attributes. By making
                    internally-used attributes distinct, the user can include multiple image maps in the same document.
                </para>
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphCanvasAttributes.BackgroundColor">
            <summary>
                <para>
                    Gets or sets the background color of the graph (default: none). Used as the background for entire canvas.
                </para>
                <para>
                    When <see cref="T:GiGraph.Dot.Types.Colors.DotGradientColor" /> is used, a gradient fill is generated. By default, this is a linear fill; applying
                    the <see cref="F:GiGraph.Dot.Types.Clusters.DotClusterFillStyle.Radial" /> fill style to the graph will cause a radial fill. If the second color is
                    <see cref="F:System.Drawing.Color.Empty" />, the default color is used for it. See also the
                    <see cref="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphCanvasAttributes.GradientFillAngle" /> attribute for setting a gradient angle.
                </para>
                <para>
                    For certain output formats, such as PostScript, no fill is done for the root graph unless background color is explicitly
                    set. For bitmap formats, however, the bits need to be initialized to something, so the canvas is filled with white by
                    default. This means that if the bitmap output is included in some other document, all of the bits within the bitmap
                    bounding box will be set, overwriting whatever color or graphics were already on the page. If this effect is not desired,
                    and you only want to set bits explicitly assigned in drawing the graph, set <see cref="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphCanvasAttributes.BackgroundColor" /> =
                    <see cref="P:System.Drawing.Color.Transparent" />.
                </para>
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphCanvasAttributes.GradientFillAngle">
            <summary>
                If a gradient fill is being used, this determines the angle of the fill. For linear fills, the colors transform along a line
                specified by the angle and the center of the object. For radial fills, a value of zero causes the colors to transform
                radially from the center; for non-zero values, the colors transform from a point near the object's periphery as specified by
                the value. If unset, the default angle is 0.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphCanvasAttributes.CenterDrawing">
            <summary>
                If true, the drawing is centered in the output canvas (default: false).
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphCanvasAttributes.Orientation">
            <summary>
                Sets graph orientation to landscape or portrait (default). Used only if <see cref="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphCanvasAttributes.OrientationAngle" /> is not defined. See
                also <see cref="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphCanvasAttributes.LandscapeOrientation" />.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphCanvasAttributes.OrientationAngle">
            <summary>
                If 90, sets drawing orientation to landscape (default: 0). See also <see cref="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphCanvasAttributes.Orientation" /> and
                <see cref="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphCanvasAttributes.LandscapeOrientation" />.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphCanvasAttributes.LandscapeOrientation">
            <summary>
                If true, the graph is rendered in landscape mode (default: false). Synonymous with <see cref="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphCanvasAttributes.OrientationAngle" /> = 90 or
                <see cref="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphCanvasAttributes.Orientation" /> = <see cref="F:GiGraph.Dot.Types.Orientation.DotOrientation.Landscape" />.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphCanvasAttributes.Dpi">
            <summary>
                Specifies the expected number of pixels per inch on a display device (svg, bitmap output only; default: 96.0, 0.0). For
                bitmap output, this guarantees that text rendering will be done more accurately, both in size and in placement. For SVG
                output, it is used to guarantee that the dimensions in the output correspond to the correct number of points or inches.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphCanvasAttributes.Resolution">
            <summary>
                This is a synonym for the <see cref="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphCanvasAttributes.Dpi" /> attribute (svg, bitmap output only; default: 96.0, 0.0).
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphCanvasAttributes.Size">
            <summary>
                <para>
                    The maximum width and height of drawing, in inches. If only a single number is given, this is used for both the width and
                    the height.
                </para>
                <para>
                    If defined and the drawing is larger than the given size, the drawing is uniformly scaled down so that it fits within the
                    given size.
                </para>
                <para>
                    If <see cref="P:GiGraph.Dot.Types.Geometry.DotPoint.IsFixed" /> is set, then the size specified is taken to be the desired size. In this case, if both
                    dimensions of the drawing are less than size, the drawing is scaled up uniformly until at least one dimension equals its
                    dimension in size.
                </para>
                <para>
                    Note that there is some interaction between the <see cref="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphCanvasAttributes.Size" /> and the <see cref="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphCanvasAttributes.Scaling" /> attributes.
                </para>
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphCanvasAttributes.Padding">
            <summary>
                <para>
                    Specifies how much, in inches, to extend the drawing area around the minimal area needed to draw the graph. This area is
                    part of the drawing, and will be filled with the background color, if appropriate. Default: 0.0555 (4 points).
                </para>
                <para>
                    Normally, a small pad is used for aesthetic reasons, especially when a background color is used, to avoid having nodes
                    and edges abutting the boundary of the drawn region.
                </para>
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphCanvasAttributes.Margin">
            <summary>
                <para>
                    Sets x and y margins of canvas, in inches (default: device-dependent). If the margin is a single double, both margins are
                    set equal to the given value.
                </para>
                <para>
                    Note that the margin is not part of the drawing but just empty space left around the drawing. It basically corresponds to
                    a translation of drawing, as would be necessary to center a drawing on a page. Nothing is actually drawn in the margin.
                    To actually extend the background of a drawing, see the <see cref="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphCanvasAttributes.Padding" /> attribute.
                </para>
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphCanvasAttributes.Scaling">
            <summary>
                <para>
                    Gets or sets the aspect ratio (drawing height / drawing width) for the drawing. Note that this is adjusted before the
                    <see cref="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphCanvasAttributes.Size" /> attribute constraints are enforced. In addition, the calculations usually ignore the node sizes, so
                    the final drawing size may only approximate what is desired.
                </para>
                <para>
                    If ratio is numeric (<see cref="T:GiGraph.Dot.Types.Graphs.DotGraphScalingAspectRatio" />), it is taken as the desired aspect ratio. Then, if the
                    actual aspect ratio is less than the desired ratio, the drawing height is scaled up to achieve the desired ratio; if the
                    actual ratio is greater than that desired ratio, the drawing width is scaled up.
                </para>
                <para>
                    See also <see cref="T:GiGraph.Dot.Types.Graphs.DotGraphScaling" /> for non-numeric options of the ratio.
                </para>
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphCanvasAttributes.Viewport">
            <summary>
                <para>
                    Gets or sets the clipping window on final drawing. Supersedes any <see cref="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphCanvasAttributes.Size" /> attribute. The width and height of
                    the viewport specify precisely the final size of the output.
                </para>
                <para>
                    To specify width, height, and zoom of the final drawing, use <see cref="T:GiGraph.Dot.Types.Viewport.DotViewport" />. To also specify a central point
                    of the drawing, use <see cref="T:GiGraph.Dot.Types.Viewport.DotPointCenteredViewport" />, or, to specify a node as a central point, use
                    <see cref="T:GiGraph.Dot.Types.Viewport.DotNodeCenteredViewport" />. By default, the focus is the center of the graph bounding box, i.e., (bbx / 2,
                    bby / 2), where "bbx, bby" is the value of the bounding box attribute bb.
                </para>
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphClustersAttributes.AllowEdgeClipping">
            <summary>
                If true, allows edges between clusters (dot only, default: false). Specify a
                <see cref="P:GiGraph.Dot.Entities.Edges.Endpoints.Attributes.IDotEdgeEndpointAttributes.ClusterId" /> for an edge's head or tail to attach it to the border of the cluster with
                that identifier.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphClustersAttributes.VisualizationMode">
            <summary>
                Mode used for handling clusters (dot only; default: <see cref="F:GiGraph.Dot.Types.Clusters.DotClusterVisualizationMode.Bounded" />).
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphClustersRootAttributes.Style">
            <summary>
                Style options. Note that the options are shared with those of the graph.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphFontAttributes.Directories">
            <summary>
                Gets or sets the directory list used by libgd to search for bitmap fonts if Graphviz was not built with the fontconfig
                library. If <see cref="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphFontAttributes.Directories" /> is not set, the environment variable DOTFONTPATH is checked. If that is not set,
                GDFONTPATH is checked. If not set, libgd uses its compiled-in font path. The default path is system dependent.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphFontAttributes.Convention">
            <summary>
                Allows user control of how basic font names are represented in SVG output (svg only; default:
                <see cref="F:GiGraph.Dot.Types.Fonts.DotFontConvention.Svg" />).
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphLayoutAttributes.Engine">
            <summary>
                <para>
                    Specifies the name of the layout algorithm to use, such as dot or neato (see <see cref="T:GiGraph.Dot.Types.Layout.DotLayoutEngines" /> for a list
                    of available layout engines).
                </para>
                <para>
                    Normally, graphs should be kept independent of a type of layout. In some cases, however, it can be convenient to embed
                    the type of layout desired within the graph. For example, a graph containing position information from a layout might
                    want to record what the associated layout algorithm was. This attribute takes precedence over the -K flag or the actual
                    command name used.
                </para>
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphLayoutAttributes.Direction">
            <summary>
                Gets or sets the direction of graph layout (dot only, default: <see cref="F:GiGraph.Dot.Types.Layout.DotLayoutDirection.TopToBottom" />).
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphLayoutAttributes.EdgeOrderingMode">
            <summary>
                Determines how inedges and outedges, that is, edges with a node as their head or tail node respectively, are ordered (dot
                only). If defined on a graph or subgraph, the value is applied to all nodes in the graph or subgraph. Note that the graph
                attribute takes precedence over a corresponding attribute on nodes.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphLayoutAttributes.ForceExternalLabels">
            <summary>
                If true, all node <see cref="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeAttributes.ExternalLabel" /> and edge <see cref="P:GiGraph.Dot.Entities.Edges.Attributes.IDotEdgeAttributes.ExternalLabel" />
                attributes are placed, even if there is some overlap with nodes or other labels (default: true).
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphLayoutAttributes.Rotation">
            <summary>
                Rotates the final layout counter-clockwise by the specified number of degrees (sfdp only; default: 0).
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphLayoutAttributes.ConcentrateEdges">
            <summary>
                If true, edge concentrators are used (default: false). This merges multiedges into a single edge, and causes partially
                parallel edges to share part of their paths. The latter feature is not yet available outside of dot.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphLayoutAttributes.NodeSeparation">
            <summary>
                <para>
                    In dot, this specifies the minimum space between two adjacent nodes in the same rank, in inches (default: 0.25, minimum:
                    0.02).
                </para>
                <para>
                    For other layouts, this affects the spacing between loops on a single node, or multiedges between a pair of nodes.
                </para>
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphLayoutAttributes.NodeRank">
            <summary>
                Gets or sets the rank constraints on the nodes in the graph (dot only). See also <see cref="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphLayoutAttributes.UseGlobalRanking" />.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphLayoutAttributes.RankSeparation">
            <summary>
                <para>
                    In dot, this gives the desired rank separation, in inches (<see cref="T:GiGraph.Dot.Types.Ranks.DotRankSeparation" />; default: 0.5, minimum: 0.02.
                    This is the minimum vertical distance between the bottom of the nodes in one rank and the tops of nodes in the next.
                </para>
                <para>
                    In twopi, this attribute specifies the radial separation of concentric circles (default: 1, minimum: 0.02). For twopi,
                    this can also be a list of doubles (<see cref="T:GiGraph.Dot.Types.Ranks.DotRadialRankSeparation" />). The first double specifies the radius of the
                    inner circle; the second double specifies the increase in radius from the first circle to the second; etc. If there are
                    more circles than numbers, the last number is used as the increment for the remainder.
                </para>
                <para>
                    Twopi, dot only.
                </para>
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphLayoutAttributes.Packing">
            <summary>
                <para>
                    If enabled (see <see cref="T:GiGraph.Dot.Types.Packing.DotPackingToggle" />), each connected component of the graph is laid out separately, and then
                    the graphs are packed together.
                </para>
                <para>
                    If an integral value is specified (see <see cref="T:GiGraph.Dot.Types.Packing.DotPackingMargin" />), this is used as the size, in
                    <see href="http://www.graphviz.org/doc/info/attrs.html#points">
                        points
                    </see>
                    , of a margin around each part; otherwise, a default margin of 8 is used.
                </para>
                <para>
                    If disabled (see <see cref="T:GiGraph.Dot.Types.Packing.DotPackingToggle" />), the entire graph is laid out together. The granularity and method of
                    packing is influenced by the <see cref="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphLayoutAttributes.PackingMode" /> attribute.
                </para>
                <para>
                    Default: disabled (see <see cref="T:GiGraph.Dot.Types.Packing.DotPackingToggle" />).
                </para>
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphLayoutAttributes.PackingMode">
            <summary>
                Indicates how connected components should be packed (default: <see cref="F:GiGraph.Dot.Types.Packing.DotPackingGranularity.Node" />). Note that
                specifying a value for this property will automatically turn on packing as though one had set <see cref="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphLayoutAttributes.Packing" /> = true.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphLayoutAttributes.RepeatCrossingMinimization">
            <summary>
                If true and there are multiple clusters, runs crossing minimization a second time (dot only, default: true).
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphLayoutAttributes.UseGlobalRanking">
            <summary>
                <para>
                    Determines whether to use a single global ranking, ignoring clusters (dot only, default: false).
                </para>
                <para>
                    The original ranking algorithm in dot is recursive on clusters. This can produce fewer ranks and a more compact layout,
                    but sometimes at the cost of a head node being placed on a higher rank than the tail node. It also assumes that a node is
                    not constrained in separate, incompatible subgraphs. For example, a node cannot be in a cluster and also be constrained
                    by a rank of <see cref="F:GiGraph.Dot.Types.Ranks.DotRank.Same" /> with a node not in the cluster (see
                    <see cref="P:GiGraph.Dot.Entities.Subgraphs.Attributes.IDotSubgraphAttributes.NodeRank" /> on subgraph attributes).
                </para>
                <para>
                    This allows nodes to be subject to multiple constraints. Rank constraints will usually take precedence over edge
                    constraints. See also <see cref="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphLayoutAttributes.NodeRank" />.
                </para>
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphLayoutAttributes.SortIndex">
            <summary>
                Gets or sets the sorting index of the graph (default: 0). If <see cref="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphLayoutAttributes.PackingMode" /> indicates an array packing, this
                attribute specifies an insertion order among the components, with smaller values inserted first.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphRootAttributes.Clusters">
            <summary>
                Attributes applied to clusters.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphRootAttributes.Font">
            <summary>
                Font attributes.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphRootAttributes.Style">
            <summary>
                Style options. Note that the options are shared with those specified for <see cref="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphRootAttributes.Clusters" />.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphRootAttributes.SvgStyleSheet">
            <summary>
                Style sheet attributes used for SVG output.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphRootAttributes.Layout">
            <summary>
                Graph layout options.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphRootAttributes.Canvas">
            <summary>
                Graph canvas attributes.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphRootAttributes.LabelAlignment">
            <summary>
                Horizontal and vertical label alignment options.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphRootAttributes.Hyperlink">
            <summary>
                Hyperlink attributes.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphSvgStyleSheetAttributes.Url">
            <summary>
                A URL or pathname specifying an XML style sheet, used in SVG output. Combine with
                <see cref="P:GiGraph.Dot.Entities.Attributes.Properties.Common.SvgStyleSheet.IDotSvgStyleSheetAttributes.Class" /> on this or other elements to style them using CSS selectors.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.Collections.DotCommonGraphCollection`1.Annotation">
            <summary>
                The annotation to write in the output DOT script as a comment in the context of the element or section represented by the
                current object.
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Graphs.Collections.DotCommonGraphCollection`1.Add(`0,System.Action{`0})">
            <summary>
                Adds a graph to the collection and initializes it.
            </summary>
            <param name="graph">
                The graph to add.
            </param>
            <param name="init">
                An optional graph initializer delegate.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Graphs.Collections.DotGraphSectionCollection`1.Add(`0,System.Action{`0})">
            <summary>
                Adds the specified graph section to the collection and optionally initializes its content.
            </summary>
            <param name="section">
                The section to add.
            </param>
            <param name="init">
                An optional section initializer delegate.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Graphs.Collections.DotGraphSectionCollection`1.Add(System.Action{`0})">
            <summary>
                Adds a graph section to the collection and optionally initializes its content.
            </summary>
            <param name="init">
                An optional section initializer delegate.
            </param>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.DotCommonGraphSection.Nodes">
            <summary>
                Gets the collection of nodes.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.DotCommonGraphSection.Edges">
            <summary>
                <para>
                    Gets the collection of edges.
                </para>
                <para>
                    Note that when an edge joins two endpoints belonging to two different subgraphs (or where one belongs to the root graph,
                    and the other belongs to a subgraph), then it should be added to the common upper level graph or subgraph, not to the
                    current graph.
                </para>
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.DotCommonGraphSection.Subgraphs">
            <summary>
                <para>
                    Gets the collection of subgraphs.
                </para>
                <para>
                    Use a subgraph when you want to have more granular control on the layout of the nodes it contains by constraining them
                    within a rank (see the subgraph's <see cref="P:GiGraph.Dot.Entities.Subgraphs.Attributes.IDotSubgraphAttributes.NodeRank" /> attribute). However, when you want the
                    nodes to be drawn together in a bounding rectangle, that has a custom color and fill, use a cluster instead (see
                    <see cref="P:GiGraph.Dot.Entities.Graphs.DotCommonGraphSection.Clusters" />). You can use either of these types to set a common style of nodes and edges within them.
                </para>
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.DotCommonGraphSection.Clusters">
            <summary>
                <para>
                    Gets the collection of clusters. A cluster is a collection of nodes and edges drawn within a bounding rectangle.
                </para>
                <para>
                    Use a cluster when you want the nodes within it to be drawn together in a bounding rectangle, that has a custom color and
                    fill. However, when you want to have more granular control on the layout of selected nodes, use a subgraph instead (see
                    <see cref="P:GiGraph.Dot.Entities.Graphs.DotCommonGraphSection.Subgraphs" />). You can use either of these types to set a common style of nodes and edges within them.
                </para>
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.DotCommonGraphSection.Annotation">
            <summary>
                The annotation to write in the output DOT script as a comment in the context of the element or section represented by the
                current object.
            </summary>
        </member>
        <member name="T:GiGraph.Dot.Entities.Graphs.DotGraph">
            <summary>
                Represents a graph (the root DOT graph).
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Graphs.DotGraph.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
                Creates and initializes a graph instance.
            </summary>
            <param name="id">
                The identifier of the graph. Pass null if no identifier should be used.
            </param>
            <param name="directed">
                Determines if the graph should be directed. The edges of directed graphs are presented as arrows, whereas edges in undirected
                graphs are presented as lines.
            </param>
            <param name="strict">
                Determines if the graph is strict. Strict graph forbids the creation of multi-edges, i.e., there may be at most one edge with
                a given tail node and head node in the directed case.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Graphs.DotGraph.#ctor(System.Boolean,System.Boolean)">
            <summary>
                Creates and initializes a graph instance.
            </summary>
            <param name="directed">
                Determines if the graph should be directed. The edges of directed graphs are presented as arrows, whereas edges in undirected
                graphs are presented as lines.
            </param>
            <param name="strict">
                Determines if the graph is strict. Strict graph forbids the creation of multi-edges, i.e., there may be at most one edge with
                a given tail node and head node in the directed case.
            </param>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.DotGraph.IsDirected">
            <summary>
                Gets or sets a value that indicates if the graph is directed. The edges of directed graphs are presented as arrows, whereas
                edges in undirected graphs are presented as lines.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.DotGraph.IsStrict">
            <summary>
                Gets or sets a value that indicates if the graph is strict. Strict graph forbids the creation of multi-edges, i.e., there may
                be at most one edge with a given tail node and head node in the directed case.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.DotGraph.Subsections">
            <summary>
                <para>
                    The subsections of the graph. They appear consecutively in the output DOT script, and inherit the graph attributes, and
                    the global node and/or edge attributes of their predecessors. When overridden in any subsection, the new graph attributes
                    and global node/edge attributes apply to the elements the section itself contains, and also to those that belong to the
                    sections that follow it (if any).
                </para>
                <para>
                    Note that each subsection is dependent on the graph attributes and the global node and edge attributes specified by the
                    sections that precede it (including those of the root section represented by the current element). Note also that some
                    graph attributes cannot be overriden, and apply to the whole graph no matter in which section they are set.
                </para>
                <para>
                    As far as setting global node and/or edge attributes for a specific group of elements is concerned,
                    <see cref="N:GiGraph.Dot.Entities.Subgraphs" /> may be the cleaner and preferable way to achieve the effect.
                </para>
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.DotGraph.Id">
            <summary>
                Gets or sets the identifier of the graph (optional).
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.DotGraphSection.Font">
            <summary>
                Font attributes.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.DotGraphSection.Style">
            <summary>
                Style options. Note that the options are shared with those specified for <see cref="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphRootAttributes.Clusters" />.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.DotGraphSection.SvgStyleSheet">
            <summary>
                Style sheet attributes used for SVG output.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.DotGraphSection.Layout">
            <summary>
                Graph layout options.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.DotGraphSection.Canvas">
            <summary>
                Graph canvas attributes.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.DotGraphSection.LabelAlignment">
            <summary>
                Horizontal and vertical label alignment options.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.DotGraphSection.Hyperlink">
            <summary>
                Hyperlink attributes.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.DotGraphSection.EdgeShape">
            <summary>
                Controls how, and if, edges are represented. By default, the attribute is unset. How this is interpreted depends on the
                layout. For dot, the default is to draw edges as splines (<see cref="F:GiGraph.Dot.Types.Edges.DotEdgeShape.Spline" />). For all other layouts, the
                default is to draw edges as line segments (<see cref="F:GiGraph.Dot.Types.Edges.DotEdgeShape.Line" />). Note that for these latter layouts, if
                <see cref="F:GiGraph.Dot.Types.Edges.DotEdgeShape.Spline" /> is used, this requires non-overlapping nodes (cf.
                <see href="http://www.graphviz.org/doc/info/attrs.html#d:overlap">
                    overlap
                </see>
                ). If fdp is used for layout and <see cref="F:GiGraph.Dot.Types.Edges.DotEdgeShape.Compound" /> is used, then the edges are drawn to avoid clusters as
                well as nodes.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.DotGraphSection.Label">
            <summary>
                <para>
                    Gets or sets the label to display on the graph. It may be plain text (<see cref="T:System.String" />) or HTML (
                    <see cref="T:GiGraph.Dot.Types.Html.DotHtmlString" />). See also <see cref="T:GiGraph.Dot.Types.EscapeString.DotFormattedTextBuilder" /> for text justification and simple
                    formatting and <see cref="T:GiGraph.Dot.Entities.Html.Builder.DotHtmlBuilder" /> for custom text styling and defining tables. The latter one gives the most
                    possibilities (specifying font, size, color, style, images, etc.).
                </para>
                <para>
                    Examples:
                    <list type="bullet">
                        <item>
                            <description>
                                <see cref="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphAttributes.Label" /> = "My label";
                            </description>
                        </item>
                        <item>
                            <description>
                                <see cref="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphAttributes.Label" /> = new <see cref="T:GiGraph.Dot.Entities.Html.Font.Styles.DotHtmlBold" />("My label");
                            </description>
                        </item>
                        <item>
                            <description>
                                <see cref="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphAttributes.Label" /> = (<see cref="T:GiGraph.Dot.Types.Html.DotHtmlString" />) "&lt;b&gt;My label&lt;/b&gt;";
                            </description>
                        </item>
                    </list>
                </para>
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.DotGraphSection.ColorScheme">
            <summary>
                Specifies a color scheme namespace to use. If defined, specifies the context for interpreting color names. If no color scheme
                is set, the standard <see cref="F:GiGraph.Dot.Types.Colors.DotColorSchemes.X11" /> naming is used. For example, if
                <see cref="P:GiGraph.Dot.Types.Colors.DotColorSchemes.DotBrewerColorSchemes.BuGn9" /> Brewer color scheme is used, then a color named "7", e.g.
                Color.FromName("7"), will be evaluated in the context of that specific color scheme. See <see cref="T:GiGraph.Dot.Types.Colors.DotColorSchemes" /> for
                supported scheme names.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.DotGraphSection.Charset">
            <summary>
                Specifies the character encoding used when interpreting string input as a text label. The default value is "UTF-8". The other
                legal value is "iso-8859-1" or, equivalently, "Latin1". The charset attribute is case-insensitive. Note that if the character
                encoding used in the input does not match the charset value, the resulting output may be very strange.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.DotGraphSection.Comment">
            <summary>
                Comments are inserted into output. Device-dependent.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.DotGraphSection.ImageDirectories">
            <summary>
                <para>
                    Specifies a list of directories in which to look for image files used by nodes, referenced either by the
                    <see cref="P:GiGraph.Dot.Entities.Nodes.Attributes.DotNodeImageAttributes.Path" /> of their <see cref="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeRootAttributes.Image" /> attributes, or from the
                    IMG element in HTML-like labels. The string should be a list of (absolute or relative) path names, each separated by a
                    semicolon (for Windows) or a colon (all other OS). The first directory in which a file of the given name is found will be
                    used to load the image.
                </para>
                <para>
                    If not set, relative path names for image files will be interpreted with respect to the current working directory.
                </para>
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.DotGraphSection.RootNodeId">
            <summary>
                <para>
                    The identifier of a node that should be used as the center of the layout and the root of the generated spanning tree
                    (circo, twopi only).
                </para>
                <para>
                    In twopi, root will actually be the central node. In circo, the block containing the node will be central in the drawing
                    of its connected component. If not defined, twopi will pick a most central node, and circo will pick a random node.
                </para>
                <para>
                    If the attribute is defined as the empty string, twopi will reset it to name of the node picked as the root node.
                </para>
                <para>
                    For twopi, it is possible to have multiple roots, presumably one for each component. If more than one node in a component
                    is marked as the root, twopi will pick one (see the <see cref="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeAttributes.IsRoot" /> attribute on a node).
                </para>
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.DotGraphSection.ObjectId">
            <summary>
                <para>
                    Allows the graph author to provide an identifier for graph objects which is to be included in the output (svg,
                    postscript, map only).
                </para>
                <para>
                    Normal <see cref="F:GiGraph.Dot.Types.EscapeString.DotEscapeString.NodeId" />, <see cref="F:GiGraph.Dot.Types.EscapeString.DotEscapeString.EdgeDefinition" />,
                    <see cref="F:GiGraph.Dot.Types.EscapeString.DotEscapeString.GraphId" /> substitutions can be applied (see <see cref="T:GiGraph.Dot.Types.EscapeString.DotFormattedTextBuilder" />). Note,
                    however, that <see cref="F:GiGraph.Dot.Types.EscapeString.DotEscapeString.EdgeDefinition" /> does not provide a unique ID for multi-edges.
                </para>
                <para>
                    If provided, it is the responsibility of the provider to keep ID values unique for its intended downstream use. If no ID
                    attribute is provided, then a unique internal ID is used. However, this value is unpredictable by the graph writer.
                </para>
                <para>
                    If the graph provides an ID attribute, this will be used as a prefix for internally generated attributes. By making
                    internally-used attributes distinct, the user can include multiple image maps in the same document.
                </para>
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.DotGraphSection.Attributes">
            <summary>
                Provides access to the attributes of the graph.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.DotGraphSection.Clusters">
            <summary>
                <para>
                    Gets the collection of clusters. A cluster is a collection of nodes and edges drawn within a bounding rectangle.
                </para>
                <para>
                    Use a cluster when you want the nodes within it to be drawn together in a bounding rectangle, that has a custom color and
                    fill. However, when you want to have more granular control on the layout of selected nodes, use a subgraph instead (see
                    <see cref="P:GiGraph.Dot.Entities.Graphs.DotCommonGraphSection.Subgraphs" />). You can use either of these types to set a common style of nodes and edges within them.
                </para>
            </summary>
        </member>
        <member name="T:GiGraph.Dot.Entities.Html.Attributes.DotHtmlBoolAttribute">
            <summary>
                A boolean value attribute for use in the context of HTML elements.
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.Attributes.DotHtmlBoolAttribute.#ctor(System.String,System.Boolean)">
            <summary>
                Creates a new instance of the attribute.
            </summary>
            <param name="key">
                The key of the attribute.
            </param>
            <param name="value">
                The value of the attribute.
            </param>
        </member>
        <member name="T:GiGraph.Dot.Entities.Html.Attributes.DotHtmlEnumAttribute`1">
            <summary>
                An enumeration attribute for use in the context of HTML elements.
            </summary>
            <typeparam name="TEnum">
                An enumeration type whose values are annotated with the <see cref="T:GiGraph.Dot.Output.Metadata.DotAttributeValueAttribute" /> attributes.
            </typeparam>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.Attributes.DotHtmlEnumAttribute`1.#ctor(System.String,`0)">
            <summary>
                Creates a new instance of the attribute.
            </summary>
            <param name="key">
                The key of the attribute.
            </param>
            <param name="value">
                The value of the attribute.
            </param>
        </member>
        <member name="T:GiGraph.Dot.Entities.Html.Attributes.DotHtmlEscapeStringAttribute">
            <summary>
                A string attribute whose value is escaped on DOT script rendering when <see cref="T:GiGraph.Dot.Types.EscapeString.DotUnescapedString" /> is used, or is
                assumed to already be escaped when <see cref="T:GiGraph.Dot.Types.EscapeString.DotEscapedString" /> is used. For use in the context of HTML elements
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.Attributes.DotHtmlEscapeStringAttribute.#ctor(System.String,GiGraph.Dot.Types.EscapeString.DotEscapeString)">
            <summary>
                Creates a new instance of the attribute.
            </summary>
            <param name="key">
                The key of the attribute.
            </param>
            <param name="value">
                The value of the attribute.
            </param>
        </member>
        <member name="T:GiGraph.Dot.Entities.Html.Attributes.DotHtmlStringAttribute">
            <summary>
                A string attribute. The value is rendered as is in the output DOT script, so the attribute can be used for any type of value,
                not only for strings. For use in the context of HTML elements
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.Attributes.DotHtmlStringAttribute.#ctor(System.String,GiGraph.Dot.Types.EscapeString.DotEscapeString)">
            <summary>
                Creates a new instance of the attribute.
            </summary>
            <param name="key">
                The key of the attribute.
            </param>
            <param name="value">
                The value of the attribute.
            </param>
        </member>
        <member name="T:GiGraph.Dot.Entities.Html.Attributes.Factories.DotHtmlAttributeFactory">
            <summary>
                HTML element attributes factory.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Html.Attributes.Factories.DotHtmlAttributeFactory.Instance">
            <summary>
                A static factory instance.
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.Attributes.Factories.DotHtmlAttributeFactory.CreateBool(System.String,System.Boolean)">
            <summary>
                Creates a new boolean attribute.
            </summary>
            <param name="key">
                The key of the attribute.
            </param>
            <param name="value">
                The value of the attribute.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.Attributes.Factories.DotHtmlAttributeFactory.CreateString(System.String,System.String)">
            <summary>
                Creates a new string attribute.
            </summary>
            <param name="key">
                The key of the attribute.
            </param>
            <param name="value">
                The value of the attribute.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.Attributes.Factories.DotHtmlAttributeFactory.CreateEscapeString``1(System.String,``0)">
            <summary>
                Creates a new escape string attribute.
            </summary>
            <param name="key">
                The key of the attribute.
            </param>
            <param name="value">
                The value of the attribute.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.Attributes.Factories.DotHtmlAttributeFactory.CreateEnum``1(System.String,``0)">
            <summary>
                Creates a new enumeration attribute.
            </summary>
            <param name="key">
                The key of the attribute.
            </param>
            <param name="value">
                The value of the attribute.
            </param>
        </member>
        <member name="T:GiGraph.Dot.Entities.Html.Builder.DotHtmlBuilder">
            <summary>
                HTML builder.
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.Builder.DotHtmlBuilder.AppendComment(System.String)">
            <summary>
                Appends a comment to this instance.
            </summary>
            <param name="text">
                The comment to append.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.Builder.DotHtmlBuilder.#ctor">
            <summary>
                Initializes a new instance.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Html.Builder.DotHtmlBuilder.Count">
            <summary>
                Gets the number of entities in this builder.
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.Builder.DotHtmlBuilder.Append``1(``0,System.Action{GiGraph.Dot.Entities.Html.Builder.DotHtmlBuilder})">
            <summary>
                Appends an entity with customizable content to this instance.
            </summary>
            <param name="entity">
                The entity to append.
            </param>
            <param name="init">
                A content initialization delegate.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.Builder.DotHtmlBuilder.AppendEntity``1(``0,System.Action{``0})">
            <summary>
                Appends an entity to this instance.
            </summary>
            <param name="entity">
                The entity to append.
            </param>
            <param name="init">
                An entity initialization delegate.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.Builder.DotHtmlBuilder.AppendHtml(System.String)">
            <summary>
                Appends custom HTML to this instance.
            </summary>
            <param name="html">
                The HTML to append.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.Builder.DotHtmlBuilder.Build">
            <summary>
                Builds output HTML from the content of the builder.
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.Builder.DotHtmlBuilder.AppendElement(System.String,System.Action{GiGraph.Dot.Entities.Html.DotHtmlElement})">
            <summary>
                Appends a custom element to this instance and initializes it.
            </summary>
            <param name="elementName">
                The name of the element to append.
            </param>
            <param name="init">
                An element initialization delegate.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.Builder.DotHtmlBuilder.AppendVoidElement(System.String,System.Action{GiGraph.Dot.Entities.Html.DotHtmlVoidElement})">
            <summary>
                Appends a custom void element to this instance and initializes it.
            </summary>
            <param name="elementName">
                The name of the element to append.
            </param>
            <param name="init">
                An element initialization delegate.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.Builder.DotHtmlBuilder.AppendFont(System.Action{GiGraph.Dot.Entities.Html.Builder.DotHtmlBuilder})">
            <summary>
                Appends a font element to this instance and builds its content.
            </summary>
            <param name="init">
                A content initialization delegate.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.Builder.DotHtmlBuilder.AppendFont(GiGraph.Dot.Types.Fonts.DotFont,System.Action{GiGraph.Dot.Entities.Html.Builder.DotHtmlBuilder})">
            <summary>
                Appends a font element to this instance and builds its content.
            </summary>
            <param name="font">
                The font to use.
            </param>
            <param name="init">
                A content initialization delegate.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.Builder.DotHtmlBuilder.AppendStyledFont(GiGraph.Dot.Types.Fonts.DotStyledFont,System.Action{GiGraph.Dot.Entities.Html.Builder.DotHtmlBuilder})">
            <summary>
                Appends a font element with nested font style elements to this instance and builds the content of the bottom one.
            </summary>
            <param name="font">
                The font to use.
            </param>
            <param name="init">
                A content initialization delegate.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.Builder.DotHtmlBuilder.AppendBold(System.Action{GiGraph.Dot.Entities.Html.Builder.DotHtmlBuilder})">
            <summary>
                Appends a bold element to this instance and builds its content.
            </summary>
            <param name="init">
                A content initialization delegate.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.Builder.DotHtmlBuilder.AppendItalic(System.Action{GiGraph.Dot.Entities.Html.Builder.DotHtmlBuilder})">
            <summary>
                Appends an italic element to this instance and builds its content.
            </summary>
            <param name="init">
                A content initialization delegate.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.Builder.DotHtmlBuilder.AppendUnderline(System.Action{GiGraph.Dot.Entities.Html.Builder.DotHtmlBuilder})">
            <summary>
                Appends an underline element to this instance and builds its content.
            </summary>
            <param name="init">
                A content initialization delegate.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.Builder.DotHtmlBuilder.AppendOverline(System.Action{GiGraph.Dot.Entities.Html.Builder.DotHtmlBuilder})">
            <summary>
                Appends an overline element to this instance and builds its content.
            </summary>
            <param name="init">
                A content initialization delegate.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.Builder.DotHtmlBuilder.AppendSubscript(System.Action{GiGraph.Dot.Entities.Html.Builder.DotHtmlBuilder})">
            <summary>
                Appends a subscript element to this instance and builds its content.
            </summary>
            <param name="init">
                A content initialization delegate.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.Builder.DotHtmlBuilder.AppendSuperscript(System.Action{GiGraph.Dot.Entities.Html.Builder.DotHtmlBuilder})">
            <summary>
                Appends a superscript element to this instance and builds its content.
            </summary>
            <param name="init">
                A content initialization delegate.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.Builder.DotHtmlBuilder.AppendStrikethrough(System.Action{GiGraph.Dot.Entities.Html.Builder.DotHtmlBuilder})">
            <summary>
                Appends a strikethrough element to this instance and builds its content.
            </summary>
            <param name="init">
                A content initialization delegate.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.Builder.DotHtmlBuilder.AppendStyled(GiGraph.Dot.Types.Fonts.DotFontStyles,System.Action{GiGraph.Dot.Entities.Html.Builder.DotHtmlBuilder})">
            <summary>
                Appends nested font style elements to this instance based on the specified style and initializes the content of the bottom
                one.
            </summary>
            <param name="fontStyle">
                The font style to use.
            </param>
            <param name="init">
                A content initialization delegate.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.Builder.DotHtmlBuilder.AppendImage(System.String,System.Nullable{GiGraph.Dot.Types.Images.DotImageScaling})">
            <summary>
                Appends an image element to this instance.
            </summary>
            <param name="source">
                Specifies the image file to be displayed.
            </param>
            <param name="scaling">
                Specifies how the image will use any extra space available in its cell.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.Builder.DotHtmlBuilder.AppendLine(System.String,System.Nullable{GiGraph.Dot.Types.Alignment.DotHorizontalAlignment})">
            <summary>
                Appends a line of text to this instance and optionally sets alignment for its individual lines if the text is composed of
                multiple lines.
            </summary>
            <param name="text">
                The text to append.
            </param>
            <param name="lineAlignment">
                Specifies horizontal placement of the line.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.Builder.DotHtmlBuilder.AppendLine(System.Nullable{GiGraph.Dot.Types.Alignment.DotHorizontalAlignment})">
            <summary>
                Appends a line break to this instance.
            </summary>
            <param name="lineAlignment">
                Specifies horizontal placement of the preceding line of text.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.Builder.DotHtmlBuilder.AppendHorizontalRule">
            <summary>
                Appends a horizontal rule to this instance.
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.Builder.DotHtmlBuilder.AppendVerticalRule">
            <summary>
                Appends a vertical rule to this instance.
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.Builder.DotHtmlBuilder.AppendBoldText(System.String,System.Nullable{GiGraph.Dot.Types.Alignment.DotHorizontalAlignment})">
            <summary>
                Appends bold text to this instance.
            </summary>
            <param name="text">
                The text to append.
            </param>
            <param name="lineAlignment">
                Specifies horizontal placement of lines if multiline text is specified.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.Builder.DotHtmlBuilder.AppendItalicText(System.String,System.Nullable{GiGraph.Dot.Types.Alignment.DotHorizontalAlignment})">
            <summary>
                Appends italic text to this instance.
            </summary>
            <param name="text">
                The text to append.
            </param>
            <param name="lineAlignment">
                Specifies horizontal placement of lines if multiline text is specified.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.Builder.DotHtmlBuilder.AppendUnderlineText(System.String,System.Nullable{GiGraph.Dot.Types.Alignment.DotHorizontalAlignment})">
            <summary>
                Appends underline text to this instance.
            </summary>
            <param name="text">
                The text to append.
            </param>
            <param name="lineAlignment">
                Specifies horizontal placement of lines if multiline text is specified.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.Builder.DotHtmlBuilder.AppendOverlineText(System.String,System.Nullable{GiGraph.Dot.Types.Alignment.DotHorizontalAlignment})">
            <summary>
                Appends overline text to this instance.
            </summary>
            <param name="text">
                The text to append.
            </param>
            <param name="lineAlignment">
                Specifies horizontal placement of lines if multiline text is specified.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.Builder.DotHtmlBuilder.AppendSubscriptText(System.String,System.Nullable{GiGraph.Dot.Types.Alignment.DotHorizontalAlignment})">
            <summary>
                Appends subscript text to this instance.
            </summary>
            <param name="text">
                The text to append.
            </param>
            <param name="lineAlignment">
                Specifies horizontal placement of lines if multiline text is specified.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.Builder.DotHtmlBuilder.AppendSuperscriptText(System.String,System.Nullable{GiGraph.Dot.Types.Alignment.DotHorizontalAlignment})">
            <summary>
                Appends superscript text to this instance.
            </summary>
            <param name="text">
                The text to append.
            </param>
            <param name="lineAlignment">
                Specifies horizontal placement of lines if multiline text is specified.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.Builder.DotHtmlBuilder.AppendStrikethroughText(System.String,System.Nullable{GiGraph.Dot.Types.Alignment.DotHorizontalAlignment})">
            <summary>
                Appends strikethrough text to this instance.
            </summary>
            <param name="text">
                The text to append.
            </param>
            <param name="lineAlignment">
                Specifies horizontal placement of lines if multiline text is specified.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.Builder.DotHtmlBuilder.AppendStyledText(System.String,GiGraph.Dot.Types.Fonts.DotFontStyles,System.Nullable{GiGraph.Dot.Types.Alignment.DotHorizontalAlignment})">
            <summary>
                Appends styled text to this instance.
            </summary>
            <param name="text">
                The text to append.
            </param>
            <param name="fontStyle">
                The font style to use.
            </param>
            <param name="lineAlignment">
                Specifies horizontal placement of lines if multiline text is specified.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.Builder.DotHtmlBuilder.AppendStyledText(System.String,GiGraph.Dot.Types.Fonts.DotStyledFont,System.Nullable{GiGraph.Dot.Types.Alignment.DotHorizontalAlignment})">
            <summary>
                Appends styled text to this instance.
            </summary>
            <param name="text">
                The text to append.
            </param>
            <param name="font">
                The font to use.
            </param>
            <param name="lineAlignment">
                Specifies horizontal placement of lines if multiline text is specified.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.Builder.DotHtmlBuilder.AppendTable(System.Action{GiGraph.Dot.Entities.Html.Table.DotHtmlTable})">
            <summary>
                Appends a table to this instance and builds its content.
            </summary>
            <param name="init">
                A table initialization delegate.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.Builder.DotHtmlBuilder.AppendText(System.String,System.Nullable{GiGraph.Dot.Types.Alignment.DotHorizontalAlignment})">
            <summary>
                Appends text to this instance and optionally sets alignment for its individual lines if the text is composed of multiple
                lines.
            </summary>
            <param name="text">
                The text to append.
            </param>
            <param name="lineAlignment">
                Specifies horizontal placement of lines if multiline text is specified.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.Builder.DotHtmlBuilder.AppendText(System.String,GiGraph.Dot.Types.Fonts.DotFont,System.Nullable{GiGraph.Dot.Types.Alignment.DotHorizontalAlignment})">
            <summary>
                Appends text with the specified font to this instance.
            </summary>
            <param name="text">
                The text to append.
            </param>
            <param name="font">
                The font to use.
            </param>
            <param name="lineAlignment">
                Specifies horizontal placement of lines if multiline text is specified.
            </param>
        </member>
        <member name="T:GiGraph.Dot.Entities.Html.DotHtml">
            <summary>
                Contains ready HTML text to be rendered as is, without further processing.
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.DotHtml.#ctor(System.String)">
            <summary>
                Initializes a new instance with the specified HTML.
            </summary>
            <param name="html">
                The HTML to initialize the instance with.
            </param>
        </member>
        <member name="T:GiGraph.Dot.Entities.Html.DotHtmlComment">
            <summary>
                Represents an HTML comment tag.
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.DotHtmlComment.#ctor(System.String)">
            <summary>
                Creates a new HTML comment tag instance.
            </summary>
            <param name="text">
                The comment text.
            </param>
        </member>
        <member name="T:GiGraph.Dot.Entities.Html.DotHtmlElement">
            <summary>
                An HTML element with optional attributes and child elements.
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.DotHtmlElement.#ctor(System.String)">
            <summary>
                Initializes an HTML element with the given name.
            </summary>
            <param name="name">
                The tag name to use for the element.
            </param>
        </member>
        <member name="P:GiGraph.Dot.Entities.Html.DotHtmlElement.Content">
            <summary>
                Gets the content items of the element.
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.DotHtmlElement.SetContent(GiGraph.Dot.Entities.Html.IDotHtmlEntity)">
            <summary>
                Uses the specified HTML entity as the content of the current element.
            </summary>
            <param name="entity">
                The element to set as the content.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.DotHtmlElement.SetContent(System.String,System.Nullable{GiGraph.Dot.Types.Alignment.DotHorizontalAlignment})">
            <summary>
                Uses the specified text as the content of the current element.
            </summary>
            <param name="text">
                The text to set as the content.
            </param>
            <param name="lineAlignment">
                Specifies horizontal placement of lines if multiline text is specified.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.DotHtmlElement.SetContent(System.Action{GiGraph.Dot.Entities.Html.Builder.DotHtmlBuilder})">
            <summary>
                Uses the builder to build a HTML entity to use as the content of the current element.
            </summary>
            <param name="build">
                The HTML builder delegate.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.DotHtmlElement.SetHtmlContent(System.String)">
            <summary>
                Uses the specified HTML as the content of the current element.
            </summary>
            <param name="html">
                The HTML to use as the content.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.DotHtmlElement.System#Collections#Generic#IEnumerable{GiGraph#Dot#Entities#Html#IDotHtmlEntity}#GetEnumerator">
            <summary>
                Returns an enumerator that iterates through the content of the element.
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.DotHtmlElement.System#Collections#IEnumerable#GetEnumerator">
            <summary>
                Returns an enumerator that iterates through the content of the element.
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.DotHtmlElement.Add(GiGraph.Dot.Entities.Html.IDotHtmlEntity)">
            <summary>
                Adds an element to the <see cref="P:GiGraph.Dot.Entities.Html.DotHtmlElement.Content" /> collection.
            </summary>
            <param name="item">
                The entity to add.
            </param>
        </member>
        <member name="T:GiGraph.Dot.Entities.Html.DotHtmlEntity">
            <summary>
                Represents an HTML entity.
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.DotHtmlEntity.ToHtml">
            <summary>
                Converts the object to an HTML string. Applies the default (global) HTML syntax and formatting rules.
            </summary>
        </member>
        <member name="T:GiGraph.Dot.Entities.Html.DotHtmlEntity`1">
            <summary>
                Represents an HTML entity adapter. Useful for wrapping <see cref="T:GiGraph.Dot.Entities.Html.IDotHtmlEntity" /> objects, which are not implicitly
                convertible, so cannot be assigned directly to a label of a DOT element.
            </summary>
            <typeparam name="TEntity">
                The type of entity to wrap.
            </typeparam>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.DotHtmlEntity`1.#ctor(`0)">
            <summary>
                Initializes a new instance.
            </summary>
            <param name="entity">
                The entity to assign to the instance.
            </param>
        </member>
        <member name="P:GiGraph.Dot.Entities.Html.DotHtmlEntity`1.Entity">
            <summary>
                The entity associated with the instance.
            </summary>
        </member>
        <member name="T:GiGraph.Dot.Entities.Html.DotHtmlEntityCollection">
            <summary>
                Represents an HTML entity collection.
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.DotHtmlEntityCollection.#ctor(GiGraph.Dot.Entities.Html.IDotHtmlEntity[])">
            <summary>
                Creates a new entity collection.
            </summary>
            <param name="entities">
                The entities to initialize the collection with.
            </param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null collection is passed.
            </exception>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.DotHtmlEntityCollection.#ctor(System.Collections.Generic.IEnumerable{GiGraph.Dot.Entities.Html.IDotHtmlEntity})">
            <summary>
                Creates a new entity collection.
            </summary>
            <param name="entities">
                The entities to initialize the collection with.
            </param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when a null collection is passed.
            </exception>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.DotHtmlEntityCollection.ToHtml">
            <summary>
                Converts the object to an HTML string. Applies the default (global) HTML syntax and formatting rules.
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.DotHtmlEntityCollection.Add``1(``0,System.Action{``0})">
            <summary>
                Adds a new HTML entity to the collection.
            </summary>
            <param name="entity">
                The entity to add.
            </param>
            <param name="init">
                An optional entity initializer.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.DotHtmlEntityCollection.AddRange(GiGraph.Dot.Entities.Html.IDotHtmlEntity[])">
            <summary>
                Adds new HTML entities to the collection.
            </summary>
            <param name="entities">
                The entities to add.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.DotHtmlEntityCollection.AddHtml(System.String)">
            <summary>
                Appends the specified HTML to the content of the element.
            </summary>
            <param name="html">
                The html to add to the content of the element.
            </param>
        </member>
        <member name="T:GiGraph.Dot.Entities.Html.DotHtmlReadOnlyEntity`1">
            <summary>
                A wrapper for HTML entities for the purpose of memory optimization when an entity may be reused.
            </summary>
            <typeparam name="TEntity">
                The type of entity.
            </typeparam>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.DotHtmlReadOnlyEntity`1.#ctor(`0)">
            <summary>
                Initializes a new instance.
            </summary>
            <param name="entity">
                The entity to assign to the instance.
            </param>
        </member>
        <member name="T:GiGraph.Dot.Entities.Html.DotHtmlTag">
            <summary>
                Represents an HTML tag with optional attributes.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Html.DotHtmlTag.Attributes">
            <summary>
                Gets the collection of attributes of the element.
            </summary>
        </member>
        <member name="T:GiGraph.Dot.Entities.Html.DotHtmlVoidElement">
            <summary>
                Represents a void HTML element with optional attributes.
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.DotHtmlVoidElement.#ctor(System.String)">
            <summary>
                Initializes a void HTML element with the given name.
            </summary>
            <param name="name">
                The tag name to use.
            </param>
        </member>
        <member name="T:GiGraph.Dot.Entities.Html.Font.Attributes.IDotHtmlFontAttributes">
            <summary>
                The attributes of an HTML &lt;font&gt; element.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Html.Font.Attributes.IDotHtmlFontAttributes.Name">
            <summary>
                Specifies the font to use within the scope of the current element. It can be overridden by a corresponding attribute in
                descendents. By default, the font name is determined by the corresponding node, edge or graph.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Html.Font.Attributes.IDotHtmlFontAttributes.Size">
            <summary>
                Specifies the size of the font, in points, to use within the scope of the current element. It can be overridden by a
                corresponding attribute in descendents. By default, the font size is determined by the corresponding node, edge or graph.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Html.Font.Attributes.IDotHtmlFontAttributes.Color">
            <summary>
                Sets the color of the font within the scope of the current element. It can be overridden by a corresponding attribute in
                descendents. By default, the font color is determined by the corresponding node, edge or graph.
            </summary>
        </member>
        <member name="T:GiGraph.Dot.Entities.Html.Font.DotHtmlFont">
            <summary>
                An HTML &lt;font&gt; element. Supports <see cref="T:GiGraph.Dot.Entities.Html.Table.DotHtmlTable" />, text and text styling elements as the content.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Html.Font.DotHtmlFont.Name">
            <summary>
                Specifies the font to use within the scope of the current element. It can be overridden by a corresponding attribute in
                descendents. By default, the font name is determined by the corresponding node, edge or graph.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Html.Font.DotHtmlFont.Size">
            <summary>
                Specifies the size of the font, in points, to use within the scope of the current element. It can be overridden by a
                corresponding attribute in descendents. By default, the font size is determined by the corresponding node, edge or graph.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Html.Font.DotHtmlFont.Color">
            <summary>
                Sets the color of the font within the scope of the current element. It can be overridden by a corresponding attribute in
                descendents. By default, the font color is determined by the corresponding node, edge or graph.
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.Font.DotHtmlFont.Set(System.String,System.Nullable{System.Double},GiGraph.Dot.Types.Colors.DotColor)">
            <summary>
                Sets font attributes.
            </summary>
            <param name="name">
                Font name.
            </param>
            <param name="size">
                Font size.
            </param>
            <param name="color">
                Font color.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.Font.DotHtmlFont.Set(GiGraph.Dot.Types.Fonts.DotFont)">
            <summary>
                Sets font attributes.
            </summary>
            <param name="attributes">
                The attributes to set.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.Font.DotHtmlFont.Set(GiGraph.Dot.Entities.Html.Font.Attributes.IDotHtmlFontAttributes)">
            <summary>
                Copies font attributes from the specified instance.
            </summary>
            <param name="attributes">
                The instance to copy the attributes from.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.Font.DotHtmlFont.#ctor(System.String,System.Nullable{System.Double},GiGraph.Dot.Types.Colors.DotColor)">
            <summary>
                Initializes a new font element instance.
            </summary>
            <param name="name">
                Specifies the font to use within the scope of the current element.
            </param>
            <param name="size">
                Specifies the size of the font, in points, to use within the scope of the current element.
            </param>
            <param name="color">
                Sets the color of the font within the scope of the current element.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.Font.DotHtmlFont.#ctor(GiGraph.Dot.Types.Fonts.DotFont)">
            <summary>
                Initializes a new font element instance.
            </summary>
            <param name="font">
                The font to set.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.Font.DotHtmlFont.#ctor(GiGraph.Dot.Entities.Html.Font.Attributes.IDotHtmlFontAttributes)">
            <summary>
                Initializes a new font element instance.
            </summary>
            <param name="source">
                The font to set.
            </param>
        </member>
        <member name="P:GiGraph.Dot.Entities.Html.Font.DotHtmlFont.Attributes">
            <summary>
                Provides access to the attributes of the font.
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.Font.DotHtmlFont.FromStyledFont(GiGraph.Dot.Types.Fonts.DotStyledFont,GiGraph.Dot.Entities.Html.DotHtmlElement@)">
            <summary>
                Creates an appropriate nested structure of HTML tags based on the specified font and style.
            </summary>
            <param name="font">
                The font and/or style to apply.
            </param>
            <param name="contentElement">
                The bottom-level element to embed content in.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.Font.DotHtmlFont.WithEntity(GiGraph.Dot.Entities.Html.IDotHtmlEntity,GiGraph.Dot.Types.Fonts.DotFont)">
            <summary>
                Embeds the entity in appropriate HTML tags based on the specified font style.
            </summary>
            <param name="entity">
                The entity to embed in font and style elements. Only text and table elements are supported (including collections of those).
                See
                <see href="https://graphviz.org/doc/info/shapes.html#html">
                    grammar
                </see>
                for more details.
            </param>
            <param name="font">
                The font and/or style to apply.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.Font.DotHtmlFont.WithEntity(GiGraph.Dot.Entities.Html.IDotHtmlEntity,GiGraph.Dot.Types.Fonts.DotStyledFont)">
            <summary>
                Embeds the entity in appropriate HTML tags based on the specified font style.
            </summary>
            <param name="entity">
                The entity to embed in font and style elements. Only text and table elements are supported (including collections of those).
                See
                <see href="https://graphviz.org/doc/info/shapes.html#html">
                    grammar
                </see>
                for more details.
            </param>
            <param name="font">
                The font and/or style to apply.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.Font.DotHtmlFont.WithText(System.String,GiGraph.Dot.Types.Fonts.DotFont,System.Nullable{GiGraph.Dot.Types.Alignment.DotHorizontalAlignment})">
            <summary>
                Embeds the text in appropriate HTML tags based on the specified font style.
            </summary>
            <param name="text">
                The text to embed in font and style elements.
            </param>
            <param name="font">
                The font and/or style to apply.
            </param>
            <param name="lineAlignment">
                Specifies horizontal placement of lines if multiline text is specified.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.Font.DotHtmlFont.WithText(System.String,GiGraph.Dot.Types.Fonts.DotStyledFont,System.Nullable{GiGraph.Dot.Types.Alignment.DotHorizontalAlignment})">
            <summary>
                Embeds the text in appropriate HTML tags based on the specified font style.
            </summary>
            <param name="text">
                The text to embed in font and style elements.
            </param>
            <param name="font">
                The font and/or style to apply.
            </param>
            <param name="lineAlignment">
                Specifies horizontal placement of lines if multiline text is specified.
            </param>
        </member>
        <member name="T:GiGraph.Dot.Entities.Html.Font.Styles.DotHtmlBold">
            <summary>
                An HTML bold text element (&lt;b&gt;).
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.Font.Styles.DotHtmlBold.#ctor">
            <summary>
                Creates a new instance.
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.Font.Styles.DotHtmlBold.#ctor(System.String,System.Nullable{GiGraph.Dot.Types.Alignment.DotHorizontalAlignment})">
            <summary>
                Creates a new instance with the specified text as its content.
            </summary>
            <param name="text">
                The text to set as the content.
            </param>
            <param name="lineAlignment">
                Specifies horizontal placement of lines if multiline text is specified.
            </param>
        </member>
        <member name="T:GiGraph.Dot.Entities.Html.Font.Styles.DotHtmlFontStyle">
            <summary>
                An HTML font style element.
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.Font.Styles.DotHtmlFontStyle.FromStyle(GiGraph.Dot.Types.Fonts.DotFontStyles,GiGraph.Dot.Entities.Html.Font.Styles.DotHtmlFontStyle@)">
            <summary>
                Creates an appropriate nested structure of HTML tags based on the specified font style. Returns null for the
                <see cref="F:GiGraph.Dot.Types.Fonts.DotFontStyles.Normal" /> font style.
            </summary>
            <param name="style">
                The style to apply to the entities.
            </param>
            <param name="contentElement">
                The bottom-level element to embed content in. Returns null for the <see cref="F:GiGraph.Dot.Types.Fonts.DotFontStyles.Normal" /> font style.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.Font.Styles.DotHtmlFontStyle.WithEntity(GiGraph.Dot.Entities.Html.IDotHtmlEntity,GiGraph.Dot.Types.Fonts.DotFontStyles)">
            <summary>
                Embeds the entity in appropriate HTML tags based on the specified font style.
            </summary>
            <param name="entity">
                The entity to embed in font style elements. Only text and table elements are supported (including collections of those). See
                <see href="https://graphviz.org/doc/info/shapes.html#html">
                    grammar
                </see>
                for more details.
            </param>
            <param name="style">
                The style to apply to the entities.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.Font.Styles.DotHtmlFontStyle.WithText(System.String,GiGraph.Dot.Types.Fonts.DotFontStyles,System.Nullable{GiGraph.Dot.Types.Alignment.DotHorizontalAlignment})">
            <summary>
                Embeds the text in appropriate HTML tags based on the specified font style.
            </summary>
            <param name="text">
                The text to style.
            </param>
            <param name="style">
                The style to apply to the text.
            </param>
            <param name="lineAlignment">
                Specifies horizontal placement of lines if multiline text is specified.
            </param>
        </member>
        <member name="T:GiGraph.Dot.Entities.Html.Font.Styles.DotHtmlItalic">
            <summary>
                An HTML italicised text element (&lt;i&gt;).
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.Font.Styles.DotHtmlItalic.#ctor">
            <summary>
                Creates a new instance.
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.Font.Styles.DotHtmlItalic.#ctor(System.String,System.Nullable{GiGraph.Dot.Types.Alignment.DotHorizontalAlignment})">
            <summary>
                Creates a new instance with the specified text as its content.
            </summary>
            <param name="text">
                The text to set as the content.
            </param>
            <param name="lineAlignment">
                Specifies horizontal placement of lines if multiline text is specified.
            </param>
        </member>
        <member name="T:GiGraph.Dot.Entities.Html.Font.Styles.DotHtmlOverline">
            <summary>
                An HTML overline text element (&lt;o&gt;).
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.Font.Styles.DotHtmlOverline.#ctor">
            <summary>
                Creates a new instance.
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.Font.Styles.DotHtmlOverline.#ctor(System.String,System.Nullable{GiGraph.Dot.Types.Alignment.DotHorizontalAlignment})">
            <summary>
                Creates a new instance with the specified text as its content.
            </summary>
            <param name="text">
                The text to set as the content.
            </param>
            <param name="lineAlignment">
                Specifies horizontal placement of lines if multiline text is specified.
            </param>
        </member>
        <member name="T:GiGraph.Dot.Entities.Html.Font.Styles.DotHtmlStrikethrough">
            <summary>
                An HTML strikethrough text element (&lt;s&gt;).
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.Font.Styles.DotHtmlStrikethrough.#ctor">
            <summary>
                Creates a new instance.
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.Font.Styles.DotHtmlStrikethrough.#ctor(System.String,System.Nullable{GiGraph.Dot.Types.Alignment.DotHorizontalAlignment})">
            <summary>
                Creates a new instance with the specified text as its content.
            </summary>
            <param name="text">
                The text to set as the content.
            </param>
            <param name="lineAlignment">
                Specifies horizontal placement of lines if multiline text is specified.
            </param>
        </member>
        <member name="T:GiGraph.Dot.Entities.Html.Font.Styles.DotHtmlSubscript">
            <summary>
                An HTML subscript text element (&lt;sub&gt;).
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.Font.Styles.DotHtmlSubscript.#ctor">
            <summary>
                Creates a new instance.
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.Font.Styles.DotHtmlSubscript.#ctor(System.String,System.Nullable{GiGraph.Dot.Types.Alignment.DotHorizontalAlignment})">
            <summary>
                Creates a new instance with the specified text as its content.
            </summary>
            <param name="text">
                The text to set as the content.
            </param>
            <param name="lineAlignment">
                Specifies horizontal placement of lines if multiline text is specified.
            </param>
        </member>
        <member name="T:GiGraph.Dot.Entities.Html.Font.Styles.DotHtmlSuperscript">
            <summary>
                An HTML superscript text element (&lt;sup&gt;).
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.Font.Styles.DotHtmlSuperscript.#ctor">
            <summary>
                Creates a new instance.
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.Font.Styles.DotHtmlSuperscript.#ctor(System.String,System.Nullable{GiGraph.Dot.Types.Alignment.DotHorizontalAlignment})">
            <summary>
                Creates a new instance with the specified text as its content.
            </summary>
            <param name="text">
                The text to set as the content.
            </param>
            <param name="lineAlignment">
                Specifies horizontal placement of lines if multiline text is specified.
            </param>
        </member>
        <member name="T:GiGraph.Dot.Entities.Html.Font.Styles.DotHtmlUnderline">
            <summary>
                An HTML underlined text element (&lt;u&gt;).
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.Font.Styles.DotHtmlUnderline.#ctor">
            <summary>
                Creates a new instance.
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.Font.Styles.DotHtmlUnderline.#ctor(System.String,System.Nullable{GiGraph.Dot.Types.Alignment.DotHorizontalAlignment})">
            <summary>
                Creates a new instance with the specified text as its content.
            </summary>
            <param name="text">
                The text to set as the content.
            </param>
            <param name="lineAlignment">
                Specifies horizontal placement of lines if multiline text is specified.
            </param>
        </member>
        <member name="P:GiGraph.Dot.Entities.Html.IDotHtmlContentEntity.Content">
            <summary>
                Gets the content items of the element.
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.IDotHtmlContentEntity.SetContent(GiGraph.Dot.Entities.Html.IDotHtmlEntity)">
            <summary>
                Uses the specified HTML entity as the content of the current element.
            </summary>
            <param name="entity">
                The element to set as the content.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.IDotHtmlContentEntity.SetContent(System.String,System.Nullable{GiGraph.Dot.Types.Alignment.DotHorizontalAlignment})">
            <summary>
                Uses the specified text as the content of the current element.
            </summary>
            <param name="text">
                The text to set as the content.
            </param>
            <param name="lineAlignment">
                Specifies horizontal placement of lines if multiline text is specified.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.IDotHtmlContentEntity.SetContent(System.Action{GiGraph.Dot.Entities.Html.Builder.DotHtmlBuilder})">
            <summary>
                Uses the builder to build a HTML entity to use as the content of the current element.
            </summary>
            <param name="build">
                The HTML builder delegate.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.IDotHtmlContentEntity.SetHtmlContent(System.String)">
            <summary>
                Uses the specified HTML as the content of the current element.
            </summary>
            <param name="html">
                The HTML to use as the content.
            </param>
        </member>
        <member name="T:GiGraph.Dot.Entities.Html.IDotHtmlEntity">
            <summary>
                Represents an HTML entity.
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.IDotHtmlEntity.ToHtml">
            <summary>
                Converts the object to an HTML string. Applies the default (global) HTML syntax and formatting rules.
            </summary>
        </member>
        <member name="T:GiGraph.Dot.Entities.Html.Image.Attributes.IDotHtmlImageAttributes">
            <summary>
                The attributes of an HTML image element (&lt;img&gt;).
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Html.Image.Attributes.IDotHtmlImageAttributes.Source">
            <summary>
                Specifies the image file to be displayed. Note that if the software is used as a web server, file system access to images is
                more restricted. See
                <see href="https://graphviz.org/doc/info/command.html#d:GV_FILE_PATH">
                    GV_FILE_PATH
                </see>
                and
                <see href="https://graphviz.org/doc/info/command.html#d:SERVER_NAME">
                    SERVER_NAME
                </see>
                .
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Html.Image.Attributes.IDotHtmlImageAttributes.Scaling">
            <summary>
                Specifies how the image will use any extra space available in its cell. If this attribute is undefined, the image inherits
                the image scaling of the graph. If the cell has a fixed size and the image is too large, any offending dimension will be
                shrunk to fit the space, the scaling being uniform in width and height if the scale is <see cref="F:GiGraph.Dot.Types.Images.DotImageScaling.None" />.
                Note that the containing cell’s alignment attributes override the current attribute.
            </summary>
        </member>
        <member name="T:GiGraph.Dot.Entities.Html.Image.DotHtmlImage">
            <summary>
                An HTML &lt;img&gt; element.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Html.Image.DotHtmlImage.Source">
            <summary>
                Specifies the image file to be displayed. Note that if the software is used as a web server, file system access to images is
                more restricted. See
                <see href="https://graphviz.org/doc/info/command.html#d:GV_FILE_PATH">
                    GV_FILE_PATH
                </see>
                and
                <see href="https://graphviz.org/doc/info/command.html#d:SERVER_NAME">
                    SERVER_NAME
                </see>
                .
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Html.Image.DotHtmlImage.Scaling">
            <summary>
                Specifies how the image will use any extra space available in its cell. If this attribute is undefined, the image inherits
                the image scaling of the graph. If the cell has a fixed size and the image is too large, any offending dimension will be
                shrunk to fit the space, the scaling being uniform in width and height if the scale is <see cref="F:GiGraph.Dot.Types.Images.DotImageScaling.None" />.
                Note that the containing cell’s alignment attributes override the current attribute.
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.Image.DotHtmlImage.#ctor(System.String,System.Nullable{GiGraph.Dot.Types.Images.DotImageScaling})">
            <summary>
                Initializes a new image element instance.
            </summary>
            <param name="source">
                Specifies the image file to be displayed.
            </param>
            <param name="scaling">
                Specifies how the image will use any extra space available in its cell.
            </param>
        </member>
        <member name="P:GiGraph.Dot.Entities.Html.Image.DotHtmlImage.Attributes">
            <summary>
                Provides access to the attributes of the image.
            </summary>
        </member>
        <member name="T:GiGraph.Dot.Entities.Html.LineBreak.Attributes.IDotHtmlLineBreakAttributes">
            <summary>
                The attributes of an HTML line break (&lt;br/&gt;).
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Html.LineBreak.Attributes.IDotHtmlLineBreakAttributes.LineAlignment">
            <summary>
                Specifies horizontal placement of the line.
            </summary>
        </member>
        <member name="T:GiGraph.Dot.Entities.Html.LineBreak.DotHtmlLineBreak">
            <summary>
                An HTML line break element (&lt;br/&gt;).
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Html.LineBreak.DotHtmlLineBreak.LineAlignment">
            <summary>
                Specifies horizontal placement of the line.
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.LineBreak.DotHtmlLineBreak.#ctor(System.Nullable{GiGraph.Dot.Types.Alignment.DotHorizontalAlignment})">
            <summary>
                Initializes a new line break instance.
            </summary>
            <param name="lineAlignment">
                Specifies horizontal placement of the line.
            </param>
        </member>
        <member name="P:GiGraph.Dot.Entities.Html.LineBreak.DotHtmlLineBreak.Attributes">
            <summary>
                Provides access to the attributes of the line break element.
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.LineBreak.DotHtmlLineBreak.Html(System.Nullable{GiGraph.Dot.Types.Alignment.DotHorizontalAlignment})">
            <summary>
                Returns a &lt;br/&gt; HTML tag string according to the default syntax options and rules.
            </summary>
            <param name="lineAlignment">
                Specifies horizontal placement of the line.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.LineBreak.DotHtmlLineBreak.Instance(System.Nullable{GiGraph.Dot.Types.Alignment.DotHorizontalAlignment})">
            <summary>
                Gets a static instance of a line break with the specified alignment. Use for memory optimization.
            </summary>
            <param name="lineAlignment">
                Specifies horizontal placement of the line.
            </param>
        </member>
        <member name="T:GiGraph.Dot.Entities.Html.Rule.DotHtmlHorizontalRule">
            <summary>
                An HTML horizontal rule element (&lt;hr&gt;).
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.Rule.DotHtmlHorizontalRule.#ctor">
            <summary>
                Creates a new instance.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Html.Rule.DotHtmlHorizontalRule.Instance">
            <summary>
                Gets a static instance of a horizontal rule element.
            </summary>
        </member>
        <member name="T:GiGraph.Dot.Entities.Html.Rule.DotHtmlRule">
            <summary>
                An HTML rule element.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Html.Rule.DotHtmlRule.Vertical">
            <summary>
                Gets a static instance of a vertical rule element.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Html.Rule.DotHtmlRule.Horizontal">
            <summary>
                Gets a static instance of a horizontal rule element.
            </summary>
        </member>
        <member name="T:GiGraph.Dot.Entities.Html.Rule.DotHtmlVerticalRule">
            <summary>
                An HTML vertical rule element (&lt;vr&gt;).
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.Rule.DotHtmlVerticalRule.#ctor">
            <summary>
                Creates a new instance.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Html.Rule.DotHtmlVerticalRule.Instance">
            <summary>
                Gets a static instance of a vertical rule element.
            </summary>
        </member>
        <member name="T:GiGraph.Dot.Entities.Html.Table.Attributes.IDotHtmlTableAttributes">
            <summary>
                The attributes of an HTML table (&lt;table&gt;).
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Html.Table.Attributes.IDotHtmlTableAttributes.HorizontalAlignment">
            <summary>
                Specifies horizontal placement. When an object is allocated more space than required, this value determines where the extra
                space is placed left and right of the object. Default: <see cref="F:GiGraph.Dot.Types.Alignment.DotHorizontalAlignment.Center" />.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Html.Table.Attributes.IDotHtmlTableAttributes.CellBorderWidth">
            <summary>
                Specifies the width of the border for all cells in a table. It can be overridden in a cell. The maximum value is 255.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Html.Table.Attributes.IDotHtmlTableAttributes.RowFormat">
            <summary>
                Provides general formatting information concerning the rows. See <see cref="T:GiGraph.Dot.Types.Html.Table.DotHtmlTableRowFormat" /> for accepted values.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Html.Table.Attributes.IDotHtmlTableAttributes.ColumnFormat">
            <summary>
                Provides general formatting information concerning the columns. See <see cref="T:GiGraph.Dot.Types.Html.Table.DotHtmlTableColumnFormat" /> for accepted
                values.
            </summary>
        </member>
        <member name="T:GiGraph.Dot.Entities.Html.Table.Attributes.IDotHtmlTableCellAttributes">
            <summary>
                The attributes of an HTML table cell (&lt;td&gt;).
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Html.Table.Attributes.IDotHtmlTableCellAttributes.HorizontalAlignment">
            <summary>
                Specifies horizontal placement. When an object is allocated more space than required, this value determines where the extra
                space is placed left and right of the object. Default: <see cref="F:GiGraph.Dot.Types.Alignment.DotHorizontalAlignment.Center" />.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Html.Table.Attributes.IDotHtmlTableCellAttributes.HorizontalLineAlignment">
            <summary>
                Specifies the default alignment of &lt;br/&gt; elements contained in the cell (<see cref="T:GiGraph.Dot.Entities.Html.LineBreak.DotHtmlLineBreak" />). That is, if
                a &lt;br/&gt; element has no <see cref="P:GiGraph.Dot.Entities.Html.LineBreak.DotHtmlLineBreak.LineAlignment" /> specified explicitly, the alignment indicated by
                the current attribute is applied.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Html.Table.Attributes.IDotHtmlTableCellAttributes.ColumnSpan">
            <summary>
                Specifies the number of columns spanned by the cell. The default is 1, the maximum is 65535.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Html.Table.Attributes.IDotHtmlTableCellAttributes.RowSpan">
            <summary>
                Specifies the number of rows spanned by the cell. The default is 1, the maximum is 65535.
            </summary>
        </member>
        <member name="T:GiGraph.Dot.Entities.Html.Table.Attributes.IDotHtmlTableTableCellCommonAttributes">
            <summary>
                The common attributes of an HTML table (&lt;table&gt;) and an HTML table cell (&lt;td&gt;).
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Html.Table.Attributes.IDotHtmlTableTableCellCommonAttributes.Id">
            <summary>
                Allows the user to specify a unique ID for the table.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Html.Table.Attributes.IDotHtmlTableTableCellCommonAttributes.PortName">
            <summary>
                Attaches a port name to the object. This can be used to modify the head or tail of an edge, so that the end attaches directly
                to the object.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Html.Table.Attributes.IDotHtmlTableTableCellCommonAttributes.VerticalAlignment">
            <summary>
                Specifies vertical placement. When an object is allocated more space than required, this value determines where the extra
                space is placed above and below the object. Default: <see cref="F:GiGraph.Dot.Types.Alignment.DotVerticalAlignment.Center" />.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Html.Table.Attributes.IDotHtmlTableTableCellCommonAttributes.BackgroundColor">
            <summary>
                Sets the color of the background. This color can be overridden by a the same attribute in descendents. The value can be a
                single color (<see cref="T:System.Drawing.Color" />) or a gradient color (<see cref="T:GiGraph.Dot.Types.Colors.DotGradientColor" />).
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Html.Table.Attributes.IDotHtmlTableTableCellCommonAttributes.BorderColor">
            <summary>
                Sets the border color of the table or cell. It can be overridden by the same attribute in descendents. By default, the border
                color is determined by the corresponding node, edge or graph.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Html.Table.Attributes.IDotHtmlTableTableCellCommonAttributes.BorderWidth">
            <summary>
                Specifies the width of the border around the object in points. A value of zero indicates no border. The default is 1. The
                maximum value is 255. If set in a table, and <see cref="P:GiGraph.Dot.Entities.Html.Table.Attributes.IDotHtmlTableAttributes.CellBorderWidth" /> is not set, this value is
                also used for all cells in the table. It can be overridden by a corresponding attribute in a cell.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Html.Table.Attributes.IDotHtmlTableTableCellCommonAttributes.CellPadding">
            <summary>
                Specifies the space, in points, between a cell's border and its content. The default is 2. The maximum value is 255.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Html.Table.Attributes.IDotHtmlTableTableCellCommonAttributes.CellSpacing">
            <summary>
                Specifies the space, in points, between cells in a table and between a cell and the table's border. The default is 2. The
                maximum value is 127.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Html.Table.Attributes.IDotHtmlTableTableCellCommonAttributes.Borders">
            <summary>
                Specifies which sides of a border in a cell or table should be drawn, if a border is drawn. By default, all sides are drawn.
                Multiple flags may be specified.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Html.Table.Attributes.IDotHtmlTableTableCellCommonAttributes.FixedSize">
            <summary>
                Specifies whether the values given by the <see cref="P:GiGraph.Dot.Entities.Html.Table.Attributes.IDotHtmlTableTableCellCommonAttributes.Width" /> and <see cref="P:GiGraph.Dot.Entities.Html.Table.Attributes.IDotHtmlTableTableCellCommonAttributes.Height" /> attributes are enforced. False
                allows the object to grow so that all its contents will fit (default). True fixes the object size to its given
                <see cref="P:GiGraph.Dot.Entities.Html.Table.Attributes.IDotHtmlTableTableCellCommonAttributes.Width" /> and <see cref="P:GiGraph.Dot.Entities.Html.Table.Attributes.IDotHtmlTableTableCellCommonAttributes.Height" />. Both of these attributes must be supplied.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Html.Table.Attributes.IDotHtmlTableTableCellCommonAttributes.GradientFillAngle">
            <summary>
                Gives the angle used in a gradient fill if the <see cref="P:GiGraph.Dot.Entities.Html.Table.Attributes.IDotHtmlTableTableCellCommonAttributes.BackgroundColor" /> is a gradient color. For the default linear
                gradient, this specifies the angle of a line through the center along which the colors transform. Thus, an angle of 0 will
                cause a left-to-right progression. For radial gradients (see <see cref="P:GiGraph.Dot.Entities.Html.Table.Attributes.IDotHtmlTableTableCellCommonAttributes.Style" />), the angle specifies the position of the
                center of the coloring. An angle of 0 places the center at the center of the table or cell; an non-zero angle places the fill
                center along that angle near the boundary.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Html.Table.Attributes.IDotHtmlTableTableCellCommonAttributes.Width">
            <summary>
                Specifies the mininum width, in points, of the object. The width includes the contents, any spacing and the border. Unless
                <see cref="P:GiGraph.Dot.Entities.Html.Table.Attributes.IDotHtmlTableTableCellCommonAttributes.FixedSize" /> is true, the width will be expanded to allow the contents to fit. The maximum value is 65535.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Html.Table.Attributes.IDotHtmlTableTableCellCommonAttributes.Height">
            <summary>
                Specifies the mininum height, in points, of the object. The height includes the contents, any spacing and the border. Unless
                <see cref="P:GiGraph.Dot.Entities.Html.Table.Attributes.IDotHtmlTableTableCellCommonAttributes.FixedSize" /> is true, the height will be expanded to allow the contents to fit. The maximum value is 65535.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Html.Table.Attributes.IDotHtmlTableTableCellCommonAttributes.Href">
            <summary>
                Attaches a URL to the object.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Html.Table.Attributes.IDotHtmlTableTableCellCommonAttributes.Target">
            <summary>
                Determines which window of the browser is used for the URL if the object has one. See
                <see href="http://www.w3.org/TR/html401/present/frames.html#adef-target">
                    W3C documentation
                </see>
                .
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Html.Table.Attributes.IDotHtmlTableTableCellCommonAttributes.Title">
            <summary>
                Sets the tooltip annotation attached to the element. This is used only if the element has a <see cref="P:GiGraph.Dot.Entities.Html.Table.Attributes.IDotHtmlTableTableCellCommonAttributes.Href" /> attribute.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Html.Table.Attributes.IDotHtmlTableTableCellCommonAttributes.Tooltip">
            <summary>
                Sets the tooltip annotation attached to the element. This is used only if the element has a <see cref="P:GiGraph.Dot.Entities.Html.Table.Attributes.IDotHtmlTableTableCellCommonAttributes.Href" /> attribute. It
                is an alias for <see cref="P:GiGraph.Dot.Entities.Html.Table.Attributes.IDotHtmlTableTableCellCommonAttributes.Title" />.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Html.Table.Attributes.IDotHtmlTableTableCellCommonAttributes.Style">
            <summary>
                Specifies style characteristics of the table or cell.
            </summary>
        </member>
        <member name="T:GiGraph.Dot.Entities.Html.Table.DotHtmlTable">
            <summary>
                An HTML &lt;table&gt; element.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Html.Table.DotHtmlTable.Id">
            <summary>
                Allows the user to specify a unique ID for the table.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Html.Table.DotHtmlTable.PortName">
            <summary>
                Attaches a port name to the object. This can be used to modify the head or tail of an edge, so that the end attaches directly
                to the object.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Html.Table.DotHtmlTable.HorizontalAlignment">
            <summary>
                Specifies horizontal placement. When an object is allocated more space than required, this value determines where the extra
                space is placed left and right of the object. Default: <see cref="F:GiGraph.Dot.Types.Alignment.DotHorizontalAlignment.Center" />.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Html.Table.DotHtmlTable.VerticalAlignment">
            <summary>
                Specifies vertical placement. When an object is allocated more space than required, this value determines where the extra
                space is placed above and below the object. Default: <see cref="F:GiGraph.Dot.Types.Alignment.DotVerticalAlignment.Center" />.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Html.Table.DotHtmlTable.BackgroundColor">
            <summary>
                Sets the color of the background. This color can be overridden by a the same attribute in descendents. The value can be a
                single color (<see cref="T:System.Drawing.Color" />) or a gradient color (<see cref="T:GiGraph.Dot.Types.Colors.DotGradientColor" />).
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Html.Table.DotHtmlTable.BorderColor">
            <summary>
                Sets the border color of the table or cell. It can be overridden by the same attribute in descendents. By default, the border
                color is determined by the corresponding node, edge or graph.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Html.Table.DotHtmlTable.BorderWidth">
            <summary>
                Specifies the width of the border around the object in points. A value of zero indicates no border. The default is 1. The
                maximum value is 255. If set in a table, and <see cref="P:GiGraph.Dot.Entities.Html.Table.Attributes.IDotHtmlTableAttributes.CellBorderWidth" /> is not set, this value is
                also used for all cells in the table. It can be overridden by a corresponding attribute in a cell.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Html.Table.DotHtmlTable.CellBorderWidth">
            <summary>
                Specifies the width of the border for all cells in a table. It can be overridden in a cell. The maximum value is 255.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Html.Table.DotHtmlTable.CellPadding">
            <summary>
                Specifies the space, in points, between a cell's border and its content. The default is 2. The maximum value is 255.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Html.Table.DotHtmlTable.CellSpacing">
            <summary>
                Specifies the space, in points, between cells in a table and between a cell and the table's border. The default is 2. The
                maximum value is 127.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Html.Table.DotHtmlTable.RowFormat">
            <summary>
                Provides general formatting information concerning the rows. See <see cref="T:GiGraph.Dot.Types.Html.Table.DotHtmlTableRowFormat" /> for accepted values.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Html.Table.DotHtmlTable.ColumnFormat">
            <summary>
                Provides general formatting information concerning the columns. See <see cref="T:GiGraph.Dot.Types.Html.Table.DotHtmlTableColumnFormat" /> for accepted
                values.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Html.Table.DotHtmlTable.Borders">
            <summary>
                Specifies which sides of a border in a cell or table should be drawn, if a border is drawn. By default, all sides are drawn.
                Multiple flags may be specified.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Html.Table.DotHtmlTable.FixedSize">
            <summary>
                Specifies whether the values given by the <see cref="P:GiGraph.Dot.Entities.Html.Table.Attributes.IDotHtmlTableTableCellCommonAttributes.Width" /> and <see cref="P:GiGraph.Dot.Entities.Html.Table.Attributes.IDotHtmlTableTableCellCommonAttributes.Height" /> attributes are enforced. False
                allows the object to grow so that all its contents will fit (default). True fixes the object size to its given
                <see cref="P:GiGraph.Dot.Entities.Html.Table.Attributes.IDotHtmlTableTableCellCommonAttributes.Width" /> and <see cref="P:GiGraph.Dot.Entities.Html.Table.Attributes.IDotHtmlTableTableCellCommonAttributes.Height" />. Both of these attributes must be supplied.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Html.Table.DotHtmlTable.GradientFillAngle">
            <summary>
                Gives the angle used in a gradient fill if the <see cref="P:GiGraph.Dot.Entities.Html.Table.Attributes.IDotHtmlTableTableCellCommonAttributes.BackgroundColor" /> is a gradient color. For the default linear
                gradient, this specifies the angle of a line through the center along which the colors transform. Thus, an angle of 0 will
                cause a left-to-right progression. For radial gradients (see <see cref="P:GiGraph.Dot.Entities.Html.Table.Attributes.IDotHtmlTableTableCellCommonAttributes.Style" />), the angle specifies the position of the
                center of the coloring. An angle of 0 places the center at the center of the table or cell; an non-zero angle places the fill
                center along that angle near the boundary.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Html.Table.DotHtmlTable.Width">
            <summary>
                Specifies the mininum width, in points, of the object. The width includes the contents, any spacing and the border. Unless
                <see cref="P:GiGraph.Dot.Entities.Html.Table.Attributes.IDotHtmlTableTableCellCommonAttributes.FixedSize" /> is true, the width will be expanded to allow the contents to fit. The maximum value is 65535.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Html.Table.DotHtmlTable.Height">
            <summary>
                Specifies the mininum height, in points, of the object. The height includes the contents, any spacing and the border. Unless
                <see cref="P:GiGraph.Dot.Entities.Html.Table.Attributes.IDotHtmlTableTableCellCommonAttributes.FixedSize" /> is true, the height will be expanded to allow the contents to fit. The maximum value is 65535.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Html.Table.DotHtmlTable.Href">
            <summary>
                Attaches a URL to the object.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Html.Table.DotHtmlTable.Target">
            <summary>
                Determines which window of the browser is used for the URL if the object has one. See
                <see href="http://www.w3.org/TR/html401/present/frames.html#adef-target">
                    W3C documentation
                </see>
                .
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Html.Table.DotHtmlTable.Title">
            <summary>
                Sets the tooltip annotation attached to the element. This is used only if the element has a <see cref="P:GiGraph.Dot.Entities.Html.Table.Attributes.IDotHtmlTableTableCellCommonAttributes.Href" /> attribute.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Html.Table.DotHtmlTable.Tooltip">
            <summary>
                Sets the tooltip annotation attached to the element. This is used only if the element has a <see cref="P:GiGraph.Dot.Entities.Html.Table.Attributes.IDotHtmlTableTableCellCommonAttributes.Href" /> attribute. It
                is an alias for <see cref="P:GiGraph.Dot.Entities.Html.Table.Attributes.IDotHtmlTableTableCellCommonAttributes.Title" />.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Html.Table.DotHtmlTable.Style">
            <summary>
                Specifies style characteristics of the table or cell.
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.Table.DotHtmlTable.#ctor">
            <summary>
                Initializes a new table instance.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Html.Table.DotHtmlTable.Attributes">
            <summary>
                Provides access to the attributes of the table.
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.Table.DotHtmlTable.AddRow(System.Action{GiGraph.Dot.Entities.Html.Table.DotHtmlTableRow})">
            <summary>
                Adds a new row to the table and optionally initializes it.
            </summary>
            <param name="init">
                An optional row initializer delegate.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.Table.DotHtmlTable.AddHorizontalRule">
            <summary>
                Adds a horizontal rule to separate two neighboring rows.
            </summary>
        </member>
        <member name="T:GiGraph.Dot.Entities.Html.Table.DotHtmlTableCell">
            <summary>
                A cell of an HTML table row (&lt;td&gt;).
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Html.Table.DotHtmlTableCell.Id">
            <summary>
                Allows the user to specify a unique ID for the table.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Html.Table.DotHtmlTableCell.PortName">
            <summary>
                Attaches a port name to the object. This can be used to modify the head or tail of an edge, so that the end attaches directly
                to the object.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Html.Table.DotHtmlTableCell.HorizontalAlignment">
            <summary>
                Specifies horizontal placement. When an object is allocated more space than required, this value determines where the extra
                space is placed left and right of the object. Default: <see cref="F:GiGraph.Dot.Types.Alignment.DotHorizontalAlignment.Center" />.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Html.Table.DotHtmlTableCell.VerticalAlignment">
            <summary>
                Specifies vertical placement. When an object is allocated more space than required, this value determines where the extra
                space is placed above and below the object. Default: <see cref="F:GiGraph.Dot.Types.Alignment.DotVerticalAlignment.Center" />.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Html.Table.DotHtmlTableCell.HorizontalLineAlignment">
            <summary>
                Specifies the default alignment of &lt;br/&gt; elements contained in the cell (<see cref="T:GiGraph.Dot.Entities.Html.LineBreak.DotHtmlLineBreak" />). That is, if
                a &lt;br/&gt; element has no <see cref="P:GiGraph.Dot.Entities.Html.LineBreak.DotHtmlLineBreak.LineAlignment" /> specified explicitly, the alignment indicated by
                the current attribute is applied.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Html.Table.DotHtmlTableCell.BackgroundColor">
            <summary>
                Sets the color of the background. This color can be overridden by a the same attribute in descendents. The value can be a
                single color (<see cref="T:System.Drawing.Color" />) or a gradient color (<see cref="T:GiGraph.Dot.Types.Colors.DotGradientColor" />).
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Html.Table.DotHtmlTableCell.BorderColor">
            <summary>
                Sets the border color of the table or cell. It can be overridden by the same attribute in descendents. By default, the border
                color is determined by the corresponding node, edge or graph.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Html.Table.DotHtmlTableCell.BorderWidth">
            <summary>
                Specifies the width of the border around the object in points. A value of zero indicates no border. The default is 1. The
                maximum value is 255. If set in a table, and <see cref="P:GiGraph.Dot.Entities.Html.Table.Attributes.IDotHtmlTableAttributes.CellBorderWidth" /> is not set, this value is
                also used for all cells in the table. It can be overridden by a corresponding attribute in a cell.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Html.Table.DotHtmlTableCell.CellPadding">
            <summary>
                Specifies the space, in points, between a cell's border and its content. The default is 2. The maximum value is 255.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Html.Table.DotHtmlTableCell.CellSpacing">
            <summary>
                Specifies the space, in points, between cells in a table and between a cell and the table's border. The default is 2. The
                maximum value is 127.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Html.Table.DotHtmlTableCell.ColumnSpan">
            <summary>
                Specifies the number of columns spanned by the cell. The default is 1, the maximum is 65535.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Html.Table.DotHtmlTableCell.RowSpan">
            <summary>
                Specifies the number of rows spanned by the cell. The default is 1, the maximum is 65535.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Html.Table.DotHtmlTableCell.Borders">
            <summary>
                Specifies which sides of a border in a cell or table should be drawn, if a border is drawn. By default, all sides are drawn.
                Multiple flags may be specified.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Html.Table.DotHtmlTableCell.FixedSize">
            <summary>
                Specifies whether the values given by the <see cref="P:GiGraph.Dot.Entities.Html.Table.Attributes.IDotHtmlTableTableCellCommonAttributes.Width" /> and <see cref="P:GiGraph.Dot.Entities.Html.Table.Attributes.IDotHtmlTableTableCellCommonAttributes.Height" /> attributes are enforced. False
                allows the object to grow so that all its contents will fit (default). True fixes the object size to its given
                <see cref="P:GiGraph.Dot.Entities.Html.Table.Attributes.IDotHtmlTableTableCellCommonAttributes.Width" /> and <see cref="P:GiGraph.Dot.Entities.Html.Table.Attributes.IDotHtmlTableTableCellCommonAttributes.Height" />. Both of these attributes must be supplied.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Html.Table.DotHtmlTableCell.GradientFillAngle">
            <summary>
                Gives the angle used in a gradient fill if the <see cref="P:GiGraph.Dot.Entities.Html.Table.Attributes.IDotHtmlTableTableCellCommonAttributes.BackgroundColor" /> is a gradient color. For the default linear
                gradient, this specifies the angle of a line through the center along which the colors transform. Thus, an angle of 0 will
                cause a left-to-right progression. For radial gradients (see <see cref="P:GiGraph.Dot.Entities.Html.Table.Attributes.IDotHtmlTableTableCellCommonAttributes.Style" />), the angle specifies the position of the
                center of the coloring. An angle of 0 places the center at the center of the table or cell; an non-zero angle places the fill
                center along that angle near the boundary.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Html.Table.DotHtmlTableCell.Width">
            <summary>
                Specifies the mininum width, in points, of the object. The width includes the contents, any spacing and the border. Unless
                <see cref="P:GiGraph.Dot.Entities.Html.Table.Attributes.IDotHtmlTableTableCellCommonAttributes.FixedSize" /> is true, the width will be expanded to allow the contents to fit. The maximum value is 65535.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Html.Table.DotHtmlTableCell.Height">
            <summary>
                Specifies the mininum height, in points, of the object. The height includes the contents, any spacing and the border. Unless
                <see cref="P:GiGraph.Dot.Entities.Html.Table.Attributes.IDotHtmlTableTableCellCommonAttributes.FixedSize" /> is true, the height will be expanded to allow the contents to fit. The maximum value is 65535.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Html.Table.DotHtmlTableCell.Href">
            <summary>
                Attaches a URL to the object.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Html.Table.DotHtmlTableCell.Target">
            <summary>
                Determines which window of the browser is used for the URL if the object has one. See
                <see href="http://www.w3.org/TR/html401/present/frames.html#adef-target">
                    W3C documentation
                </see>
                .
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Html.Table.DotHtmlTableCell.Title">
            <summary>
                Sets the tooltip annotation attached to the element. This is used only if the element has a <see cref="P:GiGraph.Dot.Entities.Html.Table.Attributes.IDotHtmlTableTableCellCommonAttributes.Href" /> attribute.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Html.Table.DotHtmlTableCell.Tooltip">
            <summary>
                Sets the tooltip annotation attached to the element. This is used only if the element has a <see cref="P:GiGraph.Dot.Entities.Html.Table.Attributes.IDotHtmlTableTableCellCommonAttributes.Href" /> attribute. It
                is an alias for <see cref="P:GiGraph.Dot.Entities.Html.Table.Attributes.IDotHtmlTableTableCellCommonAttributes.Title" />.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Html.Table.DotHtmlTableCell.Style">
            <summary>
                Specifies style characteristics of the table or cell.
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.Table.DotHtmlTableCell.#ctor">
            <summary>
                Initializes a new table cell instance.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Html.Table.DotHtmlTableCell.Attributes">
            <summary>
                Provides access to the attributes of the table cell.
            </summary>
        </member>
        <member name="T:GiGraph.Dot.Entities.Html.Table.DotHtmlTableRow">
            <summary>
                An HTML table row (&lt;tr&gt;).
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.Table.DotHtmlTableRow.#ctor">
            <summary>
                Initializes a new table row instance.
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.Table.DotHtmlTableRow.AddCell(System.Action{GiGraph.Dot.Entities.Html.Table.DotHtmlTableCell})">
            <summary>
                Adds a cell to the current row.
            </summary>
            <param name="init">
                A cell initializer delegate.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.Table.DotHtmlTableRow.AddCell(GiGraph.Dot.Entities.Html.IDotHtmlEntity,System.Action{GiGraph.Dot.Entities.Html.Table.DotHtmlTableCell})">
            <summary>
                Adds a cell to the current row.
            </summary>
            <param name="content">
                The entity to use as the content of the cell.
            </param>
            <param name="init">
                A cell initializer delegate.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.Table.DotHtmlTableRow.AddImageCell(System.String,System.Nullable{GiGraph.Dot.Types.Images.DotImageScaling},System.Action{GiGraph.Dot.Entities.Html.Table.DotHtmlTableCell})">
            <summary>
                Adds a cell with an image to the current row.
            </summary>
            <param name="source">
                The image file to be displayed in the cell.
            </param>
            <param name="scaling">
                Specifies how the image will use any extra space available in its cell.
            </param>
            <param name="init">
                A cell initializer delegate.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.Table.DotHtmlTableRow.AddVerticalRule">
            <summary>
                Adds a vertical rule to separate two neighboring cells.
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.Table.DotHtmlTableRow.AddCell(System.String,GiGraph.Dot.Types.Fonts.DotFontStyles,System.Action{GiGraph.Dot.Entities.Html.Table.DotHtmlTableCell})">
            <summary>
                Adds a text cell to the current row.
            </summary>
            <param name="text">
                The text to initialize the cell with.
            </param>
            <param name="style">
                The style to apply to the text.
            </param>
            <param name="init">
                A cell initializer delegate.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.Table.DotHtmlTableRow.AddCell(System.String,GiGraph.Dot.Types.Fonts.DotFontStyles,System.Nullable{GiGraph.Dot.Types.Alignment.DotHorizontalAlignment},System.Action{GiGraph.Dot.Entities.Html.Table.DotHtmlTableCell})">
            <summary>
                Adds a text cell to the current row.
            </summary>
            <param name="text">
                The text to initialize the cell with.
            </param>
            <param name="style">
                The style to apply to the text.
            </param>
            <param name="lineAlignment">
                Specifies horizontal placement of lines if multiline text is specified.
            </param>
            <param name="init">
                A cell initializer delegate.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.Table.DotHtmlTableRow.AddCell(System.String,GiGraph.Dot.Types.Fonts.DotStyledFont,System.Action{GiGraph.Dot.Entities.Html.Table.DotHtmlTableCell})">
            <summary>
                Adds a text cell to the current row.
            </summary>
            <param name="text">
                The text to initialize the cell with.
            </param>
            <param name="font">
                The font and style to apply to the text.
            </param>
            <param name="init">
                A cell initializer delegate.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.Table.DotHtmlTableRow.AddCell(System.String,GiGraph.Dot.Types.Fonts.DotStyledFont,System.Nullable{GiGraph.Dot.Types.Alignment.DotHorizontalAlignment},System.Action{GiGraph.Dot.Entities.Html.Table.DotHtmlTableCell})">
            <summary>
                Adds a text cell to the current row.
            </summary>
            <param name="text">
                The text to initialize the cell with.
            </param>
            <param name="font">
                The font and style to apply to the text.
            </param>
            <param name="lineAlignment">
                Specifies horizontal placement of lines if multiline text is specified.
            </param>
            <param name="init">
                A cell initializer delegate.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.Table.DotHtmlTableRow.AddCell(System.String,System.Action{GiGraph.Dot.Entities.Html.Table.DotHtmlTableCell})">
            <summary>
                Adds a text cell to the current row.
            </summary>
            <param name="text">
                The text to initialize the cell with.
            </param>
            <param name="init">
                A cell initializer delegate.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.Table.DotHtmlTableRow.AddCell(System.String,System.Nullable{GiGraph.Dot.Types.Alignment.DotHorizontalAlignment},System.Action{GiGraph.Dot.Entities.Html.Table.DotHtmlTableCell})">
            <summary>
                Adds a text cell to the current row.
            </summary>
            <param name="text">
                The text to initialize the cell with.
            </param>
            <param name="lineAlignment">
                Specifies horizontal placement of lines if multiline text is specified.
            </param>
            <param name="init">
                A cell initializer delegate.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.Table.DotHtmlTableRow.AddCell(System.String,GiGraph.Dot.Types.Fonts.DotFont,System.Action{GiGraph.Dot.Entities.Html.Table.DotHtmlTableCell})">
            <summary>
                Adds a text cell to the current row.
            </summary>
            <param name="text">
                The text to initialize the cell with.
            </param>
            <param name="font">
                The font to use.
            </param>
            <param name="init">
                A cell initializer delegate.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.Table.DotHtmlTableRow.AddCell(System.String,GiGraph.Dot.Types.Fonts.DotFont,System.Nullable{GiGraph.Dot.Types.Alignment.DotHorizontalAlignment},System.Action{GiGraph.Dot.Entities.Html.Table.DotHtmlTableCell})">
            <summary>
                Adds a text cell to the current row.
            </summary>
            <param name="text">
                The text to initialize the cell with.
            </param>
            <param name="font">
                The font to use.
            </param>
            <param name="lineAlignment">
                Specifies horizontal placement of lines if multiline text is specified.
            </param>
            <param name="init">
                A cell initializer delegate.
            </param>
        </member>
        <member name="T:GiGraph.Dot.Entities.Html.Text.DotHtmlText">
            <summary>
                Textual content of an HTML element.
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.Text.DotHtmlText.#ctor(System.String,System.Nullable{GiGraph.Dot.Types.Alignment.DotHorizontalAlignment})">
            <summary>
                Initializes a new HTML text instance.
            </summary>
            <param name="text">
                The text to initialize the instance with.
            </param>
            <param name="lineAlignment">
                Specifies horizontal placement of lines if multiline text is specified.
            </param>
        </member>
        <member name="P:GiGraph.Dot.Entities.Html.Text.DotHtmlText.LineAlignment">
            <summary>
                Specifies horizontal placement of lines if multiline text is specified.
            </summary>
        </member>
        <member name="T:GiGraph.Dot.Entities.Labels.DotHtmlLabel">
            <summary>
                Represents an HTML label with an underlying object capable of being converted to HTML on DOT output rendering.
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Labels.DotHtmlLabel.#ctor(GiGraph.Dot.Entities.Html.IDotHtmlEntity)">
            <summary>
                Creates a new label instance.
            </summary>
            <param name="htmlEntity">
                The object capable of being converted to HTML.
            </param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when <paramref name="htmlEntity" /> is null.
            </exception>
        </member>
        <member name="M:GiGraph.Dot.Entities.Labels.DotHtmlLabel.#ctor(System.String)">
            <summary>
                Creates a new HTML string label.
            </summary>
            <param name="html">
                The HTML text to use. It is expected to be a compatible HTML string following the rules described in the
                <see href="http://www.graphviz.org/doc/info/shapes.html#html">
                    documentation
                </see>
                .
            </param>
        </member>
        <member name="T:GiGraph.Dot.Entities.Labels.DotLabel">
            <summary>
                Represents label. It can either be a text label (<see cref="T:GiGraph.Dot.Entities.Labels.DotTextLabel" />), or an HTML label ( <see cref="T:GiGraph.Dot.Entities.Labels.DotHtmlLabel" />
                ). <see cref="T:GiGraph.Dot.Entities.Labels.DotRecordLabel" />, on the other hand, can be used for record-like nodes.
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Labels.DotLabel.FromText(System.String)">
            <summary>
                Creates a label initialized with the specified text.
            </summary>
            <param name="text">
                The text to use as the label.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Labels.DotLabel.FromFormattedText(System.String)">
            <summary>
                Creates a label initialized with formatted text. The text should be formatted and escaped according to the rules described in
                the
                <see href="http://www.graphviz.org/doc/info/attrs.html#k:escString">
                    escape string documentation
                </see>
                . If the text represents a record, its format should follow the rules described in the
                <see href="http://www.graphviz.org/doc/info/shapes.html#record">
                    record-shaped node documentation
                </see>
                .
            </summary>
            <param name="text">
                The escaped text to use as the label.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Labels.DotLabel.FromHtml(System.String)">
            <summary>
                Creates an HTML label. The HTML should be generated according to the rules described in the
                <see href="http://www.graphviz.org/doc/info/shapes.html#html">
                    documentation
                </see>
                .
            </summary>
            <param name="html">
                The HTML to use as the label.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Labels.DotLabel.FromHtml(GiGraph.Dot.Entities.Html.IDotHtmlEntity)">
            <summary>
                Creates an HTML label.
            </summary>
            <param name="htmlEntity">
                The HTML entity to use as the label.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Labels.DotLabel.FromRecord(GiGraph.Dot.Types.Records.DotRecord)">
            <summary>
                Creates a label initialized with the specified record.
            </summary>
            <param name="record">
                The record to use as the label.
            </param>
        </member>
        <member name="T:GiGraph.Dot.Entities.Labels.DotRecordLabel">
            <summary>
                Represents a record label. The value is a compatible record string following the rules described in the
                <see href="http://www.graphviz.org/doc/info/shapes.html#record">
                    documentation
                </see>
                .
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Labels.DotRecordLabel.#ctor(GiGraph.Dot.Types.Records.DotRecord)">
            <summary>
                Creates a new record label.
            </summary>
            <param name="record">
                The record to use.
            </param>
        </member>
        <member name="T:GiGraph.Dot.Entities.Labels.DotTextLabel">
            <summary>
                <para>
                    Represents a string label. The label can either be a plain text that will be escaped on output DOT script generation, or
                    an escaped string (<see cref="T:GiGraph.Dot.Types.EscapeString.DotEscapedString" />) that follows the rules described in the
                    <see href="http://www.graphviz.org/doc/info/attrs.html#k:escString">
                        documentation
                    </see>
                    .
                </para>
                <para>
                    When you want to generate an HTML-like label, use <see cref="T:GiGraph.Dot.Entities.Labels.DotHtmlLabel" /> instead.
                </para>
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Labels.DotTextLabel.#ctor(GiGraph.Dot.Types.EscapeString.DotEscapeString)">
            <summary>
                Creates a new textual label.
            </summary>
            <param name="text">
                The text to use.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Labels.DotTextLabel.ToString">
            <summary>
                Returns the label as string.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Nodes.Attributes.DotNodeGeometryAttributes.Sides">
            <summary>
                Number of sides if node <see cref="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeAttributes.Shape" /> is set to <see cref="F:GiGraph.Dot.Types.Nodes.DotNodeShape.Polygon" /> (default: 4,
                minimum: 0).
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Nodes.Attributes.DotNodeGeometryAttributes.Regular">
            <summary>
                If true, forces polygon to be regular, i.e., the vertices of the polygon will lie on a circle whose center is the center of
                the node (default: false).
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Nodes.Attributes.DotNodeGeometryAttributes.Peripheries">
            <summary>
                Sets the number of peripheries used in polygonal node shapes (<see cref="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeAttributes.Shape" />). The default value is
                shape dependent, the minimum value is 0. Note that user-defined shapes (see
                <see href="http://www.graphviz.org/doc/info/shapes.html#epsf">
                    documentation
                </see>
                ) are treated as a form of box shape, so the default peripheries value is 1, and the user-defined shape will be drawn in a
                bounding rectangle. Setting peripheries to 0 will turn this off.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Nodes.Attributes.DotNodeGeometryAttributes.Rotation">
            <summary>
                Angle, in degrees, used to rotate polygon node shapes (<see cref="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeAttributes.Shape" /> =
                <see cref="F:GiGraph.Dot.Types.Nodes.DotNodeShape.Polygon" />). For any number of polygon sides, 0 degrees rotation results in a flat base. Default: 0,
                maximum: 360.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Nodes.Attributes.DotNodeGeometryAttributes.Skew">
            <summary>
                Skew factor for node <see cref="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeAttributes.Shape" /> set to <see cref="F:GiGraph.Dot.Types.Nodes.DotNodeShape.Polygon" /> (default: 0, minimum:
                -100). Positive values skew top of polygon to right; negative to left.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Nodes.Attributes.DotNodeGeometryAttributes.Distortion">
            <summary>
                Distortion factor for node <see cref="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeAttributes.Shape" /> set to <see cref="F:GiGraph.Dot.Types.Nodes.DotNodeShape.Polygon" /> (default: 0,
                minimum: -100). Positive values cause top part to be larger than bottom; negative values do the opposite.
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Nodes.Attributes.DotNodeGeometryAttributes.Set(System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
                Sets polygon geometry attributes.
            </summary>
            <param name="sides">
                The number of sides.
            </param>
            <param name="regular">
                Determines whether the shape should be regular.
            </param>
            <param name="peripheries">
                The number of peripheries.
            </param>
            <param name="rotation">
                The rotation angle.
            </param>
            <param name="skew">
                The skew factor.
            </param>
            <param name="distortion">
                The distortion factor.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Nodes.Attributes.DotNodeGeometryAttributes.Set(GiGraph.Dot.Types.Geometry.DotPolygon)">
            <summary>
                Sets polygon geometry attributes.
            </summary>
            <param name="attributes">
                The attributes to set.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Nodes.Attributes.DotNodeGeometryAttributes.Set(GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeGeometryAttributes)">
            <summary>
                Copies geometry attributes from the specified instance.
            </summary>
            <param name="attributes">
                The instance to copy the attributes from.
            </param>
        </member>
        <member name="P:GiGraph.Dot.Entities.Nodes.Attributes.DotNodeImageAttributes.Path">
            <summary>
                <para>
                    Gives the name of a file containing an image to be displayed inside the node. The image file must be in one of the
                    <see href="http://www.graphviz.org/doc/info/output.html#d:image_fmts">
                        recognized formats
                    </see>
                    , typically JPEG, PNG, GIF, BMP, SVG or Postscript, and be able to be converted into the desired output format.
                </para>
                <para>
                    The file must contain the image size information. This is usually trivially true for the bitmap formats. For PostScript,
                    the file must contain a line starting with %%BoundingBox: followed by four integers specifying the lower left x and y
                    coordinates and the upper right x and y coordinates of the bounding box for the image, the coordinates being in points.
                    An SVG image file must contain width and height attributes, typically as part of the svg element. The values for these
                    should have the form of a floating point number, followed by optional units, e.g., width="76pt". Recognized units are in,
                    px, pc, pt, cm and mm for inches, pixels, picas, points, centimeters and millimeters, respectively. The default unit is
                    points.
                </para>
                <para>
                    Unlike with the shapefile attribute, the image is treated as node content rather than the entire node. In particular, an
                    image can be contained in a node of any shape, not just a rectangle.
                </para>
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Nodes.Attributes.DotNodeImageAttributes.Alignment">
            <summary>
                Controls how an image is positioned within its containing node. This only has an effect when the image is smaller than the
                containing node. The default is to be centered both horizontally and vertically (<see cref="F:GiGraph.Dot.Types.Alignment.DotAlignment.MiddleCenter" />).
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Nodes.Attributes.DotNodeImageAttributes.Scaling">
            <summary>
                <para>
                    Attribute controlling how an image fills its containing node. In general, the image is given its natural size, (compare
                    the <see cref="P:GiGraph.Dot.Entities.Graphs.Attributes.DotGraphCanvasAttributes.Dpi" /> attribute on graph <see cref="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphRootAttributes.Canvas" />), and
                    the node size is made large enough to contain its image, its label, its padding, and its peripheries. Its width and
                    height will also be at least as large as its minimum width and height. If, however, the node's
                    <see cref="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeRootAttributes.Size" /> <see cref="P:GiGraph.Dot.Entities.Nodes.Attributes.DotNodeSizeAttributes.Mode" /> is
                    <see cref="F:GiGraph.Dot.Types.Nodes.DotNodeSizing.Fixed" />, the <see cref="P:GiGraph.Dot.Entities.Nodes.Attributes.DotNodeSizeAttributes.Width" /> and
                    <see cref="P:GiGraph.Dot.Entities.Nodes.Attributes.DotNodeSizeAttributes.Height" /> attributes specify the exact size of the node.
                </para>
                <para>
                    During rendering, in the default case (<see cref="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeImageAttributes.Scaling" /> = <see cref="F:GiGraph.Dot.Types.Images.DotImageScaling.None" />), the image retains
                    its natural size. If <see cref="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeImageAttributes.Scaling" /> = <see cref="F:GiGraph.Dot.Types.Images.DotImageScaling.Uniform" />, the image is uniformly scaled
                    (i.e., its aspect ratio is preserved) to fit inside the node. At least one dimension of the image will be as large as
                    possible given the size of the node. When <see cref="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeImageAttributes.Scaling" /> = <see cref="F:GiGraph.Dot.Types.Images.DotImageScaling.FillWidth" />, the width of
                    the image is scaled to fill the node width. The corresponding property holds when <see cref="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeImageAttributes.Scaling" /> =
                    <see cref="F:GiGraph.Dot.Types.Images.DotImageScaling.FillHeight" />. When <see cref="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeImageAttributes.Scaling" /> = <see cref="F:GiGraph.Dot.Types.Images.DotImageScaling.FillBoth" />, both
                    the height and the width are scaled separately to fill the node.
                </para>
                <para>
                    In all cases, if a dimension of the image is larger than the corresponding dimension of the node, that dimension of the
                    image is scaled down to fit the node. As with the case of expansion, if <see cref="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeImageAttributes.Scaling" /> =
                    <see cref="F:GiGraph.Dot.Types.Images.DotImageScaling.Uniform" />, width and height are scaled uniformly.
                </para>
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Nodes.Attributes.DotNodeImageAttributes.Set(System.String,System.Nullable{GiGraph.Dot.Types.Alignment.DotAlignment},System.Nullable{GiGraph.Dot.Types.Images.DotImageScaling})">
            <summary>
                Specifies image attributes.
            </summary>
            <param name="path">
                The path to an image.
            </param>
            <param name="alignment">
                The alignment of the image.
            </param>
            <param name="scaling">
                The scaling option to apply to the image.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Nodes.Attributes.DotNodeImageAttributes.Set(GiGraph.Dot.Types.Images.DotImage)">
            <summary>
                Specifies image attributes.
            </summary>
            <param name="attributes">
                The image attributes to set.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Nodes.Attributes.DotNodeImageAttributes.Set(GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeImageAttributes)">
            <summary>
                Copies image attributes from the specified instance.
            </summary>
            <param name="attributes">
                The instance to copy the attributes from.
            </param>
        </member>
        <member name="P:GiGraph.Dot.Entities.Nodes.Attributes.DotNodeSizeAttributes.Width">
            <summary>
                <para>
                    Width of node, in inches (default: 0.75, minimum: 0.01). This is taken as the initial, minimum width of the node. If
                    <see cref="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeSizeAttributes.Mode" /> is <see cref="F:GiGraph.Dot.Types.Nodes.DotNodeSizing.Fixed" />, this will be the final width of the node. Otherwise, if the
                    node label requires more width to fit, the node's width will be increased to contain the label. Note also that, if the
                    output format is dot, the value given to width will be the final value.
                </para>
                <para>
                    If the node shape is regular, the width and height are made identical. In this case, if either the width or the height is
                    set explicitly, that value is used. In this case, if both the width or the height are set explicitly, the maximum of the
                    two values is used. If neither is set explicitly, the minimum of the two default values is used.
                </para>
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Nodes.Attributes.DotNodeSizeAttributes.Height">
            <summary>
                <para>
                    Height of node, in inches (default: 0.5, minimum: 0.02). This is taken as the initial, minimum height of the node. If
                    <see cref="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeSizeAttributes.Mode" /> is <see cref="F:GiGraph.Dot.Types.Nodes.DotNodeSizing.Fixed" />, this will be the final height of the node. Otherwise, if the
                    node label requires more height to fit, the node's height will be increased to contain the label. Note also that, if the
                    output format is dot, the value given to height will be the final value.
                </para>
                <para>
                    If the node shape is regular, the width and height are made identical. In this case, if either the width or the height is
                    set explicitly, that value is used. In this case, if both the width or the height are set explicitly, the maximum of the
                    two values is used. If neither is set explicitly, the minimum of the two default values is used.
                </para>
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Nodes.Attributes.DotNodeSizeAttributes.Mode">
            <summary>
                Gets or sets the value indicating how the size of the node is determined (default: <see cref="F:GiGraph.Dot.Types.Nodes.DotNodeSizing.Auto" />).
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Nodes.Attributes.DotNodeSizeAttributes.Set(System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
                Sets size attributes.
            </summary>
            <paramref name="width">
                The width to set.
            </paramref>
            <paramref name="height">
                The width to set.
            </paramref>
        </member>
        <member name="M:GiGraph.Dot.Entities.Nodes.Attributes.DotNodeSizeAttributes.Set(System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{GiGraph.Dot.Types.Nodes.DotNodeSizing})">
            <summary>
                Sets size attributes.
            </summary>
            <paramref name="width">
                The width to set.
            </paramref>
            <paramref name="height">
                The width to set.
            </paramref>
            <paramref name="mode">
                The sizing mode to set.
            </paramref>
        </member>
        <member name="M:GiGraph.Dot.Entities.Nodes.Attributes.DotNodeSizeAttributes.Set(GiGraph.Dot.Types.Geometry.DotSize)">
            <summary>
                Sets size attributes.
            </summary>
            <param name="attributes">
                The attributes to set.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Nodes.Attributes.DotNodeSizeAttributes.Set(GiGraph.Dot.Types.Nodes.DotNodeSize)">
            <summary>
                Sets size attributes.
            </summary>
            <param name="attributes">
                The attributes to set.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Nodes.Attributes.DotNodeSizeAttributes.Set(GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeSizeAttributes)">
            <summary>
                Copies size attributes from the specified instance.
            </summary>
            <param name="attributes">
                The instance to copy the attributes from.
            </param>
        </member>
        <member name="P:GiGraph.Dot.Entities.Nodes.Attributes.DotNodeStyleAttributeOptions.Diagonals">
            <summary>
                When set, causes small chords to be drawn near the vertices of the node’s polygon or, in case of circles and ellipses, two
                chords near the top and the bottom of the shape.
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Nodes.Attributes.DotNodeStyleAttributeOptions.Set(GiGraph.Dot.Types.Nodes.DotNodeStyleProperties)">
            <summary>
                Applies the specified style options.
            </summary>
            <param name="options">
                The options to apply.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Nodes.Attributes.DotNodeStyleAttributeOptions.Set(GiGraph.Dot.Types.Nodes.DotNodeFillStyle,GiGraph.Dot.Types.Styling.DotBorderStyle,GiGraph.Dot.Types.Styling.DotBorderWeight,GiGraph.Dot.Types.Styling.DotCornerStyle,System.Boolean,System.Boolean)">
            <summary>
                Applies the specified style options.
            </summary>
            <param name="fillStyle">
                The fill style to set.
            </param>
            <param name="borderStyle">
                The border style to set.
            </param>
            <param name="borderWeight">
                The border weight to set.
            </param>
            <param name="cornerStyle">
                The corner style to set.
            </param>
            <param name="diagonals">
                Causes small chords to be drawn near the vertices of the node’s polygon or, in case of circles and ellipses, two chords near
                the top and the bottom of the shape.
            </param>
            <param name="invisible">
                Determines whether the node should be invisible.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Nodes.Attributes.DotNodeStyleAttributeOptions.CopyFrom(GiGraph.Dot.Entities.Nodes.Attributes.DotNodeStyleAttributeOptions)">
            <summary>
                Copies style options from the specified instance.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeAttributes.Style">
            <summary>
                <para>
                    Gets or sets the style of the cluster (default: unset). See the descriptions of individual <see cref="T:GiGraph.Dot.Types.Styling.DotStyles" />
                    values to learn which styles are applicable to this type of element.
                </para>
                <para>
                    Multiple styles can be used at once, for example: <see cref="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeAttributes.Style" /> = <see cref="F:GiGraph.Dot.Types.Styling.DotStyles.Rounded" /> |
                    <see cref="F:GiGraph.Dot.Types.Styling.DotStyles.Bold" />;
                </para>
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeAttributes.Label">
            <summary>
                <para>
                    Gets or sets the label to display on the node. It may be plain text (<see cref="T:System.String" />), HTML (
                    <see cref="T:GiGraph.Dot.Types.Html.DotHtmlString" />), or a record (<see cref="T:GiGraph.Dot.Types.Records.DotRecord" />) for a record-shaped node (when <see cref="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeAttributes.Shape" />
                    = <see cref="F:GiGraph.Dot.Types.Nodes.DotNodeShape.Record" /> or <see cref="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeAttributes.Shape" /> = <see cref="F:GiGraph.Dot.Types.Nodes.DotNodeShape.RoundedRecord" />). When not
                    specified, node identifier is used.
                </para>
                <para>
                    See also <see cref="T:GiGraph.Dot.Types.EscapeString.DotFormattedTextBuilder" /> for text justification and simple formatting,
                    <see cref="T:GiGraph.Dot.Types.Records.DotRecordBuilder" /> for building simple tables with records, and <see cref="T:GiGraph.Dot.Entities.Html.Builder.DotHtmlBuilder" /> for custom
                    text styling and defining tables. The latter one gives the most possibilities (specifying font, size, color, style,
                    images, etc.).
                </para>
                <para>
                    Examples:
                    <list type="bullet">
                        <item>
                            <description>
                                <see cref="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeAttributes.Label" /> = "My label";
                            </description>
                        </item>
                        <item>
                            <description>
                                <see cref="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeAttributes.Label" /> = new <see cref="T:GiGraph.Dot.Types.Records.DotRecord" />("My field 1", "My field 2");
                            </description>
                        </item>
                        <item>
                            <description>
                                <see cref="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeAttributes.Label" /> = new <see cref="T:GiGraph.Dot.Entities.Html.Font.Styles.DotHtmlBold" />("My label");
                            </description>
                        </item>
                        <item>
                            <description>
                                <see cref="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeAttributes.Label" /> = (<see cref="T:GiGraph.Dot.Types.Html.DotHtmlString" />) "&lt;b&gt;My label&lt;/b&gt;";
                            </description>
                        </item>
                    </list>
                </para>
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeAttributes.ExternalLabel">
            <summary>
                External label for the node. The label will be placed outside of the node but near it. This can be useful in DOT to avoid the
                occasional problem when the use of edge labels distorts the layout. For other layouts, this attribute can be viewed as a
                synonym for the <see cref="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeAttributes.Label" /> attribute. These labels are added after all nodes and edges have been placed. The labels
                will be placed so that they do not overlap any node or label. This means it may not be possible to place all of them. To
                force placing all of them, use the <see cref="P:GiGraph.Dot.Entities.Graphs.Attributes.DotGraphLayoutAttributes.ForceExternalLabels" /> attribute of graph
                <see cref="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphRootAttributes.Layout" />.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeAttributes.LabelAlignment">
            <summary>
                Vertical placement of the label (default: <see cref="F:GiGraph.Dot.Types.Alignment.DotVerticalAlignment.Center" />). This attribute is used only when the
                height of the node is larger than the height of its label.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeAttributes.Tooltip">
            <summary>
                Tooltip annotation attached to the node (svg, cmap only). If unset, Graphviz will use the <see cref="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeAttributes.Label" /> attribute if
                defined. Note that if the label is a record specification or an HTML-like label, the resulting tooltip may be unhelpful. In
                this case, if tooltips will be generated, the user should set a tooltip attribute explicitly.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeAttributes.Color">
            <summary>
                <para>
                    Gets or sets the color to use for the node (default: <see cref="P:System.Drawing.Color.Black" />).
                </para>
                <para>
                    If <see cref="T:GiGraph.Dot.Types.Colors.DotGradientColor" /> is used, with no weighted colors in its parameters (<see cref="T:GiGraph.Dot.Types.Colors.DotColor" /> items
                    only), and a <see cref="F:GiGraph.Dot.Types.Nodes.DotNodeFillStyle.Normal" /> fill style is specified for the node, a linear gradient fill is done.
                </para>
                <para>
                    If <see cref="T:GiGraph.Dot.Types.Colors.DotGradientColor" /> is used with weighted colors (see <see cref="T:GiGraph.Dot.Types.Colors.DotWeightedColor" />), a degenerate
                    linear gradient fill is done. This essentially does a fill using two colors, with the
                    <see cref="P:GiGraph.Dot.Types.Colors.DotWeightedColor.Weight" /> specifying how much of region is filled with each color.
                </para>
                <para>
                    If a <see cref="F:GiGraph.Dot.Types.Nodes.DotNodeFillStyle.Radial" /> fill style is specified for the node, then a radial gradient fill is done.
                    See also the <see cref="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeAttributes.GradientFillAngle" /> attribute for setting a gradient angle.
                </para>
                <para>
                    These fills work with any shape. For certain shapes, fill style can be set to do fills using more than 2 colors (set the
                    fill style to <see cref="F:GiGraph.Dot.Types.Nodes.DotNodeFillStyle.Striped" /> or <see cref="F:GiGraph.Dot.Types.Nodes.DotNodeFillStyle.Wedged" /> style, and use
                    <see cref="T:GiGraph.Dot.Types.Colors.DotMultiColor" /> as a color list definition).
                </para>
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeAttributes.FillColor">
            <summary>
                <para>
                    Gets or sets the color used to fill the background of the node, assuming that the fill style of the node is
                    <see cref="F:GiGraph.Dot.Types.Nodes.DotNodeFillStyle.Normal" /> (default: <see cref="P:System.Drawing.Color.LightGray" />). If
                    <see cref="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeAttributes.FillColor" /> is not defined, <see cref="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeAttributes.Color" /> is used. If it is not defined too, the default is used,
                    except for <see cref="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeAttributes.Shape" /> of <see cref="F:GiGraph.Dot.Types.Nodes.DotNodeShape.Point" />, or when the output format is MIF, which use black
                    by default.
                </para>
                <para>
                    When <see cref="T:GiGraph.Dot.Types.Colors.DotGradientColor" /> is used, a gradient fill is generated. By default, this is a linear fill; applying
                    the <see cref="F:GiGraph.Dot.Types.Nodes.DotNodeFillStyle.Radial" /> fill style to the node will cause a radial fill. If the second color is
                    <see cref="F:System.Drawing.Color.Empty" />, the default color is used for it. See also the
                    <see cref="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeAttributes.GradientFillAngle" /> attribute for setting a gradient angle.
                </para>
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeAttributes.ColorScheme">
            <summary>
                Specifies a color scheme namespace to use. If defined, specifies the context for interpreting color names. If no color scheme
                is set, the standard <see cref="F:GiGraph.Dot.Types.Colors.DotColorSchemes.X11" /> naming is used. For example, if
                <see cref="P:GiGraph.Dot.Types.Colors.DotColorSchemes.DotBrewerColorSchemes.BuGn9" /> Brewer color scheme is used, then a color named "7", e.g.
                Color.FromName("7"), will be evaluated in the context of that specific color scheme. See <see cref="T:GiGraph.Dot.Types.Colors.DotColorSchemes" /> for
                supported scheme names.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeAttributes.GradientFillAngle">
            <summary>
                If a gradient fill is being used, this determines the angle of the fill. For linear fills, the colors transform along a line
                specified by the angle and the center of the object. For radial fills, a value of zero causes the colors to transform
                radially from the center; for non-zero values, the colors transform from a point near the object's periphery as specified by
                the value. If unset, the default angle is 0.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeAttributes.BorderWidth">
            <summary>
                Specifies the width of the pen, in points, used to draw lines and curves. The value has no effect on text. Default: 1.0,
                minimum: 0.0.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeAttributes.Shape">
            <summary>
                Gets or sets the shape of the node (default: <see cref="F:GiGraph.Dot.Types.Nodes.DotNodeShape.Ellipse" />).
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeAttributes.Padding">
            <summary>
                Specifies space left around the node's label. By default, the value is (0.11, 0.055).
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeAttributes.Comment">
            <summary>
                Comments are inserted into output. Device-dependent.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeAttributes.EdgeOrderingMode">
            <summary>
                Determines how inedges and outedges, that is, edges with the node as their head or tail node respectively, are ordered (dot
                only). If defined on a graph or subgraph, the value is applied to all nodes in the graph or subgraph. Note that the
                corresponding graph attribute takes precedence over the node attribute.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeAttributes.GroupName">
            <summary>
                The name of the group the node belongs to (dot only). If the endpoints of an edge belong to the same group (have the same
                group name assigned), parameters are set to avoid crossings and keep the edges straight (dot only).
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeAttributes.SortIndex">
            <summary>
                Gets or sets the sorting index of the node (default: 0). If <see cref="P:GiGraph.Dot.Entities.Graphs.Attributes.DotGraphLayoutAttributes.PackingMode" /> of graph
                <see cref="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphRootAttributes.Layout" /> indicates an array packing, this attribute specifies an insertion order among
                the components, with smaller values inserted first.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeAttributes.IsRoot">
            <summary>
                <para>
                    Specifies whether the node should be used as the center of the layout and the root of the generated spanning tree
                    (default: false; circo, twopi only).
                </para>
                <para>
                    In twopi, root will actually be the central node. In circo, the block containing the node will be central in the drawing
                    of its connected component. If not defined, twopi will pick a most central node, and circo will pick a random node.
                </para>
                <para>
                    If the <see cref="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphAttributes.RootNodeId" /> attribute on the graph is defined as the empty string, twopi will
                    reset it to name of the node picked as the root node.
                </para>
                <para>
                    For twopi, it is possible to have multiple roots, presumably one for each component. If more than one node in a component
                    is marked as the root, twopi will pick one.
                </para>
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeAttributes.ObjectId">
            <summary>
                <para>
                    Allows the graph author to provide an identifier for graph objects which is to be included in the output (svg,
                    postscript, map only).
                </para>
                <para>
                    Normal <see cref="F:GiGraph.Dot.Types.EscapeString.DotEscapeString.NodeId" />, <see cref="F:GiGraph.Dot.Types.EscapeString.DotEscapeString.EdgeDefinition" />,
                    <see cref="F:GiGraph.Dot.Types.EscapeString.DotEscapeString.GraphId" /> substitutions can be applied (see <see cref="T:GiGraph.Dot.Types.EscapeString.DotFormattedTextBuilder" />). Note,
                    however, that <see cref="F:GiGraph.Dot.Types.EscapeString.DotEscapeString.EdgeDefinition" /> does not provide a unique ID for multi-edges.
                </para>
                <para>
                    If provided, it is the responsibility of the provider to keep ID values unique for its intended downstream use. If no ID
                    attribute is provided, then a unique internal ID is used. However, this value is unpredictable by the graph writer.
                </para>
                <para>
                    If the graph provides an ID attribute, this will be used as a prefix for internally generated attributes. By making
                    internally-used attributes distinct, the user can include multiple image maps in the same document.
                </para>
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeGeometryAttributes.Sides">
            <summary>
                Number of sides if node <see cref="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeAttributes.Shape" /> is set to <see cref="F:GiGraph.Dot.Types.Nodes.DotNodeShape.Polygon" /> (default: 4,
                minimum: 0).
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeGeometryAttributes.Regular">
            <summary>
                If true, forces polygon to be regular, i.e., the vertices of the polygon will lie on a circle whose center is the center of
                the node (default: false).
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeGeometryAttributes.Peripheries">
            <summary>
                Sets the number of peripheries used in polygonal node shapes (<see cref="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeAttributes.Shape" />). The default value is
                shape dependent, the minimum value is 0. Note that user-defined shapes (see
                <see href="http://www.graphviz.org/doc/info/shapes.html#epsf">
                    documentation
                </see>
                ) are treated as a form of box shape, so the default peripheries value is 1, and the user-defined shape will be drawn in a
                bounding rectangle. Setting peripheries to 0 will turn this off.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeGeometryAttributes.Rotation">
            <summary>
                Angle, in degrees, used to rotate polygon node shapes (<see cref="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeAttributes.Shape" /> =
                <see cref="F:GiGraph.Dot.Types.Nodes.DotNodeShape.Polygon" />). For any number of polygon sides, 0 degrees rotation results in a flat base. Default: 0,
                maximum: 360.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeGeometryAttributes.Skew">
            <summary>
                Skew factor for node <see cref="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeAttributes.Shape" /> set to <see cref="F:GiGraph.Dot.Types.Nodes.DotNodeShape.Polygon" /> (default: 0, minimum:
                -100). Positive values skew top of polygon to right; negative to left.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeGeometryAttributes.Distortion">
            <summary>
                Distortion factor for node <see cref="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeAttributes.Shape" /> set to <see cref="F:GiGraph.Dot.Types.Nodes.DotNodeShape.Polygon" /> (default: 0,
                minimum: -100). Positive values cause top part to be larger than bottom; negative values do the opposite.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeImageAttributes.Path">
            <summary>
                <para>
                    Gives the name of a file containing an image to be displayed inside the node. The image file must be in one of the
                    <see href="http://www.graphviz.org/doc/info/output.html#d:image_fmts">
                        recognized formats
                    </see>
                    , typically JPEG, PNG, GIF, BMP, SVG or Postscript, and be able to be converted into the desired output format.
                </para>
                <para>
                    The file must contain the image size information. This is usually trivially true for the bitmap formats. For PostScript,
                    the file must contain a line starting with %%BoundingBox: followed by four integers specifying the lower left x and y
                    coordinates and the upper right x and y coordinates of the bounding box for the image, the coordinates being in points.
                    An SVG image file must contain width and height attributes, typically as part of the svg element. The values for these
                    should have the form of a floating point number, followed by optional units, e.g., width="76pt". Recognized units are in,
                    px, pc, pt, cm and mm for inches, pixels, picas, points, centimeters and millimeters, respectively. The default unit is
                    points.
                </para>
                <para>
                    Unlike with the shapefile attribute, the image is treated as node content rather than the entire node. In particular, an
                    image can be contained in a node of any shape, not just a rectangle.
                </para>
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeImageAttributes.Alignment">
            <summary>
                Controls how an image is positioned within its containing node. This only has an effect when the image is smaller than the
                containing node. The default is to be centered both horizontally and vertically (<see cref="F:GiGraph.Dot.Types.Alignment.DotAlignment.MiddleCenter" />).
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeImageAttributes.Scaling">
            <summary>
                <para>
                    Attribute controlling how an image fills its containing node. In general, the image is given its natural size, (compare
                    the <see cref="P:GiGraph.Dot.Entities.Graphs.Attributes.DotGraphCanvasAttributes.Dpi" /> attribute on graph <see cref="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphRootAttributes.Canvas" />), and
                    the node size is made large enough to contain its image, its label, its padding, and its peripheries. Its width and
                    height will also be at least as large as its minimum width and height. If, however, the node's
                    <see cref="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeRootAttributes.Size" /> <see cref="P:GiGraph.Dot.Entities.Nodes.Attributes.DotNodeSizeAttributes.Mode" /> is
                    <see cref="F:GiGraph.Dot.Types.Nodes.DotNodeSizing.Fixed" />, the <see cref="P:GiGraph.Dot.Entities.Nodes.Attributes.DotNodeSizeAttributes.Width" /> and
                    <see cref="P:GiGraph.Dot.Entities.Nodes.Attributes.DotNodeSizeAttributes.Height" /> attributes specify the exact size of the node.
                </para>
                <para>
                    During rendering, in the default case (<see cref="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeImageAttributes.Scaling" /> = <see cref="F:GiGraph.Dot.Types.Images.DotImageScaling.None" />), the image retains
                    its natural size. If <see cref="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeImageAttributes.Scaling" /> = <see cref="F:GiGraph.Dot.Types.Images.DotImageScaling.Uniform" />, the image is uniformly scaled
                    (i.e., its aspect ratio is preserved) to fit inside the node. At least one dimension of the image will be as large as
                    possible given the size of the node. When <see cref="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeImageAttributes.Scaling" /> = <see cref="F:GiGraph.Dot.Types.Images.DotImageScaling.FillWidth" />, the width of
                    the image is scaled to fill the node width. The corresponding property holds when <see cref="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeImageAttributes.Scaling" /> =
                    <see cref="F:GiGraph.Dot.Types.Images.DotImageScaling.FillHeight" />. When <see cref="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeImageAttributes.Scaling" /> = <see cref="F:GiGraph.Dot.Types.Images.DotImageScaling.FillBoth" />, both
                    the height and the width are scaled separately to fill the node.
                </para>
                <para>
                    In all cases, if a dimension of the image is larger than the corresponding dimension of the node, that dimension of the
                    image is scaled down to fit the node. As with the case of expansion, if <see cref="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeImageAttributes.Scaling" /> =
                    <see cref="F:GiGraph.Dot.Types.Images.DotImageScaling.Uniform" />, width and height are scaled uniformly.
                </para>
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeRootAttributes.Font">
            <summary>
                Font attributes.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeRootAttributes.Style">
            <summary>
                Style options.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeRootAttributes.Size">
            <summary>
                Node size attributes.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeRootAttributes.Geometry">
            <summary>
                Node geometry attributes applicable if <see cref="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeAttributes.Shape" /> is set to <see cref="F:GiGraph.Dot.Types.Nodes.DotNodeShape.Polygon" />.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeRootAttributes.Image">
            <summary>
                Node image attributes.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeRootAttributes.SvgStyleSheet">
            <summary>
                Style sheet attributes used for SVG output.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeRootAttributes.Hyperlink">
            <summary>
                Hyperlink attributes.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeSizeAttributes.Width">
            <summary>
                <para>
                    Width of node, in inches (default: 0.75, minimum: 0.01). This is taken as the initial, minimum width of the node. If
                    <see cref="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeSizeAttributes.Mode" /> is <see cref="F:GiGraph.Dot.Types.Nodes.DotNodeSizing.Fixed" />, this will be the final width of the node. Otherwise, if the
                    node label requires more width to fit, the node's width will be increased to contain the label. Note also that, if the
                    output format is dot, the value given to width will be the final value.
                </para>
                <para>
                    If the node shape is regular, the width and height are made identical. In this case, if either the width or the height is
                    set explicitly, that value is used. In this case, if both the width or the height are set explicitly, the maximum of the
                    two values is used. If neither is set explicitly, the minimum of the two default values is used.
                </para>
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeSizeAttributes.Height">
            <summary>
                <para>
                    Height of node, in inches (default: 0.5, minimum: 0.02). This is taken as the initial, minimum height of the node. If
                    <see cref="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeSizeAttributes.Mode" /> is <see cref="F:GiGraph.Dot.Types.Nodes.DotNodeSizing.Fixed" />, this will be the final height of the node. Otherwise, if the
                    node label requires more height to fit, the node's height will be increased to contain the label. Note also that, if the
                    output format is dot, the value given to height will be the final value.
                </para>
                <para>
                    If the node shape is regular, the width and height are made identical. In this case, if either the width or the height is
                    set explicitly, that value is used. In this case, if both the width or the height are set explicitly, the maximum of the
                    two values is used. If neither is set explicitly, the minimum of the two default values is used.
                </para>
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeSizeAttributes.Mode">
            <summary>
                Gets or sets the value indicating how the size of the node is determined (default: <see cref="F:GiGraph.Dot.Types.Nodes.DotNodeSizing.Auto" />).
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Nodes.Collections.DotNodeCollection.Font">
            <summary>
                Font attributes.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Nodes.Collections.DotNodeCollection.Image">
            <summary>
                Node image attributes.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Nodes.Collections.DotNodeCollection.Geometry">
            <summary>
                Node geometry attributes applicable if <see cref="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeAttributes.Shape" /> is set to <see cref="F:GiGraph.Dot.Types.Nodes.DotNodeShape.Polygon" />.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Nodes.Collections.DotNodeCollection.Size">
            <summary>
                Node size attributes.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Nodes.Collections.DotNodeCollection.Style">
            <summary>
                Style options.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Nodes.Collections.DotNodeCollection.SvgStyleSheet">
            <summary>
                Style sheet attributes used for SVG output.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Nodes.Collections.DotNodeCollection.Hyperlink">
            <summary>
                Hyperlink attributes.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Nodes.Collections.DotNodeCollection.Label">
            <summary>
                <para>
                    Gets or sets the label to display on the node. It may be plain text (<see cref="T:System.String" />), HTML (
                    <see cref="T:GiGraph.Dot.Types.Html.DotHtmlString" />), or a record (<see cref="T:GiGraph.Dot.Types.Records.DotRecord" />) for a record-shaped node (when <see cref="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeAttributes.Shape" />
                    = <see cref="F:GiGraph.Dot.Types.Nodes.DotNodeShape.Record" /> or <see cref="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeAttributes.Shape" /> = <see cref="F:GiGraph.Dot.Types.Nodes.DotNodeShape.RoundedRecord" />). When not
                    specified, node identifier is used.
                </para>
                <para>
                    See also <see cref="T:GiGraph.Dot.Types.EscapeString.DotFormattedTextBuilder" /> for text justification and simple formatting,
                    <see cref="T:GiGraph.Dot.Types.Records.DotRecordBuilder" /> for building simple tables with records, and <see cref="T:GiGraph.Dot.Entities.Html.Builder.DotHtmlBuilder" /> for custom
                    text styling and defining tables. The latter one gives the most possibilities (specifying font, size, color, style,
                    images, etc.).
                </para>
                <para>
                    Examples:
                    <list type="bullet">
                        <item>
                            <description>
                                <see cref="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeAttributes.Label" /> = "My label";
                            </description>
                        </item>
                        <item>
                            <description>
                                <see cref="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeAttributes.Label" /> = new <see cref="T:GiGraph.Dot.Types.Records.DotRecord" />("My field 1", "My field 2");
                            </description>
                        </item>
                        <item>
                            <description>
                                <see cref="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeAttributes.Label" /> = new <see cref="T:GiGraph.Dot.Entities.Html.Font.Styles.DotHtmlBold" />("My label");
                            </description>
                        </item>
                        <item>
                            <description>
                                <see cref="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeAttributes.Label" /> = (<see cref="T:GiGraph.Dot.Types.Html.DotHtmlString" />) "&lt;b&gt;My label&lt;/b&gt;";
                            </description>
                        </item>
                    </list>
                </para>
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Nodes.Collections.DotNodeCollection.ExternalLabel">
            <summary>
                External label for the node. The label will be placed outside of the node but near it. This can be useful in DOT to avoid the
                occasional problem when the use of edge labels distorts the layout. For other layouts, this attribute can be viewed as a
                synonym for the <see cref="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeAttributes.Label" /> attribute. These labels are added after all nodes and edges have been placed. The labels
                will be placed so that they do not overlap any node or label. This means it may not be possible to place all of them. To
                force placing all of them, use the <see cref="P:GiGraph.Dot.Entities.Graphs.Attributes.DotGraphLayoutAttributes.ForceExternalLabels" /> attribute of graph
                <see cref="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphRootAttributes.Layout" />.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Nodes.Collections.DotNodeCollection.LabelAlignment">
            <summary>
                Vertical placement of the label (default: <see cref="F:GiGraph.Dot.Types.Alignment.DotVerticalAlignment.Center" />). This attribute is used only when the
                height of the node is larger than the height of its label.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Nodes.Collections.DotNodeCollection.Tooltip">
            <summary>
                Tooltip annotation attached to the node (svg, cmap only). If unset, Graphviz will use the <see cref="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeAttributes.Label" /> attribute if
                defined. Note that if the label is a record specification or an HTML-like label, the resulting tooltip may be unhelpful. In
                this case, if tooltips will be generated, the user should set a tooltip attribute explicitly.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Nodes.Collections.DotNodeCollection.Color">
            <summary>
                <para>
                    Gets or sets the color to use for the node (default: <see cref="P:System.Drawing.Color.Black" />).
                </para>
                <para>
                    If <see cref="T:GiGraph.Dot.Types.Colors.DotGradientColor" /> is used, with no weighted colors in its parameters (<see cref="T:GiGraph.Dot.Types.Colors.DotColor" /> items
                    only), and a <see cref="F:GiGraph.Dot.Types.Nodes.DotNodeFillStyle.Normal" /> fill style is specified for the node, a linear gradient fill is done.
                </para>
                <para>
                    If <see cref="T:GiGraph.Dot.Types.Colors.DotGradientColor" /> is used with weighted colors (see <see cref="T:GiGraph.Dot.Types.Colors.DotWeightedColor" />), a degenerate
                    linear gradient fill is done. This essentially does a fill using two colors, with the
                    <see cref="P:GiGraph.Dot.Types.Colors.DotWeightedColor.Weight" /> specifying how much of region is filled with each color.
                </para>
                <para>
                    If a <see cref="F:GiGraph.Dot.Types.Nodes.DotNodeFillStyle.Radial" /> fill style is specified for the node, then a radial gradient fill is done.
                    See also the <see cref="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeAttributes.GradientFillAngle" /> attribute for setting a gradient angle.
                </para>
                <para>
                    These fills work with any shape. For certain shapes, fill style can be set to do fills using more than 2 colors (set the
                    fill style to <see cref="F:GiGraph.Dot.Types.Nodes.DotNodeFillStyle.Striped" /> or <see cref="F:GiGraph.Dot.Types.Nodes.DotNodeFillStyle.Wedged" /> style, and use
                    <see cref="T:GiGraph.Dot.Types.Colors.DotMultiColor" /> as a color list definition).
                </para>
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Nodes.Collections.DotNodeCollection.FillColor">
            <summary>
                <para>
                    Gets or sets the color used to fill the background of the node, assuming that the fill style of the node is
                    <see cref="F:GiGraph.Dot.Types.Nodes.DotNodeFillStyle.Normal" /> (default: <see cref="P:System.Drawing.Color.LightGray" />). If
                    <see cref="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeAttributes.FillColor" /> is not defined, <see cref="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeAttributes.Color" /> is used. If it is not defined too, the default is used,
                    except for <see cref="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeAttributes.Shape" /> of <see cref="F:GiGraph.Dot.Types.Nodes.DotNodeShape.Point" />, or when the output format is MIF, which use black
                    by default.
                </para>
                <para>
                    When <see cref="T:GiGraph.Dot.Types.Colors.DotGradientColor" /> is used, a gradient fill is generated. By default, this is a linear fill; applying
                    the <see cref="F:GiGraph.Dot.Types.Nodes.DotNodeFillStyle.Radial" /> fill style to the node will cause a radial fill. If the second color is
                    <see cref="F:System.Drawing.Color.Empty" />, the default color is used for it. See also the
                    <see cref="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeAttributes.GradientFillAngle" /> attribute for setting a gradient angle.
                </para>
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Nodes.Collections.DotNodeCollection.ColorScheme">
            <summary>
                Specifies a color scheme namespace to use. If defined, specifies the context for interpreting color names. If no color scheme
                is set, the standard <see cref="F:GiGraph.Dot.Types.Colors.DotColorSchemes.X11" /> naming is used. For example, if
                <see cref="P:GiGraph.Dot.Types.Colors.DotColorSchemes.DotBrewerColorSchemes.BuGn9" /> Brewer color scheme is used, then a color named "7", e.g.
                Color.FromName("7"), will be evaluated in the context of that specific color scheme. See <see cref="T:GiGraph.Dot.Types.Colors.DotColorSchemes" /> for
                supported scheme names.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Nodes.Collections.DotNodeCollection.GradientFillAngle">
            <summary>
                If a gradient fill is being used, this determines the angle of the fill. For linear fills, the colors transform along a line
                specified by the angle and the center of the object. For radial fills, a value of zero causes the colors to transform
                radially from the center; for non-zero values, the colors transform from a point near the object's periphery as specified by
                the value. If unset, the default angle is 0.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Nodes.Collections.DotNodeCollection.BorderWidth">
            <summary>
                Specifies the width of the pen, in points, used to draw lines and curves. The value has no effect on text. Default: 1.0,
                minimum: 0.0.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Nodes.Collections.DotNodeCollection.Shape">
            <summary>
                Gets or sets the shape of the node (default: <see cref="F:GiGraph.Dot.Types.Nodes.DotNodeShape.Ellipse" />).
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Nodes.Collections.DotNodeCollection.Padding">
            <summary>
                Specifies space left around the node's label. By default, the value is (0.11, 0.055).
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Nodes.Collections.DotNodeCollection.Comment">
            <summary>
                Comments are inserted into output. Device-dependent.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Nodes.Collections.DotNodeCollection.EdgeOrderingMode">
            <summary>
                Determines how inedges and outedges, that is, edges with the node as their head or tail node respectively, are ordered (dot
                only). If defined on a graph or subgraph, the value is applied to all nodes in the graph or subgraph. Note that the
                corresponding graph attribute takes precedence over the node attribute.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Nodes.Collections.DotNodeCollection.GroupName">
            <summary>
                The name of the group the node belongs to (dot only). If the endpoints of an edge belong to the same group (have the same
                group name assigned), parameters are set to avoid crossings and keep the edges straight (dot only).
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Nodes.Collections.DotNodeCollection.SortIndex">
            <summary>
                Gets or sets the sorting index of the node (default: 0). If <see cref="P:GiGraph.Dot.Entities.Graphs.Attributes.DotGraphLayoutAttributes.PackingMode" /> of graph
                <see cref="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphRootAttributes.Layout" /> indicates an array packing, this attribute specifies an insertion order among
                the components, with smaller values inserted first.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Nodes.Collections.DotNodeCollection.IsRoot">
            <summary>
                <para>
                    Specifies whether the node should be used as the center of the layout and the root of the generated spanning tree
                    (default: false; circo, twopi only).
                </para>
                <para>
                    In twopi, root will actually be the central node. In circo, the block containing the node will be central in the drawing
                    of its connected component. If not defined, twopi will pick a most central node, and circo will pick a random node.
                </para>
                <para>
                    If the <see cref="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphAttributes.RootNodeId" /> attribute on the graph is defined as the empty string, twopi will
                    reset it to name of the node picked as the root node.
                </para>
                <para>
                    For twopi, it is possible to have multiple roots, presumably one for each component. If more than one node in a component
                    is marked as the root, twopi will pick one.
                </para>
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Nodes.Collections.DotNodeCollection.ObjectId">
            <summary>
                <para>
                    Allows the graph author to provide an identifier for graph objects which is to be included in the output (svg,
                    postscript, map only).
                </para>
                <para>
                    Normal <see cref="F:GiGraph.Dot.Types.EscapeString.DotEscapeString.NodeId" />, <see cref="F:GiGraph.Dot.Types.EscapeString.DotEscapeString.EdgeDefinition" />,
                    <see cref="F:GiGraph.Dot.Types.EscapeString.DotEscapeString.GraphId" /> substitutions can be applied (see <see cref="T:GiGraph.Dot.Types.EscapeString.DotFormattedTextBuilder" />). Note,
                    however, that <see cref="F:GiGraph.Dot.Types.EscapeString.DotEscapeString.EdgeDefinition" /> does not provide a unique ID for multi-edges.
                </para>
                <para>
                    If provided, it is the responsibility of the provider to keep ID values unique for its intended downstream use. If no ID
                    attribute is provided, then a unique internal ID is used. However, this value is unpredictable by the graph writer.
                </para>
                <para>
                    If the graph provides an ID attribute, this will be used as a prefix for internally generated attributes. By making
                    internally-used attributes distinct, the user can include multiple image maps in the same document.
                </para>
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Nodes.Collections.DotNodeCollection.Attributes">
            <summary>
                Provides access to the global attributes applied to nodes.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Nodes.Collections.DotNodeCollection.Annotation">
            <summary>
                The annotation to write in the output DOT script as a comment in the context of the element or section represented by the
                current object.
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Nodes.Collections.DotNodeCollection.Add``1(``0,System.Action{``0})">
            <summary>
                Adds a node to the collection and initializes its attributes.
            </summary>
            <typeparam name="T">
                The type of node to add.
            </typeparam>
            <param name="node">
                The node to add.
            </param>
            <param name="init">
                An optional node initializer delegate.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Nodes.Collections.DotNodeCollection.Add(System.String,System.Action{GiGraph.Dot.Entities.Nodes.DotNode})">
            <summary>
                Adds a node with the specified identifier to the collection, and returns it.
            </summary>
            <param name="id">
                The identifier of the node to add.
            </param>
            <param name="init">
                An optional initializer delegate to call for the created node.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Nodes.Collections.DotNodeCollection.AddGroup(System.String[])">
            <summary>
                Adds a group of nodes with the specified identifiers to the collection.
            </summary>
            <param name="ids">
                The identifiers of the nodes to add.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Nodes.Collections.DotNodeCollection.AddGroup(System.Action{GiGraph.Dot.Entities.Nodes.DotNodeGroup},System.String[])">
            <summary>
                Adds a group of nodes with the specified identifiers to the collection.
            </summary>
            <param name="init">
                An optional initializer delegate to call for the created group.
            </param>
            <param name="ids">
                The identifiers of the nodes to add.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Nodes.Collections.DotNodeCollection.AddGroup(System.Collections.Generic.IEnumerable{System.String},System.Action{GiGraph.Dot.Entities.Nodes.DotNodeGroup})">
            <summary>
                Adds a group of nodes with the specified identifiers to the collection.
            </summary>
            <param name="ids">
                The identifiers of the nodes to add.
            </param>
            <param name="init">
                An optional initializer delegate to call for the created group.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Nodes.Collections.DotNodeCollection.AddRange(System.String[])">
            <summary>
                Adds nodes with the specified identifiers to the collection, and returns them.
            </summary>
            <param name="ids">
                The identifiers of the nodes to add.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Nodes.Collections.DotNodeCollection.AddRange(System.Action{GiGraph.Dot.Entities.Nodes.DotNode},System.String[])">
            <summary>
                Adds nodes with the specified identifiers to the collection, and returns them.
            </summary>
            <param name="ids">
                The identifiers of the nodes to add.
            </param>
            <param name="init">
                An optional initializer delegate to call for each created node.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Nodes.Collections.DotNodeCollection.AddRange(System.Collections.Generic.IEnumerable{System.String},System.Action{GiGraph.Dot.Entities.Nodes.DotNode})">
            <summary>
                Adds nodes with the specified identifiers to the collection, and returns them.
            </summary>
            <param name="ids">
                The identifiers of the nodes to add.
            </param>
            <param name="init">
                An optional initializer delegate to call for each created node.
            </param>
        </member>
        <member name="T:GiGraph.Dot.Entities.Nodes.DotNode">
            <summary>
                Represents a graph node.
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Nodes.DotNode.#ctor(System.String)">
            <summary>
                The unique identifier of the node.
            </summary>
            <param name="id">
                The unique identifier of the node.
            </param>
        </member>
        <member name="P:GiGraph.Dot.Entities.Nodes.DotNode.Id">
            <summary>
                Gets or sets the unique identifier of the node.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Nodes.DotNodeDefinition.Font">
            <summary>
                Font attributes.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Nodes.DotNodeDefinition.Image">
            <summary>
                Node image attributes.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Nodes.DotNodeDefinition.Geometry">
            <summary>
                Node geometry attributes applicable if <see cref="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeAttributes.Shape" /> is set to <see cref="F:GiGraph.Dot.Types.Nodes.DotNodeShape.Polygon" />.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Nodes.DotNodeDefinition.Size">
            <summary>
                Node size attributes.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Nodes.DotNodeDefinition.Style">
            <summary>
                Style options.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Nodes.DotNodeDefinition.SvgStyleSheet">
            <summary>
                Style sheet attributes used for SVG output.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Nodes.DotNodeDefinition.Hyperlink">
            <summary>
                Hyperlink attributes.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Nodes.DotNodeDefinition.Label">
            <summary>
                <para>
                    Gets or sets the label to display on the node. It may be plain text (<see cref="T:System.String" />), HTML (
                    <see cref="T:GiGraph.Dot.Types.Html.DotHtmlString" />), or a record (<see cref="T:GiGraph.Dot.Types.Records.DotRecord" />) for a record-shaped node (when <see cref="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeAttributes.Shape" />
                    = <see cref="F:GiGraph.Dot.Types.Nodes.DotNodeShape.Record" /> or <see cref="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeAttributes.Shape" /> = <see cref="F:GiGraph.Dot.Types.Nodes.DotNodeShape.RoundedRecord" />). When not
                    specified, node identifier is used.
                </para>
                <para>
                    See also <see cref="T:GiGraph.Dot.Types.EscapeString.DotFormattedTextBuilder" /> for text justification and simple formatting,
                    <see cref="T:GiGraph.Dot.Types.Records.DotRecordBuilder" /> for building simple tables with records, and <see cref="T:GiGraph.Dot.Entities.Html.Builder.DotHtmlBuilder" /> for custom
                    text styling and defining tables. The latter one gives the most possibilities (specifying font, size, color, style,
                    images, etc.).
                </para>
                <para>
                    Examples:
                    <list type="bullet">
                        <item>
                            <description>
                                <see cref="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeAttributes.Label" /> = "My label";
                            </description>
                        </item>
                        <item>
                            <description>
                                <see cref="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeAttributes.Label" /> = new <see cref="T:GiGraph.Dot.Types.Records.DotRecord" />("My field 1", "My field 2");
                            </description>
                        </item>
                        <item>
                            <description>
                                <see cref="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeAttributes.Label" /> = new <see cref="T:GiGraph.Dot.Entities.Html.Font.Styles.DotHtmlBold" />("My label");
                            </description>
                        </item>
                        <item>
                            <description>
                                <see cref="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeAttributes.Label" /> = (<see cref="T:GiGraph.Dot.Types.Html.DotHtmlString" />) "&lt;b&gt;My label&lt;/b&gt;";
                            </description>
                        </item>
                    </list>
                </para>
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Nodes.DotNodeDefinition.ExternalLabel">
            <summary>
                External label for the node. The label will be placed outside of the node but near it. This can be useful in DOT to avoid the
                occasional problem when the use of edge labels distorts the layout. For other layouts, this attribute can be viewed as a
                synonym for the <see cref="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeAttributes.Label" /> attribute. These labels are added after all nodes and edges have been placed. The labels
                will be placed so that they do not overlap any node or label. This means it may not be possible to place all of them. To
                force placing all of them, use the <see cref="P:GiGraph.Dot.Entities.Graphs.Attributes.DotGraphLayoutAttributes.ForceExternalLabels" /> attribute of graph
                <see cref="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphRootAttributes.Layout" />.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Nodes.DotNodeDefinition.LabelAlignment">
            <summary>
                Vertical placement of the label (default: <see cref="F:GiGraph.Dot.Types.Alignment.DotVerticalAlignment.Center" />). This attribute is used only when the
                height of the node is larger than the height of its label.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Nodes.DotNodeDefinition.Tooltip">
            <summary>
                Tooltip annotation attached to the node (svg, cmap only). If unset, Graphviz will use the <see cref="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeAttributes.Label" /> attribute if
                defined. Note that if the label is a record specification or an HTML-like label, the resulting tooltip may be unhelpful. In
                this case, if tooltips will be generated, the user should set a tooltip attribute explicitly.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Nodes.DotNodeDefinition.Color">
            <summary>
                <para>
                    Gets or sets the color to use for the node (default: <see cref="P:System.Drawing.Color.Black" />).
                </para>
                <para>
                    If <see cref="T:GiGraph.Dot.Types.Colors.DotGradientColor" /> is used, with no weighted colors in its parameters (<see cref="T:GiGraph.Dot.Types.Colors.DotColor" /> items
                    only), and a <see cref="F:GiGraph.Dot.Types.Nodes.DotNodeFillStyle.Normal" /> fill style is specified for the node, a linear gradient fill is done.
                </para>
                <para>
                    If <see cref="T:GiGraph.Dot.Types.Colors.DotGradientColor" /> is used with weighted colors (see <see cref="T:GiGraph.Dot.Types.Colors.DotWeightedColor" />), a degenerate
                    linear gradient fill is done. This essentially does a fill using two colors, with the
                    <see cref="P:GiGraph.Dot.Types.Colors.DotWeightedColor.Weight" /> specifying how much of region is filled with each color.
                </para>
                <para>
                    If a <see cref="F:GiGraph.Dot.Types.Nodes.DotNodeFillStyle.Radial" /> fill style is specified for the node, then a radial gradient fill is done.
                    See also the <see cref="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeAttributes.GradientFillAngle" /> attribute for setting a gradient angle.
                </para>
                <para>
                    These fills work with any shape. For certain shapes, fill style can be set to do fills using more than 2 colors (set the
                    fill style to <see cref="F:GiGraph.Dot.Types.Nodes.DotNodeFillStyle.Striped" /> or <see cref="F:GiGraph.Dot.Types.Nodes.DotNodeFillStyle.Wedged" /> style, and use
                    <see cref="T:GiGraph.Dot.Types.Colors.DotMultiColor" /> as a color list definition).
                </para>
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Nodes.DotNodeDefinition.FillColor">
            <summary>
                <para>
                    Gets or sets the color used to fill the background of the node, assuming that the fill style of the node is
                    <see cref="F:GiGraph.Dot.Types.Nodes.DotNodeFillStyle.Normal" /> (default: <see cref="P:System.Drawing.Color.LightGray" />). If
                    <see cref="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeAttributes.FillColor" /> is not defined, <see cref="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeAttributes.Color" /> is used. If it is not defined too, the default is used,
                    except for <see cref="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeAttributes.Shape" /> of <see cref="F:GiGraph.Dot.Types.Nodes.DotNodeShape.Point" />, or when the output format is MIF, which use black
                    by default.
                </para>
                <para>
                    When <see cref="T:GiGraph.Dot.Types.Colors.DotGradientColor" /> is used, a gradient fill is generated. By default, this is a linear fill; applying
                    the <see cref="F:GiGraph.Dot.Types.Nodes.DotNodeFillStyle.Radial" /> fill style to the node will cause a radial fill. If the second color is
                    <see cref="F:System.Drawing.Color.Empty" />, the default color is used for it. See also the
                    <see cref="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeAttributes.GradientFillAngle" /> attribute for setting a gradient angle.
                </para>
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Nodes.DotNodeDefinition.ColorScheme">
            <summary>
                Specifies a color scheme namespace to use. If defined, specifies the context for interpreting color names. If no color scheme
                is set, the standard <see cref="F:GiGraph.Dot.Types.Colors.DotColorSchemes.X11" /> naming is used. For example, if
                <see cref="P:GiGraph.Dot.Types.Colors.DotColorSchemes.DotBrewerColorSchemes.BuGn9" /> Brewer color scheme is used, then a color named "7", e.g.
                Color.FromName("7"), will be evaluated in the context of that specific color scheme. See <see cref="T:GiGraph.Dot.Types.Colors.DotColorSchemes" /> for
                supported scheme names.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Nodes.DotNodeDefinition.GradientFillAngle">
            <summary>
                If a gradient fill is being used, this determines the angle of the fill. For linear fills, the colors transform along a line
                specified by the angle and the center of the object. For radial fills, a value of zero causes the colors to transform
                radially from the center; for non-zero values, the colors transform from a point near the object's periphery as specified by
                the value. If unset, the default angle is 0.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Nodes.DotNodeDefinition.BorderWidth">
            <summary>
                Specifies the width of the pen, in points, used to draw lines and curves. The value has no effect on text. Default: 1.0,
                minimum: 0.0.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Nodes.DotNodeDefinition.Shape">
            <summary>
                Gets or sets the shape of the node (default: <see cref="F:GiGraph.Dot.Types.Nodes.DotNodeShape.Ellipse" />).
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Nodes.DotNodeDefinition.Padding">
            <summary>
                Specifies space left around the node's label. By default, the value is (0.11, 0.055).
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Nodes.DotNodeDefinition.Comment">
            <summary>
                Comments are inserted into output. Device-dependent.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Nodes.DotNodeDefinition.EdgeOrderingMode">
            <summary>
                Determines how inedges and outedges, that is, edges with the node as their head or tail node respectively, are ordered (dot
                only). If defined on a graph or subgraph, the value is applied to all nodes in the graph or subgraph. Note that the
                corresponding graph attribute takes precedence over the node attribute.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Nodes.DotNodeDefinition.GroupName">
            <summary>
                The name of the group the node belongs to (dot only). If the endpoints of an edge belong to the same group (have the same
                group name assigned), parameters are set to avoid crossings and keep the edges straight (dot only).
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Nodes.DotNodeDefinition.SortIndex">
            <summary>
                Gets or sets the sorting index of the node (default: 0). If <see cref="P:GiGraph.Dot.Entities.Graphs.Attributes.DotGraphLayoutAttributes.PackingMode" /> of graph
                <see cref="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphRootAttributes.Layout" /> indicates an array packing, this attribute specifies an insertion order among
                the components, with smaller values inserted first.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Nodes.DotNodeDefinition.IsRoot">
            <summary>
                <para>
                    Specifies whether the node should be used as the center of the layout and the root of the generated spanning tree
                    (default: false; circo, twopi only).
                </para>
                <para>
                    In twopi, root will actually be the central node. In circo, the block containing the node will be central in the drawing
                    of its connected component. If not defined, twopi will pick a most central node, and circo will pick a random node.
                </para>
                <para>
                    If the <see cref="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphAttributes.RootNodeId" /> attribute on the graph is defined as the empty string, twopi will
                    reset it to name of the node picked as the root node.
                </para>
                <para>
                    For twopi, it is possible to have multiple roots, presumably one for each component. If more than one node in a component
                    is marked as the root, twopi will pick one.
                </para>
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Nodes.DotNodeDefinition.ObjectId">
            <summary>
                <para>
                    Allows the graph author to provide an identifier for graph objects which is to be included in the output (svg,
                    postscript, map only).
                </para>
                <para>
                    Normal <see cref="F:GiGraph.Dot.Types.EscapeString.DotEscapeString.NodeId" />, <see cref="F:GiGraph.Dot.Types.EscapeString.DotEscapeString.EdgeDefinition" />,
                    <see cref="F:GiGraph.Dot.Types.EscapeString.DotEscapeString.GraphId" /> substitutions can be applied (see <see cref="T:GiGraph.Dot.Types.EscapeString.DotFormattedTextBuilder" />). Note,
                    however, that <see cref="F:GiGraph.Dot.Types.EscapeString.DotEscapeString.EdgeDefinition" /> does not provide a unique ID for multi-edges.
                </para>
                <para>
                    If provided, it is the responsibility of the provider to keep ID values unique for its intended downstream use. If no ID
                    attribute is provided, then a unique internal ID is used. However, this value is unpredictable by the graph writer.
                </para>
                <para>
                    If the graph provides an ID attribute, this will be used as a prefix for internally generated attributes. By making
                    internally-used attributes distinct, the user can include multiple image maps in the same document.
                </para>
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Nodes.DotNodeDefinition.Attributes">
            <summary>
                Provides access to the attributes of the node.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Nodes.DotNodeDefinition.Annotation">
            <summary>
                The annotation to write in the output DOT script as a comment in the context of the element or section represented by the
                current object.
            </summary>
        </member>
        <member name="T:GiGraph.Dot.Entities.Nodes.DotNodeGroup">
            <summary>
                Represents a group of graph nodes with a shared list of attributes.
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Nodes.DotNodeGroup.#ctor(System.String[])">
            <summary>
                Creates a new node group initialized with the specified node identifiers. At least one identifier has to be specified.
            </summary>
            <param name="nodeIds">
                The node identifiers to initialize the instance with.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Nodes.DotNodeGroup.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Creates a new node group initialized with the specified node identifiers. At least one identifier has to be specified.
            </summary>
            <param name="nodeIds">
                The node identifiers to initialize the instance with.
            </param>
        </member>
        <member name="P:GiGraph.Dot.Entities.Nodes.DotNodeGroup.Ids">
            <summary>
                Gets the identifiers of nodes in the group.
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Qualities.IDotFillable.SetFillStyle(GiGraph.Dot.Types.Styling.DotFillStyle)">
            <summary>
                Sets the fill style.
            </summary>
            <param name="style">
                The style to set.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Qualities.IDotFillable.SetFillColor(GiGraph.Dot.Types.Colors.DotColorDefinition)">
            <summary>
                Sets the fill color.
            </summary>
            <param name="color">
                The color to set.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Qualities.IDotFillable.SetGradientFillAngle(System.Nullable{System.Int32})">
            <summary>
                Sets the gradient angle.
            </summary>
            <param name="angle">
                The gradient angle to set.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Qualities.IDotShapableNode.SetShape(GiGraph.Dot.Types.Nodes.DotNodeShape)">
            <summary>
                Sets the shape of the node.
            </summary>
            <param name="shape">
                The shape to set.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Qualities.IDotShapableNode.SetGeometry(GiGraph.Dot.Types.Geometry.DotPolygon)">
            <summary>
                Sets the geometry of the node.
            </summary>
            <param name="geometry">
                The geometry to set.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Qualities.IDotStylableEdge.SetStyle(GiGraph.Dot.Types.Styling.DotLineStyle)">
            <summary>
                Sets the style of the edge.
            </summary>
            <param name="style">
                The style to set.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Qualities.IDotStylableEdge.SetColor(GiGraph.Dot.Types.Colors.DotColorDefinition)">
            <summary>
                Sets the color of the edge.
            </summary>
            <param name="color">
                The color to set.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Qualities.IDotStylableEdge.SetWidth(System.Nullable{System.Double})">
            <summary>
                Sets the width of the edge.
            </summary>
            <param name="width">
                The width to set.
            </param>
        </member>
        <member name="P:GiGraph.Dot.Entities.Subgraphs.Attributes.IDotSubgraphAttributes.NodeRank">
            <summary>
                Gets or sets the rank constraints on the nodes in the subgraph (dot only).
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Subgraphs.Collections.DotSubgraphCollection.Add(System.Action{GiGraph.Dot.Entities.Subgraphs.DotSubgraph})">
            <summary>
                Adds a new subgraph to the collection, and returns it.
            </summary>
            <param name="init">
                An optional subgraph initializer delegate.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Subgraphs.Collections.DotSubgraphCollection.Add(System.String,System.Action{GiGraph.Dot.Entities.Subgraphs.DotSubgraph})">
            <summary>
                Adds a new subgraph with the specified identifier to the collection, and returns it.
            </summary>
            <param name="id">
                The identifier to assign to the subgraph.
            </param>
            <param name="init">
                An optional subgraph initializer delegate.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Subgraphs.Collections.DotSubgraphCollection.Add(System.String,System.Nullable{GiGraph.Dot.Types.Ranks.DotRank},System.Action{GiGraph.Dot.Entities.Subgraphs.DotSubgraph})">
            <summary>
                Adds a new subgraph with the specified identifier and rank constraints to the collection, and returns it.
            </summary>
            <param name="id">
                The identifier to assign to the subgraph.
            </param>
            <param name="nodeRank">
                The rank constraints to apply to the nodes in the subgraph.
            </param>
            <param name="init">
                An optional subgraph initializer delegate.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Subgraphs.Collections.DotSubgraphCollection.Add(System.Nullable{GiGraph.Dot.Types.Ranks.DotRank},System.Action{GiGraph.Dot.Entities.Subgraphs.DotSubgraph})">
            <summary>
                Adds a new subgraph with the specified rank constraints to the collection, and returns it.
            </summary>
            <param name="nodeRank">
                The rank constraints to apply to the nodes in the subgraph.
            </param>
            <param name="init">
                An optional subgraph initializer delegate.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Subgraphs.Collections.DotSubgraphCollection.AddWithNodes(System.String[])">
            <summary>
                Adds a new subgraph to the collection, and returns it.
            </summary>
            <param name="nodeIds">
                Optional node identifiers to populate the subgraph with.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Subgraphs.Collections.DotSubgraphCollection.AddWithNodes(System.Nullable{GiGraph.Dot.Types.Ranks.DotRank},System.String[])">
            <summary>
                Adds a new subgraph with the specified rank constraints to the collection, and returns it.
            </summary>
            <param name="nodeRank">
                The rank constraints to apply to the nodes in the subgraph.
            </param>
            <param name="nodeIds">
                Optional node identifiers to populate the subgraph with.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Subgraphs.Collections.DotSubgraphCollection.AddWithNodes(System.String,System.Nullable{GiGraph.Dot.Types.Ranks.DotRank},System.String[])">
            <summary>
                Adds a new subgraph with the specified identifier and rank constraints to the collection, and returns it.
            </summary>
            <param name="id">
                The identifier to assign to the subgraph.
            </param>
            <param name="nodeRank">
                The rank constraints to apply to the nodes in the subgraph.
            </param>
            <param name="nodeIds">
                Optional node identifiers to populate the subgraph with.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Subgraphs.Collections.DotSubgraphCollection.AddWithNodes(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Adds a new subgraph to the collection, and returns it.
            </summary>
            <param name="nodeIds">
                A node identifier collection to populate the subgraph with.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Subgraphs.Collections.DotSubgraphCollection.AddWithNodes(System.Nullable{GiGraph.Dot.Types.Ranks.DotRank},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Adds a new subgraph with the specified rank constraints to the collection, and returns it.
            </summary>
            <param name="nodeRank">
                The rank constraints to apply to the nodes in the subgraph.
            </param>
            <param name="nodeIds">
                A node identifier collection to populate the subgraph with.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Subgraphs.Collections.DotSubgraphCollection.AddWithNodes(System.String,System.Nullable{GiGraph.Dot.Types.Ranks.DotRank},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Adds a new subgraph with the specified identifier and rank constraints to the collection, and returns it.
            </summary>
            <param name="id">
                The identifier to assign to the subgraph.
            </param>
            <param name="nodeRank">
                The rank constraints to apply to the nodes in the subgraph.
            </param>
            <param name="nodeIds">
                A node identifier collection to populate the subgraph with.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Subgraphs.Collections.DotSubgraphCollection.AddWithNodes(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Adds a new subgraph with the specified identifier to the collection, and returns it.
            </summary>
            <param name="id">
                The identifier to assign to the subgraph.
            </param>
            <param name="nodeIds">
                A node identifier collection to populate the subgraph with.
            </param>
        </member>
        <member name="T:GiGraph.Dot.Entities.Subgraphs.DotSubgraph">
            <summary>
                <para>
                    Represents a subgraph as a collection of nodes that may be constrained within one rank (see <see cref="T:GiGraph.Dot.Types.Ranks.DotRank" />). Use
                    a subgraph when you want to have more granular control on the layout or style of the nodes it contains. However, when you
                    want the nodes to be displayed together in a bounding box, use a cluster subgraph instead (<see cref="T:GiGraph.Dot.Entities.Clusters.DotCluster" /> ).
                </para>
                <para>
                    Subgraph does not have any border or fill, as opposed to a cluster subgraph (<see cref="T:GiGraph.Dot.Entities.Clusters.DotCluster" />). However, it
                    supports applying a common style to nodes and edges within it, as well as constraining the nodes within one rank.
                </para>
                <para>
                    Subgraph (<see cref="T:GiGraph.Dot.Entities.Subgraphs.DotSubgraph" />) can also be used as a head or tail of an edge, in which case all nodes within them
                    are connected to the other side of the edge.
                </para>
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Subgraphs.DotSubgraph.#ctor(System.String,System.Nullable{GiGraph.Dot.Types.Ranks.DotRank})">
            <summary>
                Creates a new subgraph.
            </summary>
            <param name="id">
                The identifier to assign to the subgraph.
            </param>
            <param name="nodeRank">
                The rank constraints to apply to the nodes in the subgraph.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Subgraphs.DotSubgraph.#ctor(System.Nullable{GiGraph.Dot.Types.Ranks.DotRank})">
            <summary>
                Creates a new subgraph.
            </summary>
            <param name="nodeRank">
                The rank constraints to apply to the nodes in the subgraph.
            </param>
        </member>
        <member name="P:GiGraph.Dot.Entities.Subgraphs.DotSubgraph.Subsections">
            <summary>
                <para>
                    The subsections of the graph. They appear consecutively in the output DOT script, and inherit the graph attributes, and
                    the global node and/or edge attributes of their predecessors. When overridden in any subsection, the new graph attributes
                    and global node/edge attributes apply to the elements the section itself contains, and also to those that belong to the
                    sections that follow it (if any).
                </para>
                <para>
                    Note that each subsection is dependent on the graph attributes and the global node and edge attributes specified by the
                    sections that precede it (including those of the root section represented by the current element). Note also that some
                    graph attributes cannot be overriden, and apply to the whole graph no matter in which section they are set.
                </para>
                <para>
                    As far as setting global node and/or edge attributes for a specific group of elements is concerned,
                    <see cref="N:GiGraph.Dot.Entities.Subgraphs" /> may be the cleaner and preferable way to achieve the effect.
                </para>
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Subgraphs.DotSubgraph.Id">
            <summary>
                Gets or sets the identifier of the subgraph (optional).
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Subgraphs.DotSubgraph.FromNodes(System.String[])">
            <summary>
                Creates a new subgraph, and populates it with the specified nodes.
            </summary>
            <param name="nodeIds">
                The identifiers of nodes to populate the subgraph with.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Subgraphs.DotSubgraph.FromNodes(System.String,System.Nullable{GiGraph.Dot.Types.Ranks.DotRank},System.String[])">
            <summary>
                Creates a new subgraph, and populates it with the specified nodes.
            </summary>
            <param name="id">
                The identifier to assign to the subgraph.
            </param>
            <param name="nodeRank">
                The rank constraints to apply to the nodes in the subgraph.
            </param>
            <param name="nodeIds">
                The identifiers of nodes to populate the subgraph with.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Subgraphs.DotSubgraph.FromNodes(System.Nullable{GiGraph.Dot.Types.Ranks.DotRank},System.String[])">
            <summary>
                Creates a new subgraph, and populates it with the specified nodes.
            </summary>
            <param name="nodeRank">
                The rank constraints to apply to the nodes in the subgraph.
            </param>
            <param name="nodeIds">
                The identifiers of nodes to populate the subgraph with.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Subgraphs.DotSubgraph.FromNodes(System.Collections.Generic.IEnumerable{System.String},System.Nullable{GiGraph.Dot.Types.Ranks.DotRank},System.String)">
            <summary>
                Creates a new subgraph, and populates it with the specified nodes.
            </summary>
            <param name="nodeIds">
                The identifiers of nodes to populate the subgraph with.
            </param>
            <param name="nodeRank">
                The rank constraints to apply to the nodes in the subgraph.
            </param>
            <param name="id">
                The identifier to assign to the subgraph.
            </param>
        </member>
        <member name="P:GiGraph.Dot.Entities.Subgraphs.DotSubgraphSection.NodeRank">
            <summary>
                Gets or sets the rank constraints on the nodes in the subgraph (dot only).
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Subgraphs.DotSubgraphSection.Attributes">
            <summary>
                Provides access to the attributes of the subgraph.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Subgraphs.DotSubgraph.GiGraph#Dot#Output#Entities#IDotGraph#Subsections">
            <summary>
                Gets the subsections of the graph.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Subgraphs.DotSubgraph.GiGraph#Dot#Output#Qualities#IDotOrderable#OrderingKey">
            <summary>
                Gets the key by which the entity can be sorted in the output script among elements of the same type.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Nodes.DotNodeDefinition.GiGraph#Dot#Entities#Nodes#Attributes#IDotNodeAttributes#Style">
            <summary>
                <para>
                    Gets or sets the style of the cluster (default: unset). See the descriptions of individual <see cref="T:GiGraph.Dot.Types.Styling.DotStyles" />
                    values to learn which styles are applicable to this type of element.
                </para>
                <para>
                    Multiple styles can be used at once, for example: <see cref="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeAttributes.Style" /> = <see cref="F:GiGraph.Dot.Types.Styling.DotStyles.Rounded" /> |
                    <see cref="F:GiGraph.Dot.Types.Styling.DotStyles.Bold" />;
                </para>
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Nodes.DotNodeDefinition.GiGraph#Dot#Output#Qualities#IDotOrderable#OrderingKey">
            <summary>
                Gets the key by which the entity can be sorted in the output script among elements of the same type.
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Nodes.DotNodeDefinition.GiGraph#Dot#Entities#Qualities#IDotShapableNode#SetShape(GiGraph.Dot.Types.Nodes.DotNodeShape)">
            <summary>
                Sets the shape of the node.
            </summary>
            <param name="shape">
                The shape to set.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Nodes.DotNodeDefinition.GiGraph#Dot#Entities#Qualities#IDotShapableNode#SetGeometry(GiGraph.Dot.Types.Geometry.DotPolygon)">
            <summary>
                Sets the geometry of the node.
            </summary>
            <param name="geometry">
                The geometry to set.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Nodes.DotNodeDefinition.GiGraph#Dot#Entities#Qualities#IDotFillable#SetFillStyle(GiGraph.Dot.Types.Styling.DotFillStyle)">
            <summary>
                Sets the fill style.
            </summary>
            <param name="style">
                The style to set.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Nodes.DotNodeDefinition.GiGraph#Dot#Entities#Qualities#IDotFillable#SetFillColor(GiGraph.Dot.Types.Colors.DotColorDefinition)">
            <summary>
                Sets the fill color.
            </summary>
            <param name="color">
                The color to set.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Nodes.DotNodeDefinition.GiGraph#Dot#Entities#Qualities#IDotFillable#SetGradientFillAngle(System.Nullable{System.Int32})">
            <summary>
                Sets the gradient angle.
            </summary>
            <param name="angle">
                The gradient angle to set.
            </param>
        </member>
        <member name="P:GiGraph.Dot.Entities.Nodes.Collections.DotNodeCollection.GiGraph#Dot#Entities#Nodes#Attributes#IDotNodeAttributes#Style">
            <summary>
                <para>
                    Gets or sets the style of the cluster (default: unset). See the descriptions of individual <see cref="T:GiGraph.Dot.Types.Styling.DotStyles" />
                    values to learn which styles are applicable to this type of element.
                </para>
                <para>
                    Multiple styles can be used at once, for example: <see cref="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeAttributes.Style" /> = <see cref="F:GiGraph.Dot.Types.Styling.DotStyles.Rounded" /> |
                    <see cref="F:GiGraph.Dot.Types.Styling.DotStyles.Bold" />;
                </para>
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Nodes.Collections.DotNodeCollection.GiGraph#Dot#Entities#Qualities#IDotShapableNode#SetShape(GiGraph.Dot.Types.Nodes.DotNodeShape)">
            <summary>
                Sets the shape of the node.
            </summary>
            <param name="shape">
                The shape to set.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Nodes.Collections.DotNodeCollection.GiGraph#Dot#Entities#Qualities#IDotShapableNode#SetGeometry(GiGraph.Dot.Types.Geometry.DotPolygon)">
            <summary>
                Sets the geometry of the node.
            </summary>
            <param name="geometry">
                The geometry to set.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Nodes.Collections.DotNodeCollection.GiGraph#Dot#Entities#Qualities#IDotFillable#SetFillStyle(GiGraph.Dot.Types.Styling.DotFillStyle)">
            <summary>
                Sets the fill style.
            </summary>
            <param name="style">
                The style to set.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Nodes.Collections.DotNodeCollection.GiGraph#Dot#Entities#Qualities#IDotFillable#SetFillColor(GiGraph.Dot.Types.Colors.DotColorDefinition)">
            <summary>
                Sets the fill color.
            </summary>
            <param name="color">
                The color to set.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Nodes.Collections.DotNodeCollection.GiGraph#Dot#Entities#Qualities#IDotFillable#SetGradientFillAngle(System.Nullable{System.Int32})">
            <summary>
                Sets the gradient angle.
            </summary>
            <param name="angle">
                The gradient angle to set.
            </param>
        </member>
        <member name="P:GiGraph.Dot.Entities.Nodes.Attributes.DotNodeRootAttributes.GiGraph#Dot#Entities#Nodes#Attributes#IDotNodeAttributes#Style">
            <summary>
                <para>
                    Gets or sets the style of the cluster (default: unset). See the descriptions of individual <see cref="T:GiGraph.Dot.Types.Styling.DotStyles" />
                    values to learn which styles are applicable to this type of element.
                </para>
                <para>
                    Multiple styles can be used at once, for example: <see cref="P:GiGraph.Dot.Entities.Nodes.Attributes.IDotNodeAttributes.Style" /> = <see cref="F:GiGraph.Dot.Types.Styling.DotStyles.Rounded" /> |
                    <see cref="F:GiGraph.Dot.Types.Styling.DotStyles.Bold" />;
                </para>
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Labels.DotLabel.GiGraph#Dot#Output#Qualities#IDotEncodable#GetDotEncodedValue(GiGraph.Dot.Output.Options.DotSyntaxOptions,GiGraph.Dot.Output.Options.DotSyntaxRules)">
            <summary>
                Gets a DOT-encoded value.
            </summary><param name="options">
                The DOT generation options to use.
            </param><param name="syntaxRules">
                The DOT syntax rules to use.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.DotHtmlEntity.GiGraph#Dot#Output#Qualities#IDotHtmlEncodable#ToHtml(GiGraph.Dot.Output.Options.DotSyntaxOptions,GiGraph.Dot.Output.Options.DotSyntaxRules)">
            <summary>
                Converts the entity to an HTML string.
            </summary><param name="options">
                The syntax options to apply.
            </param><param name="syntaxRules">
                The syntax rules to apply.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.DotHtmlEntityCollection.GiGraph#Dot#Output#Qualities#IDotHtmlEncodable#ToHtml(GiGraph.Dot.Output.Options.DotSyntaxOptions,GiGraph.Dot.Output.Options.DotSyntaxRules)">
            <summary>
                Converts the entity to an HTML string.
            </summary><param name="options">
                The syntax options to apply.
            </param><param name="syntaxRules">
                The syntax rules to apply.
            </param>
        </member>
        <member name="P:GiGraph.Dot.Entities.Html.DotHtmlEntityCollection.GiGraph#Dot#Entities#Html#IDotHtmlContentEntity#Content">
            <summary>
                Gets the content items of the element.
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.DotHtmlEntityCollection.GiGraph#Dot#Entities#Html#IDotHtmlContentEntity#SetContent(GiGraph.Dot.Entities.Html.IDotHtmlEntity)">
            <summary>
                Uses the specified HTML entity as the content of the current element.
            </summary>
            <param name="entity">
                The element to set as the content.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.DotHtmlEntityCollection.GiGraph#Dot#Entities#Html#IDotHtmlContentEntity#SetContent(System.String,System.Nullable{GiGraph.Dot.Types.Alignment.DotHorizontalAlignment})">
            <summary>
                Uses the specified text as the content of the current element.
            </summary>
            <param name="text">
                The text to set as the content.
            </param>
            <param name="lineAlignment">
                Specifies horizontal placement of lines if multiline text is specified.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.DotHtmlEntityCollection.GiGraph#Dot#Entities#Html#IDotHtmlContentEntity#SetHtmlContent(System.String)">
            <summary>
                Uses the specified HTML as the content of the current element.
            </summary>
            <param name="html">
                The HTML to use as the content.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Html.DotHtmlEntityCollection.GiGraph#Dot#Entities#Html#IDotHtmlContentEntity#SetContent(System.Action{GiGraph.Dot.Entities.Html.Builder.DotHtmlBuilder})">
            <summary>
                Uses the builder to build a HTML entity to use as the content of the current element.
            </summary>
            <param name="build">
                The HTML builder delegate.
            </param>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.DotCommonGraphSection.GiGraph#Dot#Output#Entities#IDotGraphSection#Attributes">
            <summary>
                Gets the collection of attributes of the graph section.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.DotGraph.GiGraph#Dot#Output#Entities#IDotGraph#Subsections">
            <summary>
                Gets the subsections of the graph.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.DotGraph.GiGraph#Dot#Output#Qualities#IDotOrderable#OrderingKey">
            <summary>
                Gets the key by which the entity can be sorted in the output script among elements of the same type.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.DotGraphSection.GiGraph#Dot#Entities#Graphs#Attributes#IDotGraphRootAttributes#Clusters">
            <summary>
                Attributes applied to clusters.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.DotGraphSection.GiGraph#Dot#Entities#Graphs#Attributes#IDotGraphAttributes#Style">
            <summary>
                <para>
                    Gets or sets the style of the graph (default: unset). See the descriptions of individual <see cref="T:GiGraph.Dot.Types.Styling.DotStyles" /> values
                    to learn which styles are applicable to this type of element.
                </para>
                <para>
                    Multiple styles can be used at once, for example: <see cref="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphAttributes.Style" /> = <see cref="F:GiGraph.Dot.Types.Styling.DotStyles.Rounded" /> |
                    <see cref="F:GiGraph.Dot.Types.Styling.DotStyles.Bold" />;
                </para>
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Graphs.Attributes.DotGraphRootAttributes.GiGraph#Dot#Entities#Graphs#Attributes#IDotGraphAttributes#Style">
            <summary>
                <para>
                    Gets or sets the style of the graph (default: unset). See the descriptions of individual <see cref="T:GiGraph.Dot.Types.Styling.DotStyles" /> values
                    to learn which styles are applicable to this type of element.
                </para>
                <para>
                    Multiple styles can be used at once, for example: <see cref="P:GiGraph.Dot.Entities.Graphs.Attributes.IDotGraphAttributes.Style" /> = <see cref="F:GiGraph.Dot.Types.Styling.DotStyles.Rounded" /> |
                    <see cref="F:GiGraph.Dot.Types.Styling.DotStyles.Bold" />;
                </para>
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.DotEdgeDefinition.GiGraph#Dot#Entities#Edges#Attributes#IDotEdgeRootAttributes#Head">
            <summary>
                Attributes applied to the head of the edge.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.DotEdgeDefinition.GiGraph#Dot#Entities#Edges#Attributes#IDotEdgeRootAttributes#Tail">
            <summary>
                Attributes applied to the tail of the edge.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.DotEdgeDefinition.GiGraph#Dot#Entities#Edges#Attributes#IDotEdgeAttributes#Style">
            <summary>
                <para>
                    Gets or sets the style of the edge (default: unset). See the descriptions of individual <see cref="T:GiGraph.Dot.Types.Styling.DotStyles" /> values
                    to learn which styles are applicable to this type of element.
                </para>
                <para>
                    Multiple styles can be used at once, for example: <see cref="P:GiGraph.Dot.Entities.Edges.Attributes.IDotEdgeAttributes.Style" /> = <see cref="F:GiGraph.Dot.Types.Styling.DotStyles.Rounded" /> |
                    <see cref="F:GiGraph.Dot.Types.Styling.DotStyles.Bold" />;
                </para>
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.DotEdgeDefinition.GiGraph#Dot#Output#Qualities#IDotOrderable#OrderingKey">
            <summary>
                Gets the key by which the entity can be sorted in the output script among elements of the same type.
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Edges.DotEdgeDefinition.GiGraph#Dot#Entities#Qualities#IDotStylableEdge#SetStyle(GiGraph.Dot.Types.Styling.DotLineStyle)">
            <summary>
                Sets the style of the edge.
            </summary>
            <param name="style">
                The style to set.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Edges.DotEdgeDefinition.GiGraph#Dot#Entities#Qualities#IDotStylableEdge#SetColor(GiGraph.Dot.Types.Colors.DotColorDefinition)">
            <summary>
                Sets the color of the edge.
            </summary>
            <param name="color">
                The color to set.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Edges.DotEdgeDefinition.GiGraph#Dot#Entities#Qualities#IDotStylableEdge#SetWidth(System.Nullable{System.Double})">
            <summary>
                Sets the width of the edge.
            </summary>
            <param name="width">
                The width to set.
            </param>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Endpoints.DotEndpointDefinition.GiGraph#Dot#Output#Qualities#IDotOrderable#OrderingKey">
            <summary>
                Gets the key by which the entity can be sorted in the output script among elements of the same type.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Collections.DotEdgeCollection.GiGraph#Dot#Entities#Edges#Attributes#IDotEdgeAttributes#Style">
            <summary>
                <para>
                    Gets or sets the style of the edge (default: unset). See the descriptions of individual <see cref="T:GiGraph.Dot.Types.Styling.DotStyles" /> values
                    to learn which styles are applicable to this type of element.
                </para>
                <para>
                    Multiple styles can be used at once, for example: <see cref="P:GiGraph.Dot.Entities.Edges.Attributes.IDotEdgeAttributes.Style" /> = <see cref="F:GiGraph.Dot.Types.Styling.DotStyles.Rounded" /> |
                    <see cref="F:GiGraph.Dot.Types.Styling.DotStyles.Bold" />;
                </para>
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Edges.Collections.DotEdgeCollection.GiGraph#Dot#Entities#Qualities#IDotStylableEdge#SetStyle(GiGraph.Dot.Types.Styling.DotLineStyle)">
            <summary>
                Sets the style of the edge.
            </summary>
            <param name="style">
                The style to set.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Edges.Collections.DotEdgeCollection.GiGraph#Dot#Entities#Qualities#IDotStylableEdge#SetColor(GiGraph.Dot.Types.Colors.DotColorDefinition)">
            <summary>
                Sets the color of the edge.
            </summary>
            <param name="color">
                The color to set.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Edges.Collections.DotEdgeCollection.GiGraph#Dot#Entities#Qualities#IDotStylableEdge#SetWidth(System.Nullable{System.Double})">
            <summary>
                Sets the width of the edge.
            </summary>
            <param name="width">
                The width to set.
            </param>
        </member>
        <member name="P:GiGraph.Dot.Entities.Edges.Attributes.DotEdgeRootAttributes.GiGraph#Dot#Entities#Edges#Attributes#IDotEdgeAttributes#Style">
            <summary>
                <para>
                    Gets or sets the style of the edge (default: unset). See the descriptions of individual <see cref="T:GiGraph.Dot.Types.Styling.DotStyles" /> values
                    to learn which styles are applicable to this type of element.
                </para>
                <para>
                    Multiple styles can be used at once, for example: <see cref="P:GiGraph.Dot.Entities.Edges.Attributes.IDotEdgeAttributes.Style" /> = <see cref="F:GiGraph.Dot.Types.Styling.DotStyles.Rounded" /> |
                    <see cref="F:GiGraph.Dot.Types.Styling.DotStyles.Bold" />;
                </para>
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Clusters.DotCluster.GiGraph#Dot#Output#Entities#IDotGraph#Subsections">
            <summary>
                Gets the subsections of the graph.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Clusters.DotCluster.GiGraph#Dot#Output#Qualities#IDotOrderable#OrderingKey">
            <summary>
                Gets the key by which the entity can be sorted in the output script among elements of the same type.
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Clusters.DotClusterSection.GiGraph#Dot#Entities#Qualities#IDotFillable#SetFillStyle(GiGraph.Dot.Types.Styling.DotFillStyle)">
            <summary>
                Sets the fill style.
            </summary>
            <param name="style">
                The style to set.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Clusters.DotClusterSection.GiGraph#Dot#Entities#Qualities#IDotFillable#SetFillColor(GiGraph.Dot.Types.Colors.DotColorDefinition)">
            <summary>
                Sets the fill color.
            </summary>
            <param name="color">
                The color to set.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Clusters.DotClusterSection.GiGraph#Dot#Entities#Qualities#IDotFillable#SetGradientFillAngle(System.Nullable{System.Int32})">
            <summary>
                Sets the gradient angle.
            </summary>
            <param name="angle">
                The gradient angle to set.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Clusters.Collections.DotGraphClusterCollection.GiGraph#Dot#Entities#Qualities#IDotFillable#SetFillStyle(GiGraph.Dot.Types.Styling.DotFillStyle)">
            <summary>
                Sets the fill style.
            </summary>
            <param name="style">
                The style to set.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Clusters.Collections.DotGraphClusterCollection.GiGraph#Dot#Entities#Qualities#IDotFillable#SetFillColor(GiGraph.Dot.Types.Colors.DotColorDefinition)">
            <summary>
                Sets the fill color.
            </summary>
            <param name="color">
                The color to set.
            </param>
        </member>
        <member name="M:GiGraph.Dot.Entities.Clusters.Collections.DotGraphClusterCollection.GiGraph#Dot#Entities#Qualities#IDotFillable#SetGradientFillAngle(System.Nullable{System.Int32})">
            <summary>
                Sets the gradient angle.
            </summary>
            <param name="angle">
                The gradient angle to set.
            </param>
        </member>
        <member name="P:GiGraph.Dot.Entities.Clusters.Attributes.DotClusterRootAttributes.GiGraph#Dot#Entities#Clusters#Attributes#IDotClusterAttributes#Style">
            <summary>
                <para>
                    Gets or sets the style of the cluster (default: unset). See the descriptions of individual <see cref="T:GiGraph.Dot.Types.Styling.DotStyles" />
                    values to learn which styles are applicable to this type of element.
                </para>
                <para>
                    Multiple styles can be used at once, for example: <see cref="P:GiGraph.Dot.Entities.Clusters.Attributes.IDotClusterAttributes.Style" /> = <see cref="F:GiGraph.Dot.Types.Styling.DotStyles.Rounded" /> |
                    <see cref="F:GiGraph.Dot.Types.Styling.DotStyles.Bold" />;
                </para>
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.DotAttribute.GiGraph#Dot#Output#Qualities#IDotEncodable#GetDotEncodedValue(GiGraph.Dot.Output.Options.DotSyntaxOptions,GiGraph.Dot.Output.Options.DotSyntaxRules)">
            <summary>
                Gets a DOT-encoded value.
            </summary><param name="options">
                The DOT generation options to use.
            </param><param name="syntaxRules">
                The DOT syntax rules to use.
            </param>
        </member>
        <member name="P:GiGraph.Dot.Entities.Attributes.DotAttribute.GiGraph#Dot#Output#Qualities#IDotOrderable#OrderingKey">
            <summary>
                Gets the key by which the entity can be sorted in the output script among elements of the same type.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Attributes.Properties.DotEntityAttributes.GiGraph#Dot#Entities#Attributes#Properties#IDotEntityAttributes#Accessor">
            <summary>
                Gets an accessor that provides access to attributes through property expressions.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Attributes.Properties.Accessors.DotEntityAttributesAccessor.GiGraph#Dot#Entities#Attributes#Properties#Accessors#IDotEntityAttributesAccessor#InterfaceType">
            <summary>
                Gets the interface that exposes properties representing DOT attributes.
            </summary>
        </member>
        <member name="P:GiGraph.Dot.Entities.Attributes.Properties.Accessors.DotEntityAttributesAccessor.GiGraph#Dot#Entities#Attributes#Properties#Accessors#IDotEntityAttributesAccessor#Implementation">
            <summary>
                Gets the implementation that exposes properties representing DOT attributes.
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.Properties.Accessors.DotEntityAttributesAccessor.GiGraph#Dot#Entities#Attributes#Properties#Accessors#IDotEntityAttributesAccessor#GetPropertyKey(System.Reflection.PropertyInfo)">
            <summary>
                Gets an attribute key associated with the specified property of the current object.
            </summary>
            <param name="property">
                The property to get a key for.
            </param>
        </member>
        <member name="P:GiGraph.Dot.Entities.Attributes.Collections.DotAttributeCollection.GiGraph#Dot#Output#Qualities#IDotAnnotatable#Annotation">
            <summary>
                The annotation to write in the output DOT script as a comment in the context of the element or section represented by the
                current object.
            </summary>
        </member>
        <member name="M:GiGraph.Dot.Entities.Attributes.Collections.DotAttributeCollection.GiGraph#Dot#Output#Entities#IDotAttributeCollection#Any">
            <summary>
                Checks if the collection contains any attributes.
            </summary>
        </member>
    </members>
</doc>
